Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\AssignContactsPage.jsx 
====================================================== 
 
import React, { useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import Papa from "papaparse";
import Modal from "react-modal";
import TagFilterDropdown from "./components/TagFilterDropdown";

// CSV campaign flow (schema → upload → map → validate → dry-run → commit)
import CsvAudienceSection from "./components/CsvAudienceSection";
import { fetchCsvSchema } from "./api/csvApi";

if (typeof document !== "undefined" && process.env.NODE_ENV !== "test") {
  Modal.setAppElement("#root");
}

export default function AssignContactsPage() {
  const { id: campaignId } = useParams();
  const [contacts, setContacts] = useState([]);
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [selectedIds, setSelectedIds] = useState([]);
  const [search, setSearch] = useState("");
  const [tags, setTags] = useState([]);
  const [campaign, setCampaign] = useState(null);

  const [showFieldMapModal, setShowFieldMapModal] = useState(false);
  const [csvHeaders, setCsvHeaders] = useState([]);
  const [fieldMapping, setFieldMapping] = useState({ name: "", phone: "" });
  const [parsedCSV, setParsedCSV] = useState([]);
  const [importedCount, setImportedCount] = useState(0);
  const [saveToDb, setSaveToDb] = useState(true);
  const [selectedTagId, setSelectedTagId] = useState(null);
  const [allTags, setAllTags] = useState([]);

  // was mistakenly `[setIsImporting] = useState(false)` before
  const [isImporting, setIsImporting] = useState(false);

  // we still fetch placeholder count to adapt helper text, but UI shows regardless
  const [placeholderCount, setPlaceholderCount] = useState(0);

  const importedRef = useRef(null);

  // Helper for consistent phone extraction
  function getPhone(contact) {
    return contact.phoneNumber || contact.phone || "";
  }

  useEffect(() => {
    loadCampaign();
    fetchAllTags();
    // eslint-disable-next-line
  }, [campaignId]);

  useEffect(() => {
    loadContacts();
    // eslint-disable-next-line
  }, [tags]);

  useEffect(() => {
    applySearchFilter();
    // eslint-disable-next-line
  }, [contacts, search]);

  const loadCampaign = async () => {
    if (!campaignId) {
      toast.error("No campaign ID found in URL.");
      return;
    }
    try {
      const res = await axiosClient.get(`/campaign/${campaignId}`);
      setCampaign(res.data);

      // Fetch the CSV schema to know how many template params exist
      try {
        const sc = await fetchCsvSchema(campaignId); // { headers, placeholderCount, ... }
        const n = Number(sc?.placeholderCount ?? 0);
        setPlaceholderCount(isNaN(n) ? 0 : n);
      } catch {
        setPlaceholderCount(0);
      }
    } catch (err) {
      console.error("Failed to load campaign:", err);
      toast.error("Failed to load campaign");
    }
  };

  const fetchAllTags = async () => {
    try {
      const res = await axiosClient.get("/tags/get-tags");
      const tags = res.data?.data || res.data || [];
      setAllTags(tags);
    } catch {
      toast.error("Failed to load tags");
    }
  };

  const loadContacts = async () => {
    try {
      let res;
      if (tags.length > 0) {
        res = await axiosClient.post("/contacts/filter-by-tags", tags);
        setContacts(res.data?.data || []);
      } else {
        res = await axiosClient.get("/contacts", {
          params: { tab: "all", page: 1, pageSize: 1000 },
        });
        setContacts(res.data?.data?.items || []);
      }
    } catch {
      toast.error("Failed to load contacts");
    }
  };

  const applySearchFilter = () => {
    const result = contacts.filter(
      c =>
        c.name?.toLowerCase().includes(search.toLowerCase()) ||
        getPhone(c).includes(search)
    );
    setFilteredContacts(result);
  };

  const toggleContact = id => {
    setSelectedIds(prev =>
      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
    );
  };

  const toggleSelectAll = () => {
    const filteredIds = filteredContacts.map(c => c.id);
    const allSelected = filteredIds.every(id => selectedIds.includes(id));
    setSelectedIds(prev =>
      allSelected
        ? prev.filter(id => !filteredIds.includes(id))
        : [...new Set([...prev, ...filteredIds])]
    );
  };

  // ===== Existing local CSV → CRM import (kept as-is) =====
  const handleFileUpload = e => {
    const file = e.target.files[0];
    if (!file) return;

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: function (results) {
        const headers = Object.keys(results.data[0] || {});
        setParsedCSV(results.data);
        setCsvHeaders(headers);
        setShowFieldMapModal(true);
      },
      error: function () {
        toast.error("CSV Parsing Failed");
      },
    });
  };

  useEffect(() => {
    if (csvHeaders.length > 0) {
      const suggestions = {
        name: ["name", "full name", "contact name"],
        phone: ["phone", "mobile", "number", "whatsapp"],
      };
      const bestMatch = fieldOptions =>
        csvHeaders.find(h =>
          fieldOptions.some(option =>
            h.toLowerCase().includes(option.toLowerCase())
          )
        ) || "";
      setFieldMapping({
        name: bestMatch(suggestions.name),
        phone: bestMatch(suggestions.phone),
      });
    }
  }, [csvHeaders]);

  const applyFieldMapping = async () => {
    const mapped = parsedCSV
      .filter(row => row[fieldMapping.name] && row[fieldMapping.phone])
      .map(row => ({
        id: crypto.randomUUID(),
        name: row[fieldMapping.name],
        phone: row[fieldMapping.phone],
        tags: selectedTagId
          ? [
              {
                tagId: selectedTagId,
                tagName: allTags.find(t => t.id === selectedTagId)?.name || "",
              },
            ]
          : [],
      }));

    setContacts(prev => [...prev, ...mapped]);
    setSelectedIds(prev => [...new Set([...prev, ...mapped.map(c => c.id)])]);
    setImportedCount(mapped.length);
    setShowFieldMapModal(false);
    toast.success(`${mapped.length} contacts imported.`);

    setTimeout(() => {
      if (importedRef.current) {
        importedRef.current.scrollIntoView({ behavior: "smooth" });
      }
    }, 200);

    if (saveToDb) {
      try {
        setIsImporting(true);
        await axiosClient.post("/contacts/bulk-import", mapped);
        toast.success("Contacts also saved to your CRM.");
      } catch {
        toast.error("Saving to CRM failed.");
      } finally {
        setIsImporting(false);
      }
    }
  };

  const assignContacts = async () => {
    if (!campaign || !campaign.id) {
      toast.error("Campaign not ready. Please try again.");
      return;
    }
    if (selectedIds.length === 0) {
      toast.warn("Please select at least one contact");
      return;
    }

    const validIds = selectedIds.filter(id =>
      contacts.find(c => c.id === id && getPhone(c).trim() !== "")
    );

    if (validIds.length === 0) {
      toast.warn("No selected contacts have valid phone numbers.");
      return;
    }

    try {
      const payload = { contactIds: validIds };
      await axiosClient.post(
        `/campaign/${campaign.id}/assign-contacts`,
        payload
      );
      toast.success("Contacts assigned to campaign");
    } catch (err) {
      const message =
        err.response?.data?.message ||
        "Something went wrong during assignment.";
      toast.error(message);
    }
  };

  const allVisibleSelected = filteredContacts.every(c =>
    selectedIds.includes(c.id)
  );

  return (
    <div className="max-w-7xl mx-auto px-4 py-6">
      <h1 className="text-2xl font-bold text-purple-600 mb-6 flex items-center gap-2">
        🎯 Assign Contacts to Campaign
      </h1>

      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <input
          className="border p-2 rounded-md w-full sm:w-1/3"
          type="text"
          placeholder="Search by name or phone..."
          value={search}
          onChange={e => setSearch(e.target.value)}
        />
        <TagFilterDropdown
          selectedTags={tags}
          onChange={setTags}
          category="All"
        />
        <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-auto">
          + Upload CSV
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            className="hidden"
          />
        </label>
      </div>

      <div
        className="bg-white rounded-xl shadow-sm overflow-x-auto"
        ref={importedRef}
      >
        <table className="min-w-full text-sm">
          <thead className="bg-gray-100 text-gray-700">
            <tr>
              <th className="px-4 py-2 text-center">
                <input
                  type="checkbox"
                  checked={allVisibleSelected}
                  onChange={toggleSelectAll}
                />
              </th>
              <th className="px-4 py-2 text-left">Name</th>
              <th className="px-4 py-2 text-left">Phone</th>
              <th className="px-4 py-2 text-left">Tags</th>
              <th className="px-4 py-2 text-left">Status</th>
            </tr>
          </thead>
          <tbody>
            {filteredContacts.map(contact => (
              <tr key={contact.id} className="border-t hover:bg-gray-50">
                <td className="px-4 py-2 text-center">
                  <input
                    type="checkbox"
                    checked={selectedIds.includes(contact.id)}
                    onChange={() => toggleContact(contact.id)}
                  />
                </td>
                <td className="px-4 py-2">{contact.name || "Unnamed"}</td>
                <td className="px-4 py-2">{getPhone(contact) || "—"}</td>
                <td className="px-4 py-2">
                  <div className="flex flex-wrap gap-1">
                    {(contact.tags || contact.contactTags || []).map(tag => (
                      <span
                        key={tag.tagId || tag.id}
                        className="px-2 py-0.5 text-xs rounded-full"
                        style={{
                          backgroundColor: tag.colorHex || "#E5E7EB",
                          color: "#000",
                        }}
                      >
                        {tag.tagName || tag.name}
                      </span>
                    ))}
                  </div>
                </td>
                <td className="px-4 py-2">
                  {getPhone(contact).trim() !== "" ? "✅ Valid" : "⚠️ No Phone"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-600">
        <div>
          Selected: {selectedIds.length} / WhatsApp-ready:{" "}
          {
            filteredContacts.filter(
              c => selectedIds.includes(c.id) && getPhone(c).trim() !== ""
            ).length
          }
        </div>
        {importedCount > 0 && (
          <div className="text-green-600">
            ✔ Imported: {importedCount} contact(s)
          </div>
        )}
      </div>

      {/* === Campaign CSV flow (ALWAYS visible; phones-only works when N=0) === */}
      {campaignId && (
        <div className="mt-8 rounded-xl border bg-white p-4 shadow-sm">
          <h2 className="mb-2 text-sm font-semibold text-gray-800">
            Bulk Personalization via CSV
            {placeholderCount > 0 && (
              <>
                {" "}
                (Template has {placeholderCount} dynamic field
                {placeholderCount > 1 ? "s" : ""})
              </>
            )}
          </h2>
          <p className="mb-3 text-xs text-gray-600">
            Upload a CSV with at least a <code>phone</code> column
            {placeholderCount > 0 && (
              <>
                {" "}
                and values for <code>{"{{1}}"}</code>
                {placeholderCount > 1 && (
                  <>
                    …<code>{`{{${placeholderCount}}}`}</code>
                  </>
                )}
              </>
            )}
            , then validate, dry-run, and persist to create an Audience +
            Recipients with idempotency. Your manual assignment flow above
            remains available.
          </p>
          <CsvAudienceSection campaignId={campaignId} />
        </div>
      )}

      <div className="mt-6 flex justify-end">
        <button
          onClick={assignContacts}
          disabled={false}
          className="px-6 py-3 rounded-lg transition bg-purple-600 text-white hover:bg-purple-700"
        >
          Assign to Campaign
        </button>
      </div>

      <Modal
        isOpen={showFieldMapModal}
        onRequestClose={() => setShowFieldMapModal(false)}
        className="bg-white rounded-lg shadow-lg max-w-xl mx-auto mt-20 p-6"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
      >
        <h2 className="text-lg font-bold mb-4">🧩 Map CSV Fields</h2>
        <div className="space-y-4">
          {["name", "phone"].map(field => (
            <div key={field}>
              <label className="block text-sm font-medium mb-1 capitalize">
                {field}
              </label>
              <select
                className="border px-3 py-2 rounded w-full"
                value={fieldMapping[field]}
                onChange={e =>
                  setFieldMapping(prev => ({
                    ...prev,
                    [field]: e.target.value,
                  }))
                }
              >
                <option value="">-- Select CSV column --</option>
                {csvHeaders.map(header => (
                  <option key={header} value={header}>
                    {header}
                  </option>
                ))}
              </select>
            </div>
          ))}
          <div>
            <label className="block text-sm font-medium mb-1">
              Apply Tag to All
            </label>
            <select
              className="border px-3 py-2 rounded w-full"
              value={selectedTagId || ""}
              onChange={e => setSelectedTagId(e.target.value)}
            >
              <option value="">-- None --</option>
              {Array.isArray(allTags) &&
                allTags.map(tag => (
                  <option key={tag.id} value={tag.id}>
                    {tag.name}
                  </option>
                ))}
            </select>
          </div>
        </div>

        <div className="mt-4">
          <label className="inline-flex items-center">
            <input
              type="checkbox"
              className="mr-2"
              checked={saveToDb}
              onChange={e => setSaveToDb(e.target.checked)}
            />
            Also save these contacts to your CRM
          </label>
        </div>

        <div className="mt-6 flex justify-end gap-3">
          <button
            className="text-gray-600 hover:underline"
            onClick={() => setShowFieldMapModal(false)}
          >
            Cancel
          </button>
          <button
            className="bg-purple-600 text-white px-4 py-2 rounded-md"
            onClick={applyFieldMapping}
            disabled={isImporting}
          >
            {isImporting ? "Importing…" : "Import & Apply"}
          </button>
        </div>
      </Modal>
    </div>
  );
}

// import React, { useEffect, useRef, useState } from "react";
// import { useParams } from "react-router-dom";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import Papa from "papaparse";
// import Modal from "react-modal";
// // ❌ removed: WhatsAppBubblePreview
// import TagFilterDropdown from "./components/TagFilterDropdown";

// if (typeof document !== "undefined" && process.env.NODE_ENV !== "test") {
//   Modal.setAppElement("#root");
// }

// export default function AssignContactsPage() {
//   const { id: campaignId } = useParams();
//   const [contacts, setContacts] = useState([]);
//   const [filteredContacts, setFilteredContacts] = useState([]);
//   const [selectedIds, setSelectedIds] = useState([]);
//   const [search, setSearch] = useState("");
//   const [tags, setTags] = useState([]);
//   const [campaign, setCampaign] = useState(null);

//   const [showFieldMapModal, setShowFieldMapModal] = useState(false);
//   const [csvHeaders, setCsvHeaders] = useState([]);
//   const [fieldMapping, setFieldMapping] = useState({ name: "", phone: "" });
//   const [parsedCSV, setParsedCSV] = useState([]);
//   const [importedCount, setImportedCount] = useState(0);
//   const [saveToDb, setSaveToDb] = useState(true);
//   const [selectedTagId, setSelectedTagId] = useState(null);
//   const [allTags, setAllTags] = useState([]);
//   const [setIsImporting] = useState(false);

//   const importedRef = useRef(null);

//   // ✅ Helper for consistent phone extraction
//   function getPhone(contact) {
//     return contact.phoneNumber || contact.phone || "";
//   }

//   useEffect(() => {
//     loadCampaign();
//     fetchAllTags();
//     // eslint-disable-next-line
//   }, [campaignId]);

//   useEffect(() => {
//     loadContacts();
//     // eslint-disable-next-line
//   }, [tags]);

//   useEffect(() => {
//     applySearchFilter();
//     // eslint-disable-next-line
//   }, [contacts, search]);

//   const loadCampaign = async () => {
//     if (!campaignId) {
//       toast.error("No campaign ID found in URL.");
//       return;
//     }
//     try {
//       const res = await axiosClient.get(`/campaign/${campaignId}`);
//       setCampaign(res.data);
//       // console.log("Loaded campaign:", res.data);
//     } catch (err) {
//       console.error("Failed to load campaign:", err);
//       toast.error("Failed to load campaign");
//     }
//   };

//   const fetchAllTags = async () => {
//     try {
//       const res = await axiosClient.get("/tags/get-tags");
//       const tags = res.data?.data || res.data || [];
//       setAllTags(tags);
//     } catch {
//       toast.error("Failed to load tags");
//     }
//   };

//   const loadContacts = async () => {
//     try {
//       let res;
//       if (tags.length > 0) {
//         res = await axiosClient.post("/contacts/filter-by-tags", tags);
//         setContacts(res.data?.data || []);
//       } else {
//         res = await axiosClient.get("/contacts", {
//           params: { tab: "all", page: 1, pageSize: 1000 },
//         });
//         setContacts(res.data?.data?.items || []);
//       }
//     } catch {
//       toast.error("Failed to load contacts");
//     }
//   };

//   const applySearchFilter = () => {
//     const result = contacts.filter(
//       c =>
//         c.name?.toLowerCase().includes(search.toLowerCase()) ||
//         getPhone(c).includes(search)
//     );
//     setFilteredContacts(result);
//   };

//   const toggleContact = id => {
//     setSelectedIds(prev =>
//       prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
//     );
//   };

//   const toggleSelectAll = () => {
//     const filteredIds = filteredContacts.map(c => c.id);
//     const allSelected = filteredIds.every(id => selectedIds.includes(id));
//     setSelectedIds(prev =>
//       allSelected
//         ? prev.filter(id => !filteredIds.includes(id))
//         : [...new Set([...prev, ...filteredIds])]
//     );
//   };

//   const handleFileUpload = e => {
//     const file = e.target.files[0];
//     if (!file) return;

//     Papa.parse(file, {
//       header: true,
//       skipEmptyLines: true,
//       complete: function (results) {
//         const headers = Object.keys(results.data[0] || {});
//         setParsedCSV(results.data);
//         setCsvHeaders(headers);
//         setShowFieldMapModal(true);
//       },
//       error: function () {
//         toast.error("CSV Parsing Failed");
//       },
//     });
//   };

//   useEffect(() => {
//     if (csvHeaders.length > 0) {
//       const suggestions = {
//         name: ["name", "full name", "contact name"],
//         phone: ["phone", "mobile", "number", "whatsapp"],
//       };
//       const bestMatch = fieldOptions =>
//         csvHeaders.find(h =>
//           fieldOptions.some(option =>
//             h.toLowerCase().includes(option.toLowerCase())
//           )
//         ) || "";
//       setFieldMapping({
//         name: bestMatch(suggestions.name),
//         phone: bestMatch(suggestions.phone),
//       });
//     }
//   }, [csvHeaders]);

//   const applyFieldMapping = async () => {
//     const mapped = parsedCSV
//       .filter(row => row[fieldMapping.name] && row[fieldMapping.phone])
//       .map(row => ({
//         id: crypto.randomUUID(),
//         name: row[fieldMapping.name],
//         phone: row[fieldMapping.phone],
//         tags: selectedTagId
//           ? [
//               {
//                 tagId: selectedTagId,
//                 tagName: allTags.find(t => t.id === selectedTagId)?.name || "",
//               },
//             ]
//           : [],
//       }));

//     setContacts(prev => [...prev, ...mapped]);
//     setSelectedIds(prev => [...new Set([...prev, ...mapped.map(c => c.id)])]);
//     setImportedCount(mapped.length);
//     setShowFieldMapModal(false);
//     toast.success(`${mapped.length} contacts imported.`);

//     setTimeout(() => {
//       if (importedRef.current) {
//         importedRef.current.scrollIntoView({ behavior: "smooth" });
//       }
//     }, 200);

//     if (saveToDb) {
//       try {
//         setIsImporting(true);
//         await axiosClient.post("/contacts/bulk-import", mapped);
//         toast.success("Contacts also saved to your CRM.");
//       } catch {
//         toast.error("Saving to CRM failed.");
//       } finally {
//         setIsImporting(false);
//       }
//     }
//   };

//   const assignContacts = async () => {
//     if (!campaign || !campaign.id) {
//       toast.error("Campaign not ready. Please try again.");
//       return;
//     }
//     if (selectedIds.length === 0) {
//       toast.warn("Please select at least one contact");
//       return;
//     }

//     const validIds = selectedIds.filter(id =>
//       contacts.find(c => c.id === id && getPhone(c).trim() !== "")
//     );

//     if (validIds.length === 0) {
//       toast.warn("No selected contacts have valid phone numbers.");
//       return;
//     }

//     try {
//       const payload = { contactIds: validIds };
//       await axiosClient.post(
//         `/campaign/${campaign.id}/assign-contacts`,
//         payload
//       );
//       toast.success("Contacts assigned to campaign");
//     } catch (err) {
//       const message =
//         err.response?.data?.message ||
//         "Something went wrong during assignment.";
//       toast.error(message);
//     }
//   };

//   const allVisibleSelected = filteredContacts.every(c =>
//     selectedIds.includes(c.id)
//   );

//   return (
//     <div className="max-w-7xl mx-auto px-4 py-6">
//       <h1 className="text-2xl font-bold text-purple-600 mb-6 flex items-center gap-2">
//         🎯 Assign Contacts to Campaign
//       </h1>

//       <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
//         <input
//           className="border p-2 rounded-md w-full sm:w-1/3"
//           type="text"
//           placeholder="Search by name or phone..."
//           value={search}
//           onChange={e => setSearch(e.target.value)}
//         />
//         <TagFilterDropdown
//           selectedTags={tags}
//           onChange={setTags}
//           category="All"
//         />
//         <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-auto">
//           + Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={handleFileUpload}
//             className="hidden"
//           />
//         </label>
//       </div>

//       <div
//         className="bg-white rounded-xl shadow-sm overflow-x-auto"
//         ref={importedRef}
//       >
//         <table className="min-w-full text-sm">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               <th className="px-4 py-2 text-center">
//                 <input
//                   type="checkbox"
//                   checked={allVisibleSelected}
//                   onChange={toggleSelectAll}
//                 />
//               </th>
//               <th className="px-4 py-2 text-left">Name</th>
//               <th className="px-4 py-2 text-left">Phone</th>
//               <th className="px-4 py-2 text-left">Tags</th>
//               <th className="px-4 py-2 text-left">Status</th>
//             </tr>
//           </thead>
//           <tbody>
//             {filteredContacts.map(contact => (
//               <tr key={contact.id} className="border-t hover:bg-gray-50">
//                 <td className="px-4 py-2 text-center">
//                   <input
//                     type="checkbox"
//                     checked={selectedIds.includes(contact.id)}
//                     onChange={() => toggleContact(contact.id)}
//                   />
//                 </td>
//                 <td className="px-4 py-2">{contact.name || "Unnamed"}</td>
//                 <td className="px-4 py-2">{getPhone(contact) || "—"}</td>
//                 <td className="px-4 py-2">
//                   <div className="flex flex-wrap gap-1">
//                     {(contact.tags || contact.contactTags || []).map(tag => (
//                       <span
//                         key={tag.tagId || tag.id}
//                         className="px-2 py-0.5 text-xs rounded-full"
//                         style={{
//                           backgroundColor: tag.colorHex || "#E5E7EB",
//                           color: "#000",
//                         }}
//                       >
//                         {tag.tagName || tag.name}
//                       </span>
//                     ))}
//                   </div>
//                 </td>
//                 <td className="px-4 py-2">
//                   {getPhone(contact).trim() !== "" ? "✅ Valid" : "⚠️ No Phone"}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-600">
//         <div>
//           Selected: {selectedIds.length} / WhatsApp-ready:{" "}
//           {
//             filteredContacts.filter(
//               c => selectedIds.includes(c.id) && getPhone(c).trim() !== ""
//             ).length
//           }
//         </div>
//         {importedCount > 0 && (
//           <div className="text-green-600">
//             ✔ Imported: {importedCount} contact(s)
//           </div>
//         )}
//       </div>

//       {/* ❌ Preview removed */}

//       <div className="mt-6 flex justify-end">
//         <button
//           onClick={assignContacts}
//           disabled={false}
//           className="px-6 py-3 rounded-lg transition bg-purple-600 text-white hover:bg-purple-700"
//         >
//           Assign to Campaign
//         </button>
//       </div>

//       <Modal
//         isOpen={showFieldMapModal}
//         onRequestClose={() => setShowFieldMapModal(false)}
//         className="bg-white rounded-lg shadow-lg max-w-xl mx-auto mt-20 p-6"
//         overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
//       >
//         <h2 className="text-lg font-bold mb-4">🧩 Map CSV Fields</h2>
//         <div className="space-y-4">
//           {["name", "phone"].map(field => (
//             <div key={field}>
//               <label className="block text-sm font-medium mb-1 capitalize">
//                 {field}
//               </label>
//               <select
//                 className="border px-3 py-2 rounded w-full"
//                 value={fieldMapping[field]}
//                 onChange={e =>
//                   setFieldMapping(prev => ({
//                     ...prev,
//                     [field]: e.target.value,
//                   }))
//                 }
//               >
//                 <option value="">-- Select CSV column --</option>
//                 {csvHeaders.map(header => (
//                   <option key={header} value={header}>
//                     {header}
//                   </option>
//                 ))}
//               </select>
//             </div>
//           ))}
//           <div>
//             <label className="block text-sm font-medium mb-1">
//               Apply Tag to All
//             </label>
//             <select
//               className="border px-3 py-2 rounded w-full"
//               value={selectedTagId || ""}
//               onChange={e => setSelectedTagId(e.target.value)}
//             >
//               <option value="">-- None --</option>
//               {Array.isArray(allTags) &&
//                 allTags.map(tag => (
//                   <option key={tag.id} value={tag.id}>
//                     {tag.name}
//                   </option>
//                 ))}
//             </select>
//           </div>
//         </div>

//         <div className="mt-4">
//           <label className="inline-flex items-center">
//             <input
//               type="checkbox"
//               className="mr-2"
//               checked={saveToDb}
//               onChange={e => setSaveToDb(e.target.checked)}
//             />
//             Also save these contacts to your CRM
//           </label>
//         </div>

//         <div className="mt-6 flex justify-end gap-3">
//           <button
//             className="text-gray-600 hover:underline"
//             onClick={() => setShowFieldMapModal(false)}
//           >
//             Cancel
//           </button>
//           <button
//             className="bg-purple-600 text-white px-4 py-2 rounded-md"
//             onClick={applyFieldMapping}
//           >
//             Import & Apply
//           </button>
//         </div>
//       </Modal>
//     </div>
//   );
// }
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignBuilderPage.jsx 
====================================================== 
 
// 📄 src/pages/campaigns/CampaignBuilderPage.jsx
import React, { useEffect, useMemo, useState } from "react";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../auth/context/pld_AuthContext";

// === Adjust this if your API route differs ===
const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

const isGuid = v =>
  !!v &&
  /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
    v
  );

// Header kind helpers (frontend-only)
const HK = Object.freeze({
  None: "none",
  Text: "text",
  Image: "image",
  Video: "video",
  Document: "document",
});
const isMediaHeader = hk =>
  hk === HK.Image || hk === HK.Video || hk === HK.Document;
const mediaLabel = hk =>
  hk === HK.Image
    ? "Image URL"
    : hk === HK.Video
    ? "Video URL"
    : "Document URL";

function CampaignBuilderPage() {
  const { businessId: ctxBusinessId } = useAuth();

  const [templates, setTemplates] = useState([]);
  const [loadingTemplates, setLoadingTemplates] = useState(false);
  const [syncing, setSyncing] = useState(false);

  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [templateParams, setTemplateParams] = useState([]);
  const [buttonParams, setButtonParams] = useState([]);

  // Unified header media url (for Image/Video/Document)
  const [headerMediaUrl, setHeaderMediaUrl] = useState("");

  const [campaignName, setCampaignName] = useState("");

  const [scheduledAt, setScheduledAt] = useState("");
  const [submitting, setSubmitting] = useState(false);

  // Optional Flow
  const [useFlow, setUseFlow] = useState(false);
  const [flows, setFlows] = useState([]);
  const [loadingFlows, setLoadingFlows] = useState(false);
  const [selectedFlowId, setSelectedFlowId] = useState("");

  // Sender selection (from WhatsAppPhoneNumbers)
  const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
  const [selectedSenderId, setSelectedSenderId] = useState("");

  // CSV controls all dynamic personalization (default ON)
  const [useCsvPersonalization, setUseCsvPersonalization] = useState(true);

  const businessId = useMemo(
    () => ctxBusinessId || localStorage.getItem("businessId") || null,
    [ctxBusinessId]
  );
  const hasValidBusiness = isGuid(businessId);

  const createdBy = localStorage.getItem("userId");
  const businessName = localStorage.getItem("businessName") || "Your Business";
  const navigate = useNavigate();

  // Load approved templates when businessId is ready
  useEffect(() => {
    const load = async () => {
      if (!hasValidBusiness) return;
      setLoadingTemplates(true);
      try {
        const res = await axiosClient.get(
          `/templates/${businessId}?status=APPROVED`
        );
        if (res.data?.success) setTemplates(res.data.templates || []);
        else toast.error("❌ Failed to load templates.");
      } catch {
        toast.error("❌ Error loading templates.");
      } finally {
        setLoadingTemplates(false);
      }
    };
    load();
  }, [businessId, hasValidBusiness]);

  // Load flows when "Attach Flow" is toggled
  useEffect(() => {
    if (!useFlow || !hasValidBusiness) return;

    const loadFlows = async () => {
      setLoadingFlows(true);
      try {
        const r = await axiosClient.get(
          `/campaign/list/${businessId}?onlyPublished=true`
        );

        const items = Array.isArray(r.data?.items) ? r.data.items : [];
        const mapped = items
          .map(f => ({
            id: f.id ?? f.Id,
            name: f.flowName ?? f.FlowName,
            isPublished: f.isPublished ?? f.IsPublished ?? true,
          }))
          .filter(x => x.id && x.name);

        setFlows(mapped);
        if (!mapped.length) {
          toast.info(
            "ℹ️ No published flows found. You can still create a campaign without a flow."
          );
        }
      } catch {
        toast.error("❌ Error loading flows.");
        setFlows([]);
      } finally {
        setLoadingFlows(false);
      }
    };

    loadFlows();
  }, [useFlow, hasValidBusiness, businessId]);

  // Load available senders (WhatsAppPhoneNumbers) for this business
  useEffect(() => {
    if (!hasValidBusiness) return;
    (async () => {
      try {
        const r = await axiosClient.get(
          `/WhatsAppSettings/senders/${businessId}`
        );

        const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
        const normalized = raw.map(x => {
          const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
          const phoneNumberId = x.phoneNumberId;
          const whatsAppNumber =
            x.whatsAppBusinessNumber ??
            x.whatsappBusinessNumber ??
            x.displayNumber ??
            x.phoneNumber ??
            x.phoneNumberId;

          const id = x.id ?? `${provider}|${phoneNumberId}`;
          return { id, provider, phoneNumberId, whatsAppNumber };
        });

        setSenders(normalized);
        // If exactly one sender, preselect it
        if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
      } catch {
        toast.error("❌ Failed to load WhatsApp senders.");
        setSenders([]);
        setSelectedSenderId("");
      }
    })();
  }, [hasValidBusiness, businessId]);

  // Sync Templates
  const handleSyncTemplates = async () => {
    if (!hasValidBusiness) {
      toast.warn("⚠️ Business context missing. Please re-login.");
      return;
    }
    setSyncing(true);
    try {
      const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
      const ok =
        res?.data?.success === true ||
        res?.status === 200 ||
        res?.status === 204;
      if (ok) {
        toast.success("✅ Templates synced. Refreshing list…");
        setLoadingTemplates(true);
        try {
          const r2 = await axiosClient.get(
            `/templates/${businessId}?status=APPROVED`
          );
          if (r2.data?.success) setTemplates(r2.data.templates || []);
        } finally {
          setLoadingTemplates(false);
        }
      } else {
        toast.error("❌ Sync failed.");
      }
    } catch {
      toast.error("❌ Error syncing templates.");
    } finally {
      setSyncing(false);
    }
  };

  const normalizeHeaderKind = t => {
    // Prefer new backend fields; fallback to image-only legacy flag
    const raw = (t.headerKind || "").toString().toLowerCase();
    if (
      raw === HK.Image ||
      raw === HK.Video ||
      raw === HK.Document ||
      raw === HK.Text ||
      raw === HK.None
    ) {
      return raw;
    }
    // Legacy: only image known
    return t.hasImageHeader ? HK.Image : HK.None;
  };

  const handleTemplateSelect = async name => {
    if (!name) {
      setSelectedTemplate(null);
      setTemplateParams([]);
      setButtonParams([]);
      setHeaderMediaUrl("");
      return;
    }
    try {
      if (!hasValidBusiness) {
        toast.error("Invalid or missing Business ID. Please re-login.");
        return;
      }
      const res = await axiosClient.get(
        `/templates/${businessId}/${encodeURIComponent(name)}`
      );
      const t = res.data;
      if (!t?.name) {
        toast.error("❌ Could not load template details.");
        return;
      }

      let parsedButtons = [];
      try {
        parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
      } catch {
        parsedButtons = [];
      }

      const hk = normalizeHeaderKind(t);
      const requiresHeaderMediaUrl =
        t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

      const normalized = {
        name: t.name,
        language: t.language, // <-- we will send this at creation
        body: t.body || "",
        headerKind: hk, // "image" | "video" | "document" | "text" | "none"
        requiresHeaderMediaUrl,
        // Legacy fields kept (not used for logic anymore)
        hasImageHeader: !!t.hasImageHeader,
        parametersCount: t.placeholderCount || 0, // total placeholders in body (server-derived)
        buttonParams: parsedButtons,
      };

      setSelectedTemplate(normalized);
      setTemplateParams(Array(normalized.parametersCount).fill(""));

      // Build client-side slots only to render the preview (actual dynamic values come from CSV later)
      const dynSlots =
        normalized.buttonParams?.map(btn => {
          const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
          const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
          const isDynamic =
            ["url", "copy_code", "flow"].includes(subtype) ||
            originalUrl.includes("{{1}}");
          return isDynamic ? "" : null;
        }) || [];
      setButtonParams(dynSlots);
      setHeaderMediaUrl("");
    } catch {
      toast.error("❌ Error loading template details.");
    }
  };

  // Create Campaign
  const handleCreateCampaign = async () => {
    if (!hasValidBusiness) {
      toast.error("Invalid or missing Business ID. Please re-login.");
      return;
    }
    if (!campaignName || !selectedTemplate) {
      toast.warn("⚠️ Please fill campaign name and choose a template.");
      return;
    }
    // Only require body params when NOT using CSV
    if (!useCsvPersonalization && templateParams.some(p => p === "")) {
      toast.warn("⚠️ Please fill all template parameters or enable CSV.");
      return;
    }
    if (useFlow && !selectedFlowId) {
      toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
      return;
    }

    // Resolve selected sender (required)
    const selectedSender = senders.find(s => s.id === selectedSenderId);
    if (!selectedSender || !selectedSender.phoneNumberId) {
      toast.warn("⚠️ Please choose a Sender (number).");
      return;
    }

    // Header media rules (campaign-level)
    const hk = selectedTemplate?.headerKind || HK.None;
    if (isMediaHeader(hk) && !headerMediaUrl) {
      toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
      return;
    }

    setSubmitting(true);

    // Keep static button values; leave dynamic button values empty (CSV will provide later)
    const buttonPayload =
      selectedTemplate.buttonParams?.map((btn, idx) => {
        const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
        const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
        const isDynamic =
          ["url", "copy_code", "flow"].includes(subtype) ||
          originalUrl.includes("{{1}}");

        return {
          text: btn?.Text || btn?.text || "Button",
          type: btn?.Type || btn?.type || "",
          value: isDynamic
            ? useCsvPersonalization
              ? ""
              : buttonParams[idx] || ""
            : originalUrl,
          position: idx + 1,
        };
      }) || [];

    // For now (until backend supports video/document),
    // keep campaignType = "image" only if image header, else "text"
    const campaignType = hk === HK.Image ? "image" : "text";

    const payload = {
      name: campaignName,
      messageTemplate: selectedTemplate.name, // template name
      templateId: selectedTemplate.name, // legacy/alias
      templateLanguage: selectedTemplate.language, // ✅ critical for provider payloads
      buttonParams: buttonPayload,

      campaignType,
      // Back-compat: old backend expects imageUrl when campaignType === "image"
      imageUrl: hk === HK.Image ? headerMediaUrl : null,

      // Future-friendly: always send headerMediaUrl + headerKind
      headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
      headerKind: hk, // "image" | "video" | "document" | "text" | "none"

      scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
      createdBy,
      businessId,

      // ✅ If CSV is used, do not send per-recipient params here
      templateParameters: useCsvPersonalization ? [] : templateParams,
      useCsvPersonalization, // ✅ tell backend who owns personalization

      // Flow (optional)
      ctaFlowConfigId: useFlow ? selectedFlowId : null,

      // Sender
      provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
      phoneNumberId: selectedSender.phoneNumberId,
    };

    try {
      const res = await axiosClient.post(
        "/campaign/create-text-campaign",
        payload
      );
      if (res.data?.success && res.data?.campaignId) {
        toast.success("✅ Campaign created successfully.");
        navigate(
          `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
        );
      } else {
        toast.error("❌ Failed to create campaign.");
      }
    } catch (err) {
      const errorMsg =
        err?.response?.data?.message || "❌ Error creating campaign.";
      toast.error(errorMsg);
    } finally {
      setSubmitting(false);
    }
  };

  const templateOptions = useMemo(
    () =>
      templates.map(tpl => ({
        key: `${tpl.name}-${tpl.language}`,
        label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
        value: tpl.name,
      })),
    [templates]
  );

  return (
    <div className="mx-auto max-w-5xl px-4 py-6">
      {/* Header */}
      <div className="mb-4 flex items-end justify-between">
        <div>
          <h1 className="text-xl font-bold text-gray-900">
            Create WhatsApp Campaign
          </h1>
          <p className="mt-0.5 text-xs text-gray-500">
            Pick a template, preview, then schedule.
          </p>
        </div>

        {/* Sync Templates */}
        <div className="flex items-center gap-2">
          <button
            type="button"
            onClick={handleSyncTemplates}
            disabled={!hasValidBusiness || syncing}
            className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
              !hasValidBusiness || syncing
                ? "bg-gray-400"
                : "bg-indigo-600 hover:bg-indigo-700"
            }`}
            title={
              !hasValidBusiness ? "Login required to sync templates" : undefined
            }
          >
            {syncing ? "Syncing…" : "Sync Templates"}
          </button>
        </div>
      </div>

      {/* Business guard */}
      {!hasValidBusiness && (
        <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
          <div className="flex items-start gap-3">
            <span className="mt-0.5">⚠️</span>
            <div>
              <p className="font-medium">
                We’re loading your business context…
              </p>
              <p className="mt-1 text-amber-800/90">
                If this doesn’t resolve in a moment, please re-login so we can
                attach your Business ID to requests.
              </p>
              <div className="mt-3">
                <button
                  onClick={() => navigate("/login")}
                  className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
                  type="button"
                >
                  Go to Login
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Content grid */}
      <div className="grid gap-4 md:grid-cols-[1fr_320px]">
        {/* Left column – form */}
        <div className="space-y-4">
          {/* Campaign meta */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <div className="space-y-3 text-sm">
              <div>
                <label className="mb-1 block font-medium text-gray-700">
                  Campaign name
                </label>
                <input
                  type="text"
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                  placeholder="e.g. Diwali Blast – Returning Customers"
                  value={campaignName}
                  onChange={e => setCampaignName(e.target.value)}
                  disabled={!hasValidBusiness}
                />
              </div>

              <div>
                <label className="mb-1 block font-medium text-gray-700">
                  Template <span className="text-gray-400">(approved)</span>
                </label>
                <select
                  disabled={loadingTemplates || !hasValidBusiness}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
                  onChange={e => handleTemplateSelect(e.target.value)}
                  value={selectedTemplate?.name || ""}
                >
                  <option value="" disabled>
                    {loadingTemplates
                      ? "Loading templates…"
                      : "-- Select Template --"}
                  </option>
                  {templateOptions.map(o => (
                    <option key={o.key} value={o.value}>
                      {o.label}
                    </option>
                  ))}
                </select>
                <p className="mt-1 text-[11px] text-gray-400">
                  Only templates with status{" "}
                  <span className="font-medium">APPROVED</span> are listed.
                </p>
              </div>
            </div>
          </section>

          {/* Flow (optional) */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-sm font-semibold text-gray-800">
              Flow (optional)
            </h2>
            <div className="flex items-center gap-3 text-sm">
              <input
                id="useFlow"
                type="checkbox"
                checked={useFlow}
                onChange={e => {
                  setUseFlow(e.target.checked);
                  if (!e.target.checked) setSelectedFlowId("");
                }}
                disabled={!hasValidBusiness}
              />
              <label htmlFor="useFlow" className="text-gray-700">
                Attach a Visual Flow to this campaign
              </label>
            </div>

            {useFlow && (
              <div className="mt-3">
                <label className="mb-1 block text-sm font-medium text-gray-700">
                  Select Flow
                </label>
                <select
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
                  disabled={loadingFlows || !hasValidBusiness}
                  value={selectedFlowId}
                  onChange={e => setSelectedFlowId(e.target.value)}
                >
                  <option value="">
                    {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
                  </option>
                  {flows.map(f => (
                    <option key={f.id} value={f.id}>
                      {f.name}
                    </option>
                  ))}
                </select>
                <p className="mt-1 text-[11px] text-gray-400">
                  If attached, the campaign will <strong>start</strong> from the
                  flow’s entry step. The backend will align the starting
                  template automatically.
                </p>
              </div>
            )}
          </section>

          {/* Personalization */}
          {selectedTemplate && (
            <section className="rounded-xl border bg-white p-4 shadow-sm">
              <h2 className="mb-1 text-sm font-semibold text-gray-800">
                Personalization
              </h2>

              {/* CSV toggle */}
              <div className="mb-3 flex items-center gap-2 text-xs text-gray-600">
                <input
                  id="useCsv"
                  type="checkbox"
                  checked={useCsvPersonalization}
                  onChange={e => setUseCsvPersonalization(e.target.checked)}
                />
                <label htmlFor="useCsv">
                  I’ll upload a CSV later for personalization (recommended for
                  bulk)
                </label>
              </div>

              {/* Body params — show only if NOT using CSV */}
              {!useCsvPersonalization && templateParams.length > 0 && (
                <div className="mb-4 space-y-2 text-sm">
                  <h3 className="text-xs font-semibold text-gray-700">
                    Template parameters
                  </h3>
                  {templateParams.map((val, idx) => (
                    <div key={`tp-${idx}`} className="flex items-center gap-2">
                      <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
                        idx + 1
                      }}}`}</div>
                      <input
                        className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                        placeholder={`Value for {{${idx + 1}}}`}
                        value={val}
                        onChange={e => {
                          const next = [...templateParams];
                          next[idx] = e.target.value;
                          setTemplateParams(next);
                        }}
                        disabled={!hasValidBusiness}
                      />
                    </div>
                  ))}
                </div>
              )}

              {/* Button params — show only if NOT using CSV */}
              {!useCsvPersonalization &&
                selectedTemplate?.buttonParams?.length > 0 && (
                  <div className="space-y-2 text-sm">
                    <h3 className="text-xs font-semibold text-gray-700">
                      Button parameters
                    </h3>
                    {selectedTemplate.buttonParams.map((btn, idx) => {
                      const originalUrl =
                        btn?.ParameterValue || btn?.parameterValue || "";
                      const subtype = (
                        btn?.SubType ||
                        btn?.subType ||
                        ""
                      ).toLowerCase();
                      const dynamic =
                        ["url", "copy_code", "flow"].includes(subtype) ||
                        originalUrl.includes("{{1}}");
                      const placeholders = {
                        url: "Enter Redirect URL",
                        copy_code: "Enter Coupon Code",
                        flow: "Enter Flow ID",
                      };
                      return (
                        <div key={`bp-${idx}`}>
                          <label className="mb-1 block text-[11px] font-medium text-gray-500">
                            {btn?.Text || btn?.text || "Button"} ·{" "}
                            {subtype ? subtype.toUpperCase() : "STATIC"}
                          </label>
                          {dynamic ? (
                            <input
                              className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                              placeholder={
                                placeholders[subtype] || "Enter value"
                              }
                              value={buttonParams[idx] || ""}
                              onChange={e => {
                                const next = [...buttonParams];
                                next[idx] = e.target.value;
                                setButtonParams(next);
                              }}
                              disabled={!hasValidBusiness}
                            />
                          ) : (
                            <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
                              Static value: {originalUrl || "N/A"}
                            </p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
            </section>
          )}

          {/* Media + sender + schedule */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-sm font-semibold text-gray-800">
              Delivery
            </h2>

            {/* Sender selection (Provider auto-derived) */}
            <div className="mb-3 text-sm">
              <label className="mb-1 block font-medium text-gray-700">
                Sender (WhatsApp Number • Provider)
              </label>
              <select
                className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
                disabled={!hasValidBusiness || !senders.length}
                value={selectedSenderId}
                onChange={e => setSelectedSenderId(e.target.value)}
              >
                <option value="" disabled>
                  {senders.length
                    ? "-- Select Sender --"
                    : "No active senders found"}
                </option>
                {senders.map(s => (
                  <option key={s.id} value={s.id}>
                    {s.whatsAppNumber} • {s.provider}
                  </option>
                ))}
              </select>
              <p className="mt-1 text-[11px] text-gray-400">
                Only the number is shown for selection. We’ll save the sender’s
                phoneNumberId and provider.
              </p>
            </div>

            {selectedTemplate?.requiresHeaderMediaUrl && (
              <div className="mb-3 text-sm">
                <label className="mb-1 block font-medium text-gray-700">
                  {mediaLabel(selectedTemplate.headerKind)}
                </label>
                <input
                  type="text"
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                  placeholder="https://…"
                  value={headerMediaUrl}
                  onChange={e => setHeaderMediaUrl(e.target.value)}
                  disabled={!hasValidBusiness}
                />
                <p className="mt-1 text-[11px] text-gray-400">
                  This is set once per campaign (not in CSV). Must be a public
                  HTTPS link.
                </p>
              </div>
            )}

            <div className="text-sm">
              <label className="mb-1 block font-medium text-gray-700">
                Schedule
              </label>
              <input
                type="datetime-local"
                className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                value={scheduledAt}
                onChange={e => setScheduledAt(e.target.value)}
                disabled={!hasValidBusiness}
              />
              <p className="mt-1 text-[11px] text-gray-400">
                Leave empty to send immediately after assignment.
              </p>
            </div>
          </section>

          {/* Submit */}
          <div className="sticky bottom-3 z-10">
            <button
              onClick={handleCreateCampaign}
              disabled={submitting || !hasValidBusiness}
              className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
                submitting || !hasValidBusiness
                  ? "bg-gray-400"
                  : "bg-green-600 hover:bg-green-700"
              }`}
              title={
                !hasValidBusiness
                  ? "Login required to create a campaign"
                  : undefined
              }
            >
              {submitting ? "Creating…" : "Create Campaign"}
            </button>
          </div>
        </div>

        {/* Right column – sticky preview */}
        <aside className="md:sticky md:top-4">
          <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
            <div className="mb-2 flex items-center justify-between">
              <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
              <span className="text-[11px] text-gray-400">Customer view</span>
            </div>

            {hasValidBusiness ? (
              selectedTemplate ? (
                <div className="flex justify-center">
                  <PhoneWhatsAppPreview
                    businessName={businessName}
                    templateBody={selectedTemplate.body}
                    parameters={useCsvPersonalization ? [] : templateParams}
                    // For now, only image preview is supported; others will come later.
                    imageUrl={
                      selectedTemplate.headerKind === HK.Image
                        ? headerMediaUrl
                        : ""
                    }
                    buttonParams={(selectedTemplate.buttonParams || []).map(
                      (btn, idx) => {
                        const originalUrl =
                          btn?.ParameterValue || btn?.parameterValue || "";
                        const subtype = (
                          btn?.SubType ||
                          btn?.subType ||
                          ""
                        ).toLowerCase();
                        const dynamic =
                          ["url", "copy_code", "flow"].includes(subtype) ||
                          originalUrl.includes("{{1}}");
                        return {
                          text: btn?.Text || btn?.text || "Button",
                          subType: btn?.SubType || btn?.subType || "",
                          type: btn?.Type || btn?.type || "",
                          value: dynamic
                            ? "" // CSV will provide dynamic at send-time
                            : originalUrl,
                        };
                      }
                    )}
                    width="clamp(330px, 42vw, 410px)"
                  />
                </div>
              ) : (
                <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
                  Select a template to preview it here
                </div>
              )
            ) : (
              <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
                Waiting for Business ID…
              </div>
            )}
          </div>
        </aside>
      </div>
    </div>
  );
}

export default CampaignBuilderPage;

// // 📄 src/pages/campaigns/CampaignBuilderPage.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
// import { useNavigate } from "react-router-dom";
// import { useAuth } from "../auth/context/pld_AuthContext"; // adjust if your path differs

// // === Adjust this if your API route differs ===
// const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

// const isGuid = v =>
//   !!v &&
//   /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
//     v
//   );

// // Header kind helpers (frontend-only)
// const HK = Object.freeze({
//   None: "none",
//   Text: "text",
//   Image: "image",
//   Video: "video",
//   Document: "document",
// });
// const isMediaHeader = hk =>
//   hk === HK.Image || hk === HK.Video || hk === HK.Document;
// const mediaLabel = hk =>
//   hk === HK.Image
//     ? "Image URL"
//     : hk === HK.Video
//     ? "Video URL"
//     : "Document URL";

// function CampaignBuilderPage() {
//   const { businessId: ctxBusinessId } = useAuth();

//   const [templates, setTemplates] = useState([]);
//   const [loadingTemplates, setLoadingTemplates] = useState(false);
//   const [syncing, setSyncing] = useState(false);

//   const [selectedTemplate, setSelectedTemplate] = useState(null);
//   const [templateParams, setTemplateParams] = useState([]);
//   const [buttonParams, setButtonParams] = useState([]);

//   // 🆕 unified header media url (for Image/Video/Document)
//   const [headerMediaUrl, setHeaderMediaUrl] = useState("");

//   const [campaignName, setCampaignName] = useState("");

//   const [scheduledAt, setScheduledAt] = useState("");
//   const [submitting, setSubmitting] = useState(false);

//   // 🆕 Flow association state
//   const [useFlow, setUseFlow] = useState(false);
//   const [flows, setFlows] = useState([]);
//   const [loadingFlows, setLoadingFlows] = useState(false);
//   const [selectedFlowId, setSelectedFlowId] = useState("");

//   // 🆕 Sender selection (from WhatsAppPhoneNumbers)
//   const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
//   const [selectedSenderId, setSelectedSenderId] = useState("");

//   // 🆕 Use CSV for all dynamic personalization (default ON)
//   const [useCsvPersonalization, setUseCsvPersonalization] = useState(true);

//   const businessId = useMemo(
//     () => ctxBusinessId || localStorage.getItem("businessId") || null,
//     [ctxBusinessId]
//   );
//   const hasValidBusiness = isGuid(businessId);

//   const createdBy = localStorage.getItem("userId");
//   const businessName = localStorage.getItem("businessName") || "Your Business";
//   const navigate = useNavigate();

//   // Load approved templates when businessId is ready
//   useEffect(() => {
//     const load = async () => {
//       if (!hasValidBusiness) return;
//       setLoadingTemplates(true);
//       try {
//         const res = await axiosClient.get(
//           `/templates/${businessId}?status=APPROVED`
//         );
//         if (res.data?.success) setTemplates(res.data.templates || []);
//         else toast.error("❌ Failed to load templates.");
//       } catch {
//         toast.error("❌ Error loading templates.");
//       } finally {
//         setLoadingTemplates(false);
//       }
//     };
//     load();
//   }, [businessId, hasValidBusiness]);

//   // 🔁 Load flows when "Attach Flow" is toggled
//   useEffect(() => {
//     if (!useFlow || !hasValidBusiness) return;

//     const loadFlows = async () => {
//       setLoadingFlows(true);
//       try {
//         const r = await axiosClient.get(
//           `/campaign/list/${businessId}?onlyPublished=true`
//         );

//         const items = Array.isArray(r.data?.items) ? r.data.items : [];
//         const mapped = items
//           .map(f => ({
//             id: f.id ?? f.Id,
//             name: f.flowName ?? f.FlowName,
//             isPublished: f.isPublished ?? f.IsPublished ?? true,
//           }))
//           .filter(x => x.id && x.name);

//         setFlows(mapped);
//         if (!mapped.length) {
//           toast.info(
//             "ℹ️ No published flows found. You can still create a campaign without a flow."
//           );
//         }
//       } catch {
//         toast.error("❌ Error loading flows.");
//         setFlows([]);
//       } finally {
//         setLoadingFlows(false);
//       }
//     };

//     loadFlows();
//   }, [useFlow, hasValidBusiness, businessId]);

//   // 🆕 Load available senders (WhatsAppPhoneNumbers) for this business
//   useEffect(() => {
//     if (!hasValidBusiness) return;
//     (async () => {
//       try {
//         const r = await axiosClient.get(
//           `/WhatsAppSettings/senders/${businessId}`
//         );

//         const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
//         const normalized = raw.map(x => {
//           const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
//           const phoneNumberId = x.phoneNumberId;
//           const whatsAppNumber =
//             x.whatsAppBusinessNumber ??
//             x.whatsappBusinessNumber ??
//             x.displayNumber ??
//             x.phoneNumber ??
//             x.phoneNumberId;

//           const id = x.id ?? `${provider}|${phoneNumberId}`;
//           return { id, provider, phoneNumberId, whatsAppNumber };
//         });

//         setSenders(normalized);
//         if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
//       } catch {
//         toast.error("❌ Failed to load WhatsApp senders.");
//         setSenders([]);
//         setSelectedSenderId("");
//       }
//     })();
//   }, [hasValidBusiness, businessId]);

//   // 🔄 Sync Templates
//   const handleSyncTemplates = async () => {
//     if (!hasValidBusiness) {
//       toast.warn("⚠️ Business context missing. Please re-login.");
//       return;
//     }
//     setSyncing(true);
//     try {
//       const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
//       const ok =
//         res?.data?.success === true ||
//         res?.status === 200 ||
//         res?.status === 204;
//       if (ok) {
//         toast.success("✅ Templates synced. Refreshing list…");
//         setLoadingTemplates(true);
//         try {
//           const r2 = await axiosClient.get(
//             `/templates/${businessId}?status=APPROVED`
//           );
//           if (r2.data?.success) setTemplates(r2.data.templates || []);
//         } finally {
//           setLoadingTemplates(false);
//         }
//       } else {
//         toast.error("❌ Sync failed.");
//       }
//     } catch (e) {
//       toast.error("❌ Error syncing templates.");
//     } finally {
//       setSyncing(false);
//     }
//   };

//   const normalizeHeaderKind = t => {
//     // Prefer new backend fields; fallback to image-only legacy flag
//     const raw = (t.headerKind || "").toString().toLowerCase();
//     if (
//       raw === HK.Image ||
//       raw === HK.Video ||
//       raw === HK.Document ||
//       raw === HK.Text ||
//       raw === HK.None
//     ) {
//       return raw;
//     }
//     // Legacy: only image known
//     return t.hasImageHeader ? HK.Image : HK.None;
//   };

//   const handleTemplateSelect = async name => {
//     if (!name) {
//       setSelectedTemplate(null);
//       setTemplateParams([]);
//       setButtonParams([]);
//       setHeaderMediaUrl("");
//       return;
//     }
//     try {
//       if (!hasValidBusiness) {
//         toast.error("Invalid or missing Business ID. Please re-login.");
//         return;
//       }
//       const res = await axiosClient.get(
//         `/templates/${businessId}/${encodeURIComponent(name)}`
//       );
//       const t = res.data;
//       if (!t?.name) {
//         toast.error("❌ Could not load template details.");
//         return;
//       }

//       let parsedButtons = [];
//       try {
//         parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
//       } catch {
//         parsedButtons = [];
//       }

//       const hk = normalizeHeaderKind(t);
//       const requiresHeaderMediaUrl =
//         t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

//       const normalized = {
//         name: t.name,
//         language: t.language,
//         body: t.body || "",
//         headerKind: hk, // "image" | "video" | "document" | "text" | "none"
//         requiresHeaderMediaUrl,
//         // Legacy fields kept (not used for logic anymore)
//         hasImageHeader: !!t.hasImageHeader,
//         parametersCount: t.placeholderCount || 0, // legacy: total placeholder count; we’ll refine later
//         buttonParams: parsedButtons,
//       };

//       setSelectedTemplate(normalized);
//       setTemplateParams(Array(normalized.parametersCount).fill(""));

//       const dynSlots =
//         normalized.buttonParams?.map(btn => {
//           const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//           const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//           const isDynamic =
//             ["url", "copy_code", "flow"].includes(subtype) ||
//             originalUrl.includes("{{1}}");
//           return isDynamic ? "" : null;
//         }) || [];
//       setButtonParams(dynSlots);
//       setHeaderMediaUrl("");
//     } catch {
//       toast.error("❌ Error loading template details.");
//     }
//   };

//   // 📄 Create Campaign
//   const handleCreateCampaign = async () => {
//     if (!hasValidBusiness) {
//       toast.error("Invalid or missing Business ID. Please re-login.");
//       return;
//     }
//     if (!campaignName || !selectedTemplate) {
//       toast.warn("⚠️ Please fill campaign name and choose a template.");
//       return;
//     }
//     // Require body params ONLY when not using CSV
//     if (!useCsvPersonalization && templateParams.some(p => p === "")) {
//       toast.warn("⚠️ Please fill all template parameters.");
//       return;
//     }
//     if (useFlow && !selectedFlowId) {
//       toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
//       return;
//     }

//     // 🧲 Resolve selected sender (required)
//     const selectedSender = senders.find(s => s.id === selectedSenderId);
//     if (!selectedSender || !selectedSender.phoneNumberId) {
//       toast.warn("⚠️ Please choose a Sender (number).");
//       return;
//     }

//     // Header media rules (campaign-level)
//     const hk = selectedTemplate?.headerKind || HK.None;
//     if (isMediaHeader(hk) && !headerMediaUrl) {
//       toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
//       return;
//     }

//     setSubmitting(true);

//     // Keep static button values; leave dynamic button values empty (CSV will provide)
//     const buttonPayload =
//       selectedTemplate.buttonParams?.map((btn, idx) => {
//         const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//         const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//         const isDynamic =
//           ["url", "copy_code", "flow"].includes(subtype) ||
//           originalUrl.includes("{{1}}");

//         return {
//           text: btn?.Text || btn?.text || "Button",
//           type: btn?.Type || btn?.type || "",
//           value: isDynamic ? "" : originalUrl,
//           position: idx + 1,
//         };
//       }) || [];

//     // For now (until backend supports video/document),
//     // keep campaignType = "image" only if image header, else "text"
//     const campaignType = hk === HK.Image ? "image" : "text";

//     const payload = {
//       name: campaignName,
//       messageTemplate: selectedTemplate.name,
//       templateId: selectedTemplate.name,
//       buttonParams: buttonPayload,

//       campaignType,
//       // Back-compat: old backend expects imageUrl when campaignType === "image"
//       imageUrl: hk === HK.Image ? headerMediaUrl : null,

//       // Future-friendly: always send headerMediaUrl + headerKind
//       headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
//       headerKind: hk, // "image" | "video" | "document" | "text" | "none"

//       scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
//       createdBy,
//       businessId,

//       // ✅ If CSV is used, do not send per-recipient params here
//       templateParameters: useCsvPersonalization ? [] : templateParams,

//       // Flow (optional)
//       ctaFlowConfigId: useFlow ? selectedFlowId : null,

//       // Sender
//       provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
//       phoneNumberId: selectedSender.phoneNumberId,
//     };

//     try {
//       const res = await axiosClient.post(
//         "/campaign/create-text-campaign",
//         payload
//       );
//       if (res.data?.success && res.data?.campaignId) {
//         toast.success("✅ Campaign created successfully.");
//         navigate(
//           `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
//         );
//       } else {
//         toast.error("❌ Failed to create campaign.");
//       }
//     } catch (err) {
//       const errorMsg =
//         err.response?.data?.message || "❌ Error creating campaign.";
//       toast.error(errorMsg);
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   const templateOptions = useMemo(
//     () =>
//       templates.map(tpl => ({
//         key: `${tpl.name}-${tpl.language}`,
//         label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
//         value: tpl.name,
//       })),
//     [templates]
//   );

//   return (
//     <div className="mx-auto max-w-5xl px-4 py-6">
//       {/* Header */}
//       <div className="mb-4 flex items-end justify-between">
//         <div>
//           <h1 className="text-xl font-bold text-gray-900">
//             Create WhatsApp Campaign
//           </h1>
//           <p className="mt-0.5 text-xs text-gray-500">
//             Pick a template, preview, then schedule.
//           </p>
//         </div>

//         {/* 🔄 Sync Templates action */}
//         <div className="flex items-center gap-2">
//           <button
//             type="button"
//             onClick={handleSyncTemplates}
//             disabled={!hasValidBusiness || syncing}
//             className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
//               !hasValidBusiness || syncing
//                 ? "bg-gray-400"
//                 : "bg-indigo-600 hover:bg-indigo-700"
//             }`}
//             title={
//               !hasValidBusiness ? "Login required to sync templates" : undefined
//             }
//           >
//             {syncing ? "Syncing…" : "Sync Templates"}
//           </button>
//         </div>
//       </div>

//       {/* Friendly fallback if businessId not available */}
//       {!hasValidBusiness && (
//         <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
//           <div className="flex items-start gap-3">
//             <span className="mt-0.5">⚠️</span>
//             <div>
//               <p className="font-medium">
//                 We’re loading your business context…
//               </p>
//               <p className="mt-1 text-amber-800/90">
//                 If this doesn’t resolve in a moment, please re-login so we can
//                 attach your Business ID to requests.
//               </p>
//               <div className="mt-3">
//                 <button
//                   onClick={() => navigate("/login")}
//                   className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
//                   type="button"
//                 >
//                   Go to Login
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Content grid */}
//       <div className="grid gap-4 md:grid-cols-[1fr_320px]">
//         {/* Left column – form */}
//         <div className="space-y-4">
//           {/* Campaign meta */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <div className="space-y-3 text-sm">
//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Campaign name
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="e.g. Diwali Blast – Returning Customers"
//                   value={campaignName}
//                   onChange={e => setCampaignName(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//               </div>

//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Template <span className="text-gray-400">(approved)</span>
//                 </label>
//                 <select
//                   disabled={loadingTemplates || !hasValidBusiness}
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   onChange={e => handleTemplateSelect(e.target.value)}
//                   value={selectedTemplate?.name || ""}
//                 >
//                   <option value="" disabled>
//                     {loadingTemplates
//                       ? "Loading templates…"
//                       : "-- Select Template --"}
//                   </option>
//                   {templateOptions.map(o => (
//                     <option key={o.key} value={o.value}>
//                       {o.label}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   Only templates with status{" "}
//                   <span className="font-medium">APPROVED</span> are listed.
//                 </p>
//               </div>
//             </div>
//           </section>

//           {/* Flow (optional) */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Flow (optional)
//             </h2>
//             <div className="flex items-center gap-3 text-sm">
//               <input
//                 id="useFlow"
//                 type="checkbox"
//                 checked={useFlow}
//                 onChange={e => {
//                   setUseFlow(e.target.checked);
//                   if (!e.target.checked) setSelectedFlowId("");
//                 }}
//                 disabled={!hasValidBusiness}
//               />
//               <label htmlFor="useFlow" className="text-gray-700">
//                 Attach a Visual Flow to this campaign
//               </label>
//             </div>

//             {useFlow && (
//               <div className="mt-3">
//                 <label className="mb-1 block text-sm font-medium text-gray-700">
//                   Select Flow
//                 </label>
//                 <select
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   disabled={loadingFlows || !hasValidBusiness}
//                   value={selectedFlowId}
//                   onChange={e => setSelectedFlowId(e.target.value)}
//                 >
//                   <option value="">
//                     {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
//                   </option>
//                   {flows.map(f => (
//                     <option key={f.id} value={f.id}>
//                       {f.name}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   If attached, the campaign will <strong>start</strong> from the
//                   flow’s entry step. The backend will align the starting
//                   template automatically.
//                 </p>
//               </div>
//             )}
//           </section>

//           {/* Parameters */}
//           {selectedTemplate && (
//             <section className="rounded-xl border bg-white p-4 shadow-sm">
//               <h2 className="mb-1 text-sm font-semibold text-gray-800">
//                 Personalization
//               </h2>

//               {/* CSV toggle */}
//               <div className="mb-3 flex items-center gap-2 text-xs text-gray-600">
//                 <input
//                   id="useCsv"
//                   type="checkbox"
//                   checked={useCsvPersonalization}
//                   onChange={e => setUseCsvPersonalization(e.target.checked)}
//                 />
//                 <label htmlFor="useCsv">
//                   I’ll upload a CSV later for personalization (recommended for
//                   bulk)
//                 </label>
//               </div>

//               {/* Body params — show only if NOT using CSV */}
//               {!useCsvPersonalization && templateParams.length > 0 && (
//                 <div className="mb-4 space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Template parameters
//                   </h3>
//                   {templateParams.map((val, idx) => (
//                     <div key={`tp-${idx}`} className="flex items-center gap-2">
//                       <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
//                         idx + 1
//                       }}}`}</div>
//                       <input
//                         className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                         placeholder={`Value for {{${idx + 1}}}`}
//                         value={val}
//                         onChange={e => {
//                           const next = [...templateParams];
//                           next[idx] = e.target.value;
//                           setTemplateParams(next);
//                         }}
//                         disabled={!hasValidBusiness}
//                       />
//                     </div>
//                   ))}
//                 </div>
//               )}

//               {/* Button params — show only if NOT using CSV */}
//               {!useCsvPersonalization &&
//                 selectedTemplate?.buttonParams?.length > 0 && (
//                   <div className="space-y-2 text-sm">
//                     <h3 className="text-xs font-semibold text-gray-700">
//                       Button parameters
//                     </h3>
//                     {selectedTemplate.buttonParams.map((btn, idx) => {
//                       const originalUrl =
//                         btn?.ParameterValue || btn?.parameterValue || "";
//                       const subtype = (
//                         btn?.SubType ||
//                         btn?.subType ||
//                         ""
//                       ).toLowerCase();
//                       const dynamic =
//                         ["url", "copy_code", "flow"].includes(subtype) ||
//                         originalUrl.includes("{{1}}");
//                       const placeholders = {
//                         url: "Enter Redirect URL",
//                         copy_code: "Enter Coupon Code",
//                         flow: "Enter Flow ID",
//                       };
//                       return (
//                         <div key={`bp-${idx}`}>
//                           <label className="mb-1 block text-[11px] font-medium text-gray-500">
//                             {btn?.Text || btn?.text || "Button"} ·{" "}
//                             {subtype ? subtype.toUpperCase() : "STATIC"}
//                           </label>
//                           {dynamic ? (
//                             <input
//                               className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                               placeholder={
//                                 placeholders[subtype] || "Enter value"
//                               }
//                               value={buttonParams[idx] || ""}
//                               onChange={e => {
//                                 const next = [...buttonParams];
//                                 next[idx] = e.target.value;
//                                 setButtonParams(next);
//                               }}
//                               disabled={!hasValidBusiness}
//                             />
//                           ) : (
//                             <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
//                               Static value:{" "}
//                               {btn?.ParameterValue ||
//                                 btn?.parameterValue ||
//                                 "N/A"}
//                             </p>
//                           )}
//                         </div>
//                       );
//                     })}
//                   </div>
//                 )}
//             </section>
//           )}

//           {/* Media + sender + schedule */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Delivery
//             </h2>

//             {/* 🆕 Sender selection (Provider auto-derived) */}
//             <div className="mb-3 text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Sender (WhatsApp Number • Provider)
//               </label>
//               <select
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                 disabled={!hasValidBusiness || !senders.length}
//                 value={selectedSenderId}
//                 onChange={e => setSelectedSenderId(e.target.value)}
//               >
//                 <option value="" disabled>
//                   {senders.length
//                     ? "-- Select Sender --"
//                     : "No active senders found"}
//                 </option>
//                 {senders.map(s => (
//                   <option key={s.id} value={s.id}>
//                     {s.whatsAppNumber} • {s.provider}
//                   </option>
//                 ))}
//               </select>
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Only the number is shown for selection. We’ll save the sender’s
//                 phoneNumberId and provider.
//               </p>
//             </div>

//             {selectedTemplate?.requiresHeaderMediaUrl && (
//               <div className="mb-3 text-sm">
//                 <label className="mb-1 block font-medium text-gray-700">
//                   {mediaLabel(selectedTemplate.headerKind)}
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="https://…"
//                   value={headerMediaUrl}
//                   onChange={e => setHeaderMediaUrl(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   This is set once per campaign (not in CSV). Must be a public
//                   HTTPS link.
//                 </p>
//               </div>
//             )}

//             <div className="text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Schedule
//               </label>
//               <input
//                 type="datetime-local"
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                 value={scheduledAt}
//                 onChange={e => setScheduledAt(e.target.value)}
//                 disabled={!hasValidBusiness}
//               />
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Leave empty to send immediately after assignment.
//               </p>
//             </div>
//           </section>

//           {/* Submit */}
//           <div className="sticky bottom-3 z-10">
//             <button
//               onClick={handleCreateCampaign}
//               disabled={submitting || !hasValidBusiness}
//               className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
//                 submitting || !hasValidBusiness
//                   ? "bg-gray-400"
//                   : "bg-green-600 hover:bg-green-700"
//               }`}
//               title={
//                 !hasValidBusiness
//                   ? "Login required to create a campaign"
//                   : undefined
//               }
//             >
//               {submitting ? "Creating…" : "Create Campaign"}
//             </button>
//           </div>
//         </div>

//         {/* Right column – sticky preview */}
//         <aside className="md:sticky md:top-4">
//           <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
//             <div className="mb-2 flex items-center justify-between">
//               <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
//               <span className="text-[11px] text-gray-400">Customer view</span>
//             </div>

//             {hasValidBusiness ? (
//               selectedTemplate ? (
//                 <div className="flex justify-center">
//                   <PhoneWhatsAppPreview
//                     businessName={businessName}
//                     templateBody={selectedTemplate.body}
//                     parameters={useCsvPersonalization ? [] : templateParams}
//                     // For now, only image preview is supported; others will come later.
//                     imageUrl={
//                       selectedTemplate.headerKind === HK.Image
//                         ? headerMediaUrl
//                         : ""
//                     }
//                     buttonParams={(selectedTemplate.buttonParams || []).map(
//                       (btn, idx) => {
//                         const originalUrl =
//                           btn?.ParameterValue || btn?.parameterValue || "";
//                         const subtype = (
//                           btn?.SubType ||
//                           btn?.subType ||
//                           ""
//                         ).toLowerCase();
//                         const dynamic =
//                           ["url", "copy_code", "flow"].includes(subtype) ||
//                           originalUrl.includes("{{1}}");
//                         return {
//                           text: btn?.Text || btn?.text || "Button",
//                           subType: btn?.SubType || btn?.subType || "",
//                           type: btn?.Type || btn?.type || "",
//                           value: dynamic
//                             ? "" // CSV will provide dynamic at send-time
//                             : originalUrl,
//                         };
//                       }
//                     )}
//                     width="clamp(330px, 42vw, 410px)"
//                   />
//                 </div>
//               ) : (
//                 <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
//                   Select a template to preview it here
//                 </div>
//               )
//             ) : (
//               <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
//                 Waiting for Business ID…
//               </div>
//             )}
//           </div>
//         </aside>
//       </div>
//     </div>
//   );
// }

// export default CampaignBuilderPage;

// // 📄 src/pages/campaigns/CampaignBuilderPage.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
// import { useNavigate } from "react-router-dom";
// import { useAuth } from "../auth/context/pld_AuthContext"; // adjust if your path differs

// // === Adjust this if your API route differs ===
// const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

// const isGuid = v =>
//   !!v &&
//   /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
//     v
//   );

// // Header kind helpers (frontend-only)
// const HK = Object.freeze({
//   None: "none",
//   Text: "text",
//   Image: "image",
//   Video: "video",
//   Document: "document",
// });
// const isMediaHeader = hk =>
//   hk === HK.Image || hk === HK.Video || hk === HK.Document;
// const mediaLabel = hk =>
//   hk === HK.Image
//     ? "Image URL"
//     : hk === HK.Video
//     ? "Video URL"
//     : "Document URL";

// function CampaignBuilderPage() {
//   const { businessId: ctxBusinessId } = useAuth();

//   const [templates, setTemplates] = useState([]);
//   const [loadingTemplates, setLoadingTemplates] = useState(false);
//   const [syncing, setSyncing] = useState(false);

//   const [selectedTemplate, setSelectedTemplate] = useState(null);
//   const [templateParams, setTemplateParams] = useState([]);
//   const [buttonParams, setButtonParams] = useState([]);

//   // 🆕 unified header media url (for Image/Video/Document)
//   const [headerMediaUrl, setHeaderMediaUrl] = useState("");

//   const [campaignName, setCampaignName] = useState("");

//   const [scheduledAt, setScheduledAt] = useState("");
//   const [submitting, setSubmitting] = useState(false);

//   // 🆕 Flow association state
//   const [useFlow, setUseFlow] = useState(false);
//   const [flows, setFlows] = useState([]);
//   const [loadingFlows, setLoadingFlows] = useState(false);
//   const [selectedFlowId, setSelectedFlowId] = useState("");

//   // 🆕 Sender selection (from WhatsAppPhoneNumbers)
//   const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
//   const [selectedSenderId, setSelectedSenderId] = useState("");

//   const businessId = useMemo(
//     () => ctxBusinessId || localStorage.getItem("businessId") || null,
//     [ctxBusinessId]
//   );
//   const hasValidBusiness = isGuid(businessId);

//   const createdBy = localStorage.getItem("userId");
//   const businessName = localStorage.getItem("businessName") || "Your Business";
//   const navigate = useNavigate();

//   // Load approved templates when businessId is ready
//   useEffect(() => {
//     const load = async () => {
//       if (!hasValidBusiness) return;
//       setLoadingTemplates(true);
//       try {
//         const res = await axiosClient.get(
//           `/templates/${businessId}?status=APPROVED`
//         );
//         if (res.data?.success) setTemplates(res.data.templates || []);
//         else toast.error("❌ Failed to load templates.");
//       } catch {
//         toast.error("❌ Error loading templates.");
//       } finally {
//         setLoadingTemplates(false);
//       }
//     };
//     load();
//   }, [businessId, hasValidBusiness]);

//   // 🔁 Load flows when "Attach Flow" is toggled
//   useEffect(() => {
//     if (!useFlow || !hasValidBusiness) return;

//     const loadFlows = async () => {
//       setLoadingFlows(true);
//       try {
//         const r = await axiosClient.get(
//           `/campaign/list/${businessId}?onlyPublished=true`
//         );

//         const items = Array.isArray(r.data?.items) ? r.data.items : [];
//         const mapped = items
//           .map(f => ({
//             id: f.id ?? f.Id,
//             name: f.flowName ?? f.FlowName,
//             isPublished: f.isPublished ?? f.IsPublished ?? true,
//           }))
//           .filter(x => x.id && x.name);

//         setFlows(mapped);
//         if (!mapped.length) {
//           toast.info(
//             "ℹ️ No published flows found. You can still create a campaign without a flow."
//           );
//         }
//       } catch {
//         toast.error("❌ Error loading flows.");
//         setFlows([]);
//       } finally {
//         setLoadingFlows(false);
//       }
//     };

//     loadFlows();
//   }, [useFlow, hasValidBusiness, businessId]);

//   // 🆕 Load available senders (WhatsAppPhoneNumbers) for this business
//   useEffect(() => {
//     if (!hasValidBusiness) return;
//     (async () => {
//       try {
//         const r = await axiosClient.get(
//           `/WhatsAppSettings/senders/${businessId}`
//         );

//         const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
//         const normalized = raw.map(x => {
//           const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
//           const phoneNumberId = x.phoneNumberId;
//           const whatsAppNumber =
//             x.whatsAppBusinessNumber ??
//             x.whatsappBusinessNumber ??
//             x.displayNumber ??
//             x.phoneNumber ??
//             x.phoneNumberId;

//           const id = x.id ?? `${provider}|${phoneNumberId}`;
//           return { id, provider, phoneNumberId, whatsAppNumber };
//         });

//         setSenders(normalized);
//         if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
//       } catch {
//         toast.error("❌ Failed to load WhatsApp senders.");
//         setSenders([]);
//         setSelectedSenderId("");
//       }
//     })();
//   }, [hasValidBusiness, businessId]);

//   // 🔄 Sync Templates
//   const handleSyncTemplates = async () => {
//     if (!hasValidBusiness) {
//       toast.warn("⚠️ Business context missing. Please re-login.");
//       return;
//     }
//     setSyncing(true);
//     try {
//       const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
//       const ok =
//         res?.data?.success === true ||
//         res?.status === 200 ||
//         res?.status === 204;
//       if (ok) {
//         toast.success("✅ Templates synced. Refreshing list…");
//         setLoadingTemplates(true);
//         try {
//           const r2 = await axiosClient.get(
//             `/templates/${businessId}?status=APPROVED`
//           );
//           if (r2.data?.success) setTemplates(r2.data.templates || []);
//         } finally {
//           setLoadingTemplates(false);
//         }
//       } else {
//         toast.error("❌ Sync failed.");
//       }
//     } catch (e) {
//       toast.error("❌ Error syncing templates.");
//     } finally {
//       setSyncing(false);
//     }
//   };

//   const normalizeHeaderKind = t => {
//     // Prefer new backend fields; fallback to image-only legacy flag
//     const raw = (t.headerKind || "").toString().toLowerCase();
//     if (
//       raw === HK.Image ||
//       raw === HK.Video ||
//       raw === HK.Document ||
//       raw === HK.Text ||
//       raw === HK.None
//     ) {
//       return raw;
//     }
//     // Legacy: only image known
//     return t.hasImageHeader ? HK.Image : HK.None;
//   };

//   const handleTemplateSelect = async name => {
//     if (!name) {
//       setSelectedTemplate(null);
//       setTemplateParams([]);
//       setButtonParams([]);
//       setHeaderMediaUrl("");
//       return;
//     }
//     try {
//       if (!hasValidBusiness) {
//         toast.error("Invalid or missing Business ID. Please re-login.");
//         return;
//       }
//       const res = await axiosClient.get(
//         `/templates/${businessId}/${encodeURIComponent(name)}`
//       );
//       const t = res.data;
//       if (!t?.name) {
//         toast.error("❌ Could not load template details.");
//         return;
//       }

//       let parsedButtons = [];
//       try {
//         parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
//       } catch {
//         parsedButtons = [];
//       }

//       const hk = normalizeHeaderKind(t);
//       const requiresHeaderMediaUrl =
//         t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

//       const normalized = {
//         name: t.name,
//         language: t.language,
//         body: t.body || "",
//         headerKind: hk, // "image" | "video" | "document" | "text" | "none"
//         requiresHeaderMediaUrl,
//         // Legacy fields kept (not used for logic anymore)
//         hasImageHeader: !!t.hasImageHeader,
//         parametersCount: t.placeholderCount || 0, // legacy: total placeholder count; we’ll refine later
//         buttonParams: parsedButtons,
//       };

//       setSelectedTemplate(normalized);
//       setTemplateParams(Array(normalized.parametersCount).fill(""));

//       const dynSlots =
//         normalized.buttonParams?.map(btn => {
//           const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//           const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//           const isDynamic =
//             ["url", "copy_code", "flow"].includes(subtype) ||
//             originalUrl.includes("{{1}}");
//           return isDynamic ? "" : null;
//         }) || [];
//       setButtonParams(dynSlots);
//       setHeaderMediaUrl("");
//     } catch {
//       toast.error("❌ Error loading template details.");
//     }
//   };

//   // 📄 Create Campaign
//   const handleCreateCampaign = async () => {
//     if (!hasValidBusiness) {
//       toast.error("Invalid or missing Business ID. Please re-login.");
//       return;
//     }
//     if (!campaignName || !selectedTemplate) {
//       toast.warn("⚠️ Please fill campaign name and choose a template.");
//       return;
//     }
//     if (templateParams.some(p => p === "")) {
//       toast.warn("⚠️ Please fill all template parameters.");
//       return;
//     }
//     if (useFlow && !selectedFlowId) {
//       toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
//       return;
//     }

//     // 🧲 Resolve selected sender (required)
//     const selectedSender = senders.find(s => s.id === selectedSenderId);
//     if (!selectedSender || !selectedSender.phoneNumberId) {
//       toast.warn("⚠️ Please choose a Sender (number).");
//       return;
//     }

//     // Header media rules (campaign-level)
//     const hk = selectedTemplate?.headerKind || HK.None;
//     if (isMediaHeader(hk) && !headerMediaUrl) {
//       toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
//       return;
//     }

//     setSubmitting(true);

//     const buttonPayload =
//       selectedTemplate.buttonParams?.map((btn, idx) => {
//         const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//         const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//         const isDynamic =
//           ["url", "copy_code", "flow"].includes(subtype) ||
//           originalUrl.includes("{{1}}");

//         return {
//           text: btn?.Text || btn?.text || "Button",
//           type: btn?.Type || btn?.type || "",
//           value: isDynamic ? buttonParams[idx] || "" : originalUrl,
//           position: idx + 1,
//         };
//       }) || [];

//     // For now (until backend supports video/document),
//     // keep campaignType = "image" only if image header, else "text"
//     const campaignType = hk === HK.Image ? "image" : "text";

//     const payload = {
//       name: campaignName,
//       messageTemplate: selectedTemplate.name,
//       templateId: selectedTemplate.name,
//       buttonParams: buttonPayload,

//       campaignType,
//       // Back-compat: old backend expects imageUrl when campaignType === "image"
//       imageUrl: hk === HK.Image ? headerMediaUrl : null,

//       // Future-friendly: always send headerMediaUrl + headerKind
//       headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
//       headerKind: hk, // "image" | "video" | "document" | "text" | "none"

//       scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
//       createdBy,
//       businessId,
//       templateParameters: templateParams,

//       // Flow (optional)
//       ctaFlowConfigId: useFlow ? selectedFlowId : null,

//       // Sender
//       provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
//       phoneNumberId: selectedSender.phoneNumberId,
//     };

//     try {
//       const res = await axiosClient.post(
//         "/campaign/create-text-campaign",
//         payload
//       );
//       if (res.data?.success && res.data?.campaignId) {
//         toast.success("✅ Campaign created successfully.");
//         navigate(
//           `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
//         );
//       } else {
//         toast.error("❌ Failed to create campaign.");
//       }
//     } catch (err) {
//       const errorMsg =
//         err.response?.data?.message || "❌ Error creating campaign.";
//       toast.error(errorMsg);
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   const templateOptions = useMemo(
//     () =>
//       templates.map(tpl => ({
//         key: `${tpl.name}-${tpl.language}`,
//         label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
//         value: tpl.name,
//       })),
//     [templates]
//   );

//   return (
//     <div className="mx-auto max-w-5xl px-4 py-6">
//       {/* Header */}
//       <div className="mb-4 flex items-end justify-between">
//         <div>
//           <h1 className="text-xl font-bold text-gray-900">
//             Create WhatsApp Campaign
//           </h1>
//           <p className="mt-0.5 text-xs text-gray-500">
//             Pick a template, preview, then schedule.
//           </p>
//         </div>

//         {/* 🔄 Sync Templates action */}
//         <div className="flex items-center gap-2">
//           <button
//             type="button"
//             onClick={handleSyncTemplates}
//             disabled={!hasValidBusiness || syncing}
//             className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
//               !hasValidBusiness || syncing
//                 ? "bg-gray-400"
//                 : "bg-indigo-600 hover:bg-indigo-700"
//             }`}
//             title={
//               !hasValidBusiness ? "Login required to sync templates" : undefined
//             }
//           >
//             {syncing ? "Syncing…" : "Sync Templates"}
//           </button>
//         </div>
//       </div>

//       {/* Friendly fallback if businessId not available */}
//       {!hasValidBusiness && (
//         <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
//           <div className="flex items-start gap-3">
//             <span className="mt-0.5">⚠️</span>
//             <div>
//               <p className="font-medium">
//                 We’re loading your business context…
//               </p>
//               <p className="mt-1 text-amber-800/90">
//                 If this doesn’t resolve in a moment, please re-login so we can
//                 attach your Business ID to requests.
//               </p>
//               <div className="mt-3">
//                 <button
//                   onClick={() => navigate("/login")}
//                   className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
//                   type="button"
//                 >
//                   Go to Login
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Content grid */}
//       <div className="grid gap-4 md:grid-cols-[1fr_320px]">
//         {/* Left column – form */}
//         <div className="space-y-4">
//           {/* Campaign meta */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <div className="space-y-3 text-sm">
//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Campaign name
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="e.g. Diwali Blast – Returning Customers"
//                   value={campaignName}
//                   onChange={e => setCampaignName(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//               </div>

//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Template <span className="text-gray-400">(approved)</span>
//                 </label>
//                 <select
//                   disabled={loadingTemplates || !hasValidBusiness}
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   onChange={e => handleTemplateSelect(e.target.value)}
//                   value={selectedTemplate?.name || ""}
//                 >
//                   <option value="" disabled>
//                     {loadingTemplates
//                       ? "Loading templates…"
//                       : "-- Select Template --"}
//                   </option>
//                   {templateOptions.map(o => (
//                     <option key={o.key} value={o.value}>
//                       {o.label}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   Only templates with status{" "}
//                   <span className="font-medium">APPROVED</span> are listed.
//                 </p>
//               </div>
//             </div>
//           </section>

//           {/* Flow (optional) */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Flow (optional)
//             </h2>
//             <div className="flex items-center gap-3 text-sm">
//               <input
//                 id="useFlow"
//                 type="checkbox"
//                 checked={useFlow}
//                 onChange={e => {
//                   setUseFlow(e.target.checked);
//                   if (!e.target.checked) setSelectedFlowId("");
//                 }}
//                 disabled={!hasValidBusiness}
//               />
//               <label htmlFor="useFlow" className="text-gray-700">
//                 Attach a Visual Flow to this campaign
//               </label>
//             </div>

//             {useFlow && (
//               <div className="mt-3">
//                 <label className="mb-1 block text-sm font-medium text-gray-700">
//                   Select Flow
//                 </label>
//                 <select
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   disabled={loadingFlows || !hasValidBusiness}
//                   value={selectedFlowId}
//                   onChange={e => setSelectedFlowId(e.target.value)}
//                 >
//                   <option value="">
//                     {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
//                   </option>
//                   {flows.map(f => (
//                     <option key={f.id} value={f.id}>
//                       {f.name}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   If attached, the campaign will <strong>start</strong> from the
//                   flow’s entry step. The backend will align the starting
//                   template automatically.
//                 </p>
//               </div>
//             )}
//           </section>

//           {/* Parameters */}
//           {selectedTemplate && (
//             <section className="rounded-xl border bg-white p-4 shadow-sm">
//               <h2 className="mb-3 text-sm font-semibold text-gray-800">
//                 Personalization
//               </h2>

//               {templateParams.length > 0 && (
//                 <div className="mb-4 space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Template parameters
//                   </h3>
//                   {templateParams.map((val, idx) => (
//                     <div key={`tp-${idx}`} className="flex items-center gap-2">
//                       <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
//                         idx + 1
//                       }}}`}</div>
//                       <input
//                         className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                         placeholder={`Value for {{${idx + 1}}}`}
//                         value={val}
//                         onChange={e => {
//                           const next = [...templateParams];
//                           next[idx] = e.target.value;
//                           setTemplateParams(next);
//                         }}
//                         disabled={!hasValidBusiness}
//                       />
//                     </div>
//                   ))}
//                 </div>
//               )}

//               {selectedTemplate?.buttonParams?.length > 0 && (
//                 <div className="space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Button parameters
//                   </h3>
//                   {selectedTemplate.buttonParams.map((btn, idx) => {
//                     const originalUrl =
//                       btn?.ParameterValue || btn?.parameterValue || "";
//                     const subtype = (
//                       btn?.SubType ||
//                       btn?.subType ||
//                       ""
//                     ).toLowerCase();
//                     const dynamic =
//                       ["url", "copy_code", "flow"].includes(subtype) ||
//                       originalUrl.includes("{{1}}");
//                     const placeholders = {
//                       url: "Enter Redirect URL",
//                       copy_code: "Enter Coupon Code",
//                       flow: "Enter Flow ID",
//                     };
//                     return (
//                       <div key={`bp-${idx}`}>
//                         <label className="mb-1 block text-[11px] font-medium text-gray-500">
//                           {btn?.Text || btn?.text || "Button"} ·{" "}
//                           {subtype ? subtype.toUpperCase() : "STATIC"}
//                         </label>
//                         {dynamic ? (
//                           <input
//                             className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                             placeholder={placeholders[subtype] || "Enter value"}
//                             value={buttonParams[idx] || ""}
//                             onChange={e => {
//                               const next = [...buttonParams];
//                               next[idx] = e.target.value;
//                               setButtonParams(next);
//                             }}
//                             disabled={!hasValidBusiness}
//                           />
//                         ) : (
//                           <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
//                             Static value:{" "}
//                             {btn?.ParameterValue ||
//                               btn?.parameterValue ||
//                               "N/A"}
//                           </p>
//                         )}
//                       </div>
//                     );
//                   })}
//                 </div>
//               )}
//             </section>
//           )}

//           {/* Media + sender + schedule */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Delivery
//             </h2>

//             {/* 🆕 Sender selection (Provider auto-derived) */}
//             <div className="mb-3 text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Sender (WhatsApp Number • Provider)
//               </label>
//               <select
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                 disabled={!hasValidBusiness || !senders.length}
//                 value={selectedSenderId}
//                 onChange={e => setSelectedSenderId(e.target.value)}
//               >
//                 <option value="" disabled>
//                   {senders.length
//                     ? "-- Select Sender --"
//                     : "No active senders found"}
//                 </option>
//                 {senders.map(s => (
//                   <option key={s.id} value={s.id}>
//                     {s.whatsAppNumber} • {s.provider}
//                   </option>
//                 ))}
//               </select>
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Only the number is shown for selection. We’ll save the sender’s
//                 phoneNumberId and provider.
//               </p>
//             </div>

//             {selectedTemplate?.requiresHeaderMediaUrl && (
//               <div className="mb-3 text-sm">
//                 <label className="mb-1 block font-medium text-gray-700">
//                   {mediaLabel(selectedTemplate.headerKind)}
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="https://…"
//                   value={headerMediaUrl}
//                   onChange={e => setHeaderMediaUrl(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   This is set once per campaign (not in CSV). Must be a public
//                   HTTPS link.
//                 </p>
//               </div>
//             )}

//             <div className="text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Schedule
//               </label>
//               <input
//                 type="datetime-local"
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                 value={scheduledAt}
//                 onChange={e => setScheduledAt(e.target.value)}
//                 disabled={!hasValidBusiness}
//               />
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Leave empty to send immediately after assignment.
//               </p>
//             </div>
//           </section>

//           {/* Submit */}
//           <div className="sticky bottom-3 z-10">
//             <button
//               onClick={handleCreateCampaign}
//               disabled={submitting || !hasValidBusiness}
//               className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
//                 submitting || !hasValidBusiness
//                   ? "bg-gray-400"
//                   : "bg-green-600 hover:bg-green-700"
//               }`}
//               title={
//                 !hasValidBusiness
//                   ? "Login required to create a campaign"
//                   : undefined
//               }
//             >
//               {submitting ? "Creating…" : "Create Campaign"}
//             </button>
//           </div>
//         </div>

//         {/* Right column – sticky preview */}
//         <aside className="md:sticky md:top-4">
//           <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
//             <div className="mb-2 flex items-center justify-between">
//               <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
//               <span className="text-[11px] text-gray-400">Customer view</span>
//             </div>

//             {hasValidBusiness ? (
//               selectedTemplate ? (
//                 <div className="flex justify-center">
//                   <PhoneWhatsAppPreview
//                     businessName={businessName}
//                     templateBody={selectedTemplate.body}
//                     parameters={templateParams}
//                     // For now, only image preview is supported; others will come later.
//                     imageUrl={
//                       selectedTemplate.headerKind === HK.Image
//                         ? headerMediaUrl
//                         : ""
//                     }
//                     buttonParams={(selectedTemplate.buttonParams || []).map(
//                       (btn, idx) => {
//                         const originalUrl =
//                           btn?.ParameterValue || btn?.parameterValue || "";
//                         const subtype = (
//                           btn?.SubType ||
//                           btn?.subType ||
//                           ""
//                         ).toLowerCase();
//                         const dynamic =
//                           ["url", "copy_code", "flow"].includes(subtype) ||
//                           originalUrl.includes("{{1}}");
//                         return {
//                           text: btn?.Text || btn?.text || "Button",
//                           subType: btn?.SubType || btn?.subType || "",
//                           type: btn?.Type || btn?.type || "",
//                           value: dynamic
//                             ? buttonParams?.[idx] || ""
//                             : btn?.ParameterValue || btn?.parameterValue || "",
//                         };
//                       }
//                     )}
//                     width="clamp(330px, 42vw, 410px)"
//                   />
//                 </div>
//               ) : (
//                 <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
//                   Select a template to preview it here
//                 </div>
//               )
//             ) : (
//               <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
//                 Waiting for Business ID…
//               </div>
//             )}
//           </div>
//         </aside>
//       </div>
//     </div>
//   );
// }

// export default CampaignBuilderPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignCreateSingle.jsx 
====================================================== 
 
// ✅ File: src/pages/campaigns/CampaignCreateSingle.jsx
import React, { useEffect, useState } from "react";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";

function CampaignCreateSingle() {
  const navigate = useNavigate();

  const [templates] = useState([]);
  const [contacts, setContacts] = useState([]);
  const [loadingContacts, setLoadingContacts] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  const [templateMessage, setTemplateMessage] = useState("");
  const [form, setForm] = useState({
    templateName: "",
    message: "",
    contactIds: [],
    name: "",
    scheduledAt: "",
    templateParams: [],
  });

  const isFormValid =
    form.name.trim() &&
    (form.templateName || form.message.trim()) &&
    form.contactIds.length > 0;

  const generatePreview = (template, paramValues) => {
    if (!template) return "";
    return template.replace(/{{(\d+)}}/g, (_, p1) => {
      const index = parseInt(p1, 10) - 1;
      return paramValues[index] || `{{${p1}}}`;
    });
  };

  const previewMessage = generatePreview(
    templateMessage || form.message,
    form.templateParams
  );

  const extractParamCount = message => {
    const matches = message.match(/{{\d+}}/g);
    const unique = [...new Set(matches || [])];
    return unique.length;
  };

  const updateField = (key, value) => {
    setForm(f => ({ ...f, [key]: value }));
  };

  const handleTemplateChange = e => {
    const tplName = e.target.value;
    const tpl = templates.find(t => t.name === tplName);
    const msg = tpl?.body || "";
    const paramCount = extractParamCount(msg);

    setTemplateMessage(msg);
    updateField("templateName", tplName);
    updateField("templateParams", Array(paramCount).fill(""));
    updateField("message", "");
  };

  const updateParam = (index, value) => {
    setForm(f => {
      const updated = [...f.templateParams];
      updated[index] = value;
      return { ...f, templateParams: updated };
    });
  };

  const toggleContact = id => {
    setForm(f => ({
      ...f,
      contactIds: f.contactIds.includes(id)
        ? f.contactIds.filter(cid => cid !== id)
        : [...f.contactIds, id],
    }));
  };

  const handleSubmit = async () => {
    if (!isFormValid) {
      if (!form.name.trim()) toast.warn("⚠️ Campaign name is required");
      else if (form.contactIds.length === 0) toast.warn("⚠️ Select contacts");
      else toast.warn("⚠️ Message cannot be empty");
      return;
    }

    setSubmitting(true);

    const payload = {
      name: form.name.trim(),
      contactIds: form.contactIds,
      scheduledAt: form.scheduledAt || null,
      isTemplate: !!form.templateName,
      ...(form.templateName
        ? {
            templateName: form.templateName,
            templateId: form.templateName,
            templateParams: form.templateParams,
            messageTemplate: previewMessage.trim(),
          }
        : {
            messageTemplate: form.message.trim(),
          }),
    };

    try {
      const res = await axiosClient.post(
        "campaign/create-text-campaign",
        payload
      );
      toast.success("🚀 Campaign created!");
      localStorage.setItem(
        "lastCampaign",
        JSON.stringify({
          lastCampaignName: form.name.trim(),
          lastCampaignId: res?.data?.campaignId || null,
          launchedAt: new Date().toISOString(),
        })
      );
      navigate("/app/campaigns/list");
    } catch (err) {
      toast.error("❌ Failed to create campaign");
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  useEffect(() => {
    axiosClient
      .get("/contacts")
      .then(res => {
        const contactList = Array.isArray(res.data) ? res.data : res.data?.data;

        if (!Array.isArray(contactList)) {
          toast.error("❌ Invalid contact format received");
          return setContacts([]);
        }

        setContacts(contactList);
      })
      .catch(() => toast.error("❌ Error loading contacts"))
      .finally(() => setLoadingContacts(false));
  }, []);

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-bold text-purple-700">✨ Build Campaign</h1>

      {/* Template Selection */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Approved Template (optional)</label>
        <select
          value={form.templateName}
          onChange={handleTemplateChange}
          className="w-full border rounded px-3 py-2"
        >
          <option value="">– none –</option>
          {templates.map(t => (
            <option key={t.name} value={t.name}>
              {t.name} ({t.language})
            </option>
          ))}
        </select>

        <label className="font-medium">Message Body</label>
        <div className="w-full border rounded px-3 py-2 bg-gray-100 whitespace-pre-wrap text-sm text-gray-800">
          {templateMessage || form.message}
        </div>

        {form.templateName &&
          form.templateParams.map((param, idx) => (
            <input
              key={idx}
              type="text"
              value={param}
              onChange={e => updateParam(idx, e.target.value)}
              placeholder={`Param ${idx + 1}`}
              className="w-full border rounded px-3 py-2 mt-2"
            />
          ))}

        <p className="text-xs text-gray-500">
          Placeholders like <code>{`{{1}}`}</code> will be auto-replaced.
        </p>
      </div>

      {/* Contact Selection */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Select Contacts</label>
        <div className="flex gap-2 mb-2">
          <button
            onClick={() =>
              setForm(f => ({
                ...f,
                contactIds: contacts.map(c => c.id),
              }))
            }
            className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-sm"
          >
            Select All
          </button>
          <button
            onClick={() => updateField("contactIds", [])}
            className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-sm"
          >
            Deselect All
          </button>
          <span className="text-sm text-gray-500">
            {form.contactIds.length} selected
          </span>
        </div>
        {loadingContacts ? (
          <p>Loading contacts…</p>
        ) : (
          <div className="grid md:grid-cols-2 gap-2 max-h-64 overflow-auto">
            {contacts.map(c => (
              <label
                key={c.id}
                className="flex flex-col border rounded p-2 hover:bg-gray-50"
              >
                <div className="flex items-center gap-2 text-sm">
                  <input
                    type="checkbox"
                    checked={form.contactIds.includes(c.id)}
                    onChange={() => toggleContact(c.id)}
                  />
                  {c.name} ({c.phoneNumber})
                </div>
              </label>
            ))}
          </div>
        )}
      </div>

      {/* Campaign Info */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Campaign Name</label>
        <input
          type="text"
          value={form.name}
          onChange={e => updateField("name", e.target.value)}
          className="w-full border rounded px-3 py-2"
          placeholder="e.g. Summer Promo"
        />
        <label className="font-medium">Schedule (optional)</label>
        <input
          type="datetime-local"
          value={form.scheduledAt}
          onChange={e => updateField("scheduledAt", e.target.value)}
          className="w-full border rounded px-3 py-2"
        />
      </div>

      {/* Preview */}
      <div className="bg-gray-100 p-4 rounded text-sm">
        <p className="font-semibold mb-1">👁️ Live Preview</p>
        <p className="whitespace-pre-wrap">{previewMessage}</p>
      </div>

      {/* Submit */}
      <button
        onClick={handleSubmit}
        disabled={!isFormValid || submitting}
        className={`w-full py-3 font-semibold rounded transition ${
          isFormValid && !submitting
            ? "bg-green-600 text-white hover:bg-green-700"
            : "bg-gray-300 text-gray-500 cursor-not-allowed"
        }`}
      >
        {submitting ? "⏳ Launching..." : "🚀 Launch Campaign"}
      </button>
    </div>
  );
}

export default CampaignCreateSingle;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignList.jsx 
====================================================== 
 
import React, { useEffect, useState, useCallback } from "react";
import axiosClient from "../../api/axiosClient";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { saveAs } from "file-saver";

function CampaignList() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalCount, setTotalCount] = useState(0); // fixed useState syntax
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");

  const navigate = useNavigate();

  // Wrap in useCallback!
  const fetchCampaigns = useCallback(async () => {
    try {
      setLoading(true);
      const res = await axiosClient.get(
        `/Campaign/paginated?page=${page}&pageSize=${pageSize}&status=${statusFilter}`
      );
      setCampaigns(res.data.items);
      setTotalCount(res.data.totalCount);
    } catch (err) {
      toast.error("❌ Failed to load campaigns");
    } finally {
      setLoading(false);
    }
  }, [page, pageSize, statusFilter]);

  useEffect(() => {
    fetchCampaigns();
  }, [fetchCampaigns]);

  const handleDelete = async id => {
    if (!window.confirm("Are you sure you want to delete this campaign?"))
      return;
    try {
      await axiosClient.delete(`/Campaign/${id}`);
      toast.success("🗑️ Campaign deleted");
      fetchCampaigns();
    } catch {
      toast.error("❌ Delete failed");
    }
  };

  const handleSendCampaign = async id => {
    try {
      await axiosClient.post(`/campaign/send/${id}`);
      toast.success("✅ Campaign sent successfully");
      fetchCampaigns();
    } catch {
      toast.error("❌ Sending campaign failed");
    }
  };

  const filteredCampaigns = campaigns.filter(c =>
    (c.name || "").toLowerCase().includes(search.toLowerCase())
  );

  const handleExport = () => {
    const csvRows = [
      ["Name", "Status", "ScheduledAt", "CreatedAt"],
      ...filteredCampaigns.map(c => [
        c.name,
        c.status,
        c.scheduledAt || "-",
        new Date(c.createdAt).toLocaleString(),
      ]),
    ];
    const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
      type: "text/csv",
    });
    saveAs(blob, "campaigns.csv");
  };

  const getStatusBadge = status => {
    const color =
      status === "Draft"
        ? "bg-yellow-100 text-yellow-800"
        : status === "Sent"
        ? "bg-green-100 text-green-800"
        : "bg-gray-200 text-gray-800";
    return (
      <span className={`px-2 py-1 rounded text-xs font-semibold ${color}`}>
        {status}
      </span>
    );
  };

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-6">
      <div className="bg-white rounded-md shadow border">
        {/* Header */}
        <div className="flex justify-between items-center px-5 py-4 border-b">
          <h2 className="text-lg font-semibold text-gray-700">
            📋 Campaigns List
          </h2>
          <div className="flex gap-2">
            <button
              onClick={() => navigate("/app/campaigns/template-single")}
              className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
            >
              ➕ New Campaign
            </button>
            <button
              onClick={handleExport}
              className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
            >
              ⬇ Export CSV
            </button>
          </div>
        </div>

        {/* Show total count */}
        <div className="flex justify-between items-center px-5 py-2">
          <span className="text-sm text-gray-600">
            Showing {filteredCampaigns.length} of {totalCount} campaigns
          </span>
        </div>

        {/* Filters */}
        <div className="px-5 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 border-b bg-gray-50">
          <input
            type="text"
            placeholder="Search by name..."
            className="border rounded px-3 py-2 text-sm"
            value={search}
            onChange={e => setSearch(e.target.value)}
          />
          <select
            className="border rounded px-3 py-2 text-sm"
            value={statusFilter}
            onChange={e => setStatusFilter(e.target.value)}
          >
            <option value="">All Statuses</option>
            <option value="Draft">Draft</option>
            <option value="Sent">Sent</option>
          </select>
          <select
            className="border rounded px-3 py-2 text-sm"
            value={pageSize}
            onChange={e => {
              setPageSize(Number(e.target.value));
              setPage(1);
            }}
          >
            {[10, 25, 50].map(size => (
              <option key={size} value={size}>
                Show {size}
              </option>
            ))}
          </select>
        </div>

        {/* Table */}
        <div className="overflow-x-auto rounded-md">
          {loading ? (
            <div className="p-5 text-gray-500 text-sm">
              ⏳ Loading campaigns...
            </div>
          ) : filteredCampaigns.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <p className="text-md">😕 No campaigns found</p>
              <p className="text-sm">Try adjusting filters or create one.</p>
            </div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-gray-100 text-gray-600 font-semibold">
                <tr>
                  <th className="p-3 text-left">Name</th>
                  <th className="p-3 text-left">Status</th>
                  <th className="p-3 text-left">Scheduled</th>
                  <th className="p-3 text-left">Created</th>
                  <th className="p-3 text-left">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredCampaigns.map(c => (
                  <tr key={c.id} className="border-t hover:bg-gray-50">
                    <td className="p-3">{c.name}</td>
                    <td className="p-3">{getStatusBadge(c.status)}</td>
                    <td className="p-3">
                      {c.scheduledAt
                        ? new Date(c.scheduledAt).toLocaleString()
                        : "-"}
                    </td>
                    <td className="p-3">
                      {new Date(c.createdAt).toLocaleString()}
                    </td>
                    <td className="p-3 space-x-1">
                      <button
                        onClick={() => navigate(`/app/campaigns/edit/${c.id}`)}
                        className="bg-blue-500 text-white px-2 py-1 text-xs rounded hover:bg-blue-600"
                      >
                        ✏️ Edit
                      </button>
                      <button
                        onClick={() => navigate(`/app/campaigns/logs/${c.id}`)}
                        className="bg-purple-600 text-white px-2 py-1 text-xs rounded hover:bg-purple-700"
                      >
                        📊 Logs
                      </button>
                      <button
                        onClick={() =>
                          navigate(`/app/campaigns/dashboard/${c.id}`)
                        }
                        className="bg-indigo-600 text-white px-2 py-1 text-xs rounded hover:bg-indigo-700"
                      >
                        📈 Stats
                      </button>
                      {c.status?.toLowerCase() === "draft" && (
                        <button
                          onClick={() => handleSendCampaign(c.id)}
                          className="bg-green-600 text-white px-2 py-1 text-xs rounded hover:bg-green-700"
                        >
                          🚀 Send
                        </button>
                      )}
                      <button
                        onClick={() => handleDelete(c.id)}
                        className="bg-red-500 text-white px-2 py-1 text-xs rounded hover:bg-red-600"
                      >
                        🗑️ Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
}

export default CampaignList;

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import { saveAs } from "file-saver";

// function CampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [page, setPage] = useState(1);
//   const [pageSize, setPageSize] = useState(10);
//   const [setTotalCount] = useState(0);
//   const [search, setSearch] = useState("");
//   const [statusFilter, setStatusFilter] = useState("");

//   const navigate = useNavigate();

//   const fetchCampaigns = async () => {
//     try {
//       setLoading(true);
//       const res = await axiosClient.get(
//         `/Campaign/paginated?page=${page}&pageSize=${pageSize}&status=${statusFilter}`
//       );
//       setCampaigns(res.data.items);
//       setTotalCount(res.data.totalCount);
//     } catch (err) {
//       toast.error("❌ Failed to load campaigns");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchCampaigns();
//   }, [page, pageSize, statusFilter]);

//   const handleDelete = async id => {
//     if (!window.confirm("Are you sure you want to delete this campaign?"))
//       return;
//     try {
//       await axiosClient.delete(`/Campaign/${id}`);
//       toast.success("🗑️ Campaign deleted");
//       fetchCampaigns();
//     } catch {
//       toast.error("❌ Delete failed");
//     }
//   };

//   const handleSendCampaign = async id => {
//     try {
//       // await axiosClient.post(`/campaign/send-template-simple`);
//       await axiosClient.post(`/campaign/send/${id}`);
//       toast.success("✅ Campaign sent successfully");
//       fetchCampaigns();
//     } catch {
//       toast.error("❌ Sending campaign failed");
//     }
//   };

//   const filteredCampaigns = campaigns.filter(c =>
//     (c.name || "").toLowerCase().includes(search.toLowerCase())
//   );

//   const handleExport = () => {
//     const csvRows = [
//       ["Name", "Status", "ScheduledAt", "CreatedAt"],
//       ...filteredCampaigns.map(c => [
//         c.name,
//         c.status,
//         c.scheduledAt || "-",
//         new Date(c.createdAt).toLocaleString(),
//       ]),
//     ];
//     const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
//       type: "text/csv",
//     });
//     saveAs(blob, "campaigns.csv");
//   };

//   const getStatusBadge = status => {
//     const color =
//       status === "Draft"
//         ? "bg-yellow-100 text-yellow-800"
//         : status === "Sent"
//         ? "bg-green-100 text-green-800"
//         : "bg-gray-200 text-gray-800";
//     return (
//       <span className={`px-2 py-1 rounded text-xs font-semibold ${color}`}>
//         {status}
//       </span>
//     );
//   };

//   return (
//     <div className="p-6 max-w-7xl mx-auto space-y-6">
//       <div className="bg-white rounded-md shadow border">
//         {/* Header */}
//         <div className="flex justify-between items-center px-5 py-4 border-b">
//           <h2 className="text-lg font-semibold text-gray-700">
//             📋 Campaigns List
//           </h2>
//           <div className="flex gap-2">
//             <button
//               onClick={() => navigate("/app/campaigns/template-single")}
//               className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
//             >
//               ➕ New Campaign
//             </button>
//             <button
//               onClick={handleExport}
//               className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
//             >
//               ⬇ Export CSV
//             </button>
//           </div>
//         </div>

//         {/* Filters */}
//         <div className="px-5 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 border-b bg-gray-50">
//           <input
//             type="text"
//             placeholder="Search by name..."
//             className="border rounded px-3 py-2 text-sm"
//             value={search}
//             onChange={e => setSearch(e.target.value)}
//           />
//           <select
//             className="border rounded px-3 py-2 text-sm"
//             value={statusFilter}
//             onChange={e => setStatusFilter(e.target.value)}
//           >
//             <option value="">All Statuses</option>
//             <option value="Draft">Draft</option>
//             <option value="Sent">Sent</option>
//           </select>
//           <select
//             className="border rounded px-3 py-2 text-sm"
//             value={pageSize}
//             onChange={e => {
//               setPageSize(Number(e.target.value));
//               setPage(1);
//             }}
//           >
//             {[10, 25, 50].map(size => (
//               <option key={size} value={size}>
//                 Show {size}
//               </option>
//             ))}
//           </select>
//         </div>

//         {/* Table */}
//         <div className="overflow-x-auto rounded-md">
//           {loading ? (
//             <div className="p-5 text-gray-500 text-sm">
//               ⏳ Loading campaigns...
//             </div>
//           ) : filteredCampaigns.length === 0 ? (
//             <div className="p-6 text-center text-gray-500">
//               <p className="text-md">😕 No campaigns found</p>
//               <p className="text-sm">Try adjusting filters or create one.</p>
//             </div>
//           ) : (
//             <table className="w-full text-sm">
//               <thead className="bg-gray-100 text-gray-600 font-semibold">
//                 <tr>
//                   <th className="p-3 text-left">Name</th>
//                   <th className="p-3 text-left">Status</th>
//                   <th className="p-3 text-left">Scheduled</th>
//                   <th className="p-3 text-left">Created</th>
//                   <th className="p-3 text-left">Actions</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {filteredCampaigns.map(c => (
//                   <tr key={c.id} className="border-t hover:bg-gray-50">
//                     <td className="p-3">{c.name}</td>
//                     <td className="p-3">{getStatusBadge(c.status)}</td>
//                     <td className="p-3">
//                       {c.scheduledAt
//                         ? new Date(c.scheduledAt).toLocaleString()
//                         : "-"}
//                     </td>
//                     <td className="p-3">
//                       {new Date(c.createdAt).toLocaleString()}
//                     </td>
//                     <td className="p-3 space-x-1">
//                       <button
//                         onClick={() => navigate(`/app/campaigns/edit/${c.id}`)}
//                         className="bg-blue-500 text-white px-2 py-1 text-xs rounded hover:bg-blue-600"
//                       >
//                         ✏️ Edit
//                       </button>
//                       <button
//                         onClick={() => navigate(`/app/campaigns/logs/${c.id}`)}
//                         className="bg-purple-600 text-white px-2 py-1 text-xs rounded hover:bg-purple-700"
//                       >
//                         📊 Logs
//                       </button>
//                       <button
//                         onClick={
//                           () => navigate(`/app/campaigns/dashboard/${c.id}`)
//                           //  navigate(`/app/campaigns/analytics/${c.id}/summary`)
//                           //campaigns/analytics/${id}/summary
//                           // /campaigns/analytics/${id}/summary
//                         }
//                         className="bg-indigo-600 text-white px-2 py-1 text-xs rounded hover:bg-indigo-700"
//                       >
//                         📈 Stats
//                       </button>
//                       {c.status?.toLowerCase() === "draft" && (
//                         <button
//                           onClick={() => handleSendCampaign(c.id)}
//                           className="bg-green-600 text-white px-2 py-1 text-xs rounded hover:bg-green-700"
//                         >
//                           🚀 Send
//                         </button>
//                       )}
//                       <button
//                         onClick={() => handleDelete(c.id)}
//                         className="bg-red-500 text-white px-2 py-1 text-xs rounded hover:bg-red-600"
//                       >
//                         🗑️ Delete
//                       </button>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default CampaignList;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignRecipientsPage.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";

function CampaignRecipientsPage() {
  const { id } = useParams(); // campaignId
  const [recipients, setRecipients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState("All");

  useEffect(() => {
    const loadRecipients = async () => {
      try {
        const res = await axiosClient.get(`/campaigns/${id}/recipients`);
        setRecipients(res.data || []);
      } catch (err) {
        toast.error("Failed to load recipients");
      } finally {
        setLoading(false);
      }
    };
    loadRecipients();
  }, [id]);

  const filteredRecipients = recipients.filter(r =>
    filter === "All" ? true : r.status === filter
  );

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white shadow-xl rounded-2xl">
      <h2 className="text-2xl font-bold text-purple-600 mb-4">
        📋 Assigned Contacts
      </h2>

      {/* 🔍 Filter Dropdown */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Filter by Status
        </label>
        <select
          value={filter}
          onChange={e => setFilter(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 text-sm w-60"
        >
          <option value="All">All</option>
          <option value="Pending">Pending</option>
          <option value="Sent">Sent</option>
          <option value="Delivered">Delivered</option>
          <option value="Failed">Failed</option>
          <option value="Replied">Replied</option>
        </select>
      </div>

      {loading ? (
        <p className="text-gray-500">Loading...</p>
      ) : filteredRecipients.length === 0 ? (
        <p className="text-yellow-600">No contacts match this filter.</p>
      ) : (
        <table className="w-full text-sm border border-gray-300 rounded-xl overflow-hidden">
          <thead className="bg-purple-100 text-gray-700">
            <tr>
              <th className="p-3 text-left">Contact</th>
              <th className="p-3 text-left">Phone</th>
              <th className="p-3 text-left">Status</th>
              <th className="p-3 text-left">Sent At</th>
            </tr>
          </thead>
          <tbody>
            {filteredRecipients.map(r => (
              <tr key={r.id} className="border-t">
                <td className="p-3">{r.contactName}</td>
                <td className="p-3 text-gray-600">{r.contactPhone}</td>
                <td className="p-3 flex items-center gap-1">
                  {r.status === "Pending" && <span>✉️</span>}
                  {r.status === "Sent" && <span>✅</span>}
                  {r.status === "Delivered" && <span>📬</span>}
                  {r.status === "Failed" && <span>❌</span>}
                  {r.status === "Replied" && <span>💬</span>}
                  <span>{r.status}</span>
                </td>
                <td className="p-3 text-gray-500">
                  {r.sentAt ? new Date(r.sentAt).toLocaleString() : "—"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default CampaignRecipientsPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignSendLogs.jsx 
====================================================== 
 
// 📄 src/pages/campaigns/CampaignSendLogs.jsx
import React, { useEffect, useState, useCallback } from "react";
import { useParams, Link } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import { saveAs } from "file-saver";
import { confirmAlert } from "react-confirm-alert";
import "react-confirm-alert/src/react-confirm-alert.css";
import MessagePreviewModal from "./components/MessagePreviewModal";
import CampaignSummaryBar from "./components/CampaignSummaryBar";
import ContactJourneyModal from "./components/ContactJourneyModal";

function CampaignSendLogs() {
  const { campaignId } = useParams();

  // data
  const [logs, setLogs] = useState([]);
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);

  // filters/paging
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(0);
  const [totalLogs, setTotalLogs] = useState(0);

  // modals
  const [previewOpen, setPreviewOpen] = useState(false);
  const [selectedLog, setSelectedLog] = useState(null);
  const [isJourneyOpen, setIsJourneyOpen] = useState(false);
  const [journeyLog, setJourneyLog] = useState(null);

  // --- helpers ---
  // Prefer contactPhone when it's a real value; otherwise fall back to recipientNumber / to.
  const getDisplayPhone = log => {
    const clean = v => (typeof v === "string" ? v.trim() : v);
    const p = clean(log?.contactPhone);
    if (p && p !== "-" && p.toLowerCase() !== "n/a") return p;
    const r = clean(log?.recipientNumber) || clean(log?.to);
    return r || ""; // empty if truly unavailable
  };

  // --- fetching ---
  const fetchLogs = useCallback(async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        page,
        pageSize,
        status: statusFilter,
        search,
      });
      const res = await axiosClient.get(
        `/campaign-logs/campaign/${campaignId}?${params.toString()}`
      );
      setLogs(res.data.items || []);
      setTotalLogs(res.data.totalCount || 0);
      setTotalPages(res.data.totalPages || 0);
    } catch {
      toast.error("❌ Failed to load send logs");
    } finally {
      setLoading(false);
    }
  }, [campaignId, page, pageSize, statusFilter, search]);

  const fetchSummary = useCallback(async () => {
    try {
      const res = await axiosClient.get(
        `/campaign-logs/campaign/${campaignId}/summary`
      );
      setSummary(res.data.data || res.data);
    } catch {
      console.error("❌ Failed to fetch summary");
    }
  }, [campaignId]);

  useEffect(() => {
    const t = setTimeout(fetchLogs, 500);
    return () => clearTimeout(t);
  }, [fetchLogs]);

  useEffect(() => {
    fetchSummary();
  }, [fetchSummary]);

  // --- handlers ---
  const handleStatusChange = e => {
    setStatusFilter(e.target.value);
    setPage(1);
  };
  const handleSearchChange = e => {
    setSearch(e.target.value);
    setPage(1);
  };

  const handleExport = () => {
    const headers = [
      "Contact Phone",
      "Status",
      "Channel",
      "Sent At",
      "Delivered",
      "Read",
      "Clicked",
      "Click Type",
    ];
    const csvRows = [
      headers,
      ...logs.map(log => [
        getDisplayPhone(log), // ✅ phone only
        log.sendStatus,
        log.sourceChannel,
        log.sentAt ? new Date(log.sentAt).toLocaleString() : "",
        log.deliveredAt ? new Date(log.deliveredAt).toLocaleString() : "",
        log.readAt ? new Date(log.readAt).toLocaleString() : "",
        log.isClicked ? "Yes" : "No",
        log.clickType || "",
      ]),
    ];
    const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
      type: "text/csv",
    });
    saveAs(blob, `CampaignLogs-${campaignId}.csv`);
  };

  const handleRetrySingle = logId => {
    confirmAlert({
      title: "Retry This Message?",
      message: "Are you sure you want to retry this failed message?",
      buttons: [
        {
          label: "Yes",
          onClick: async () => {
            try {
              await axiosClient.post(`/campaign-logs/${logId}/retry`);
              toast.success("✅ Retry triggered");
              fetchLogs();
              fetchSummary();
            } catch {
              toast.error("❌ Retry failed");
            }
          },
        },
        { label: "Cancel" },
      ],
    });
  };

  const handleRetryAll = () => {
    confirmAlert({
      title: "Retry All Failed Messages?",
      message:
        "This will retry all failed messages in this campaign. Continue?",
      buttons: [
        {
          label: "Yes",
          onClick: async () => {
            try {
              const res = await axiosClient.post(
                `/campaign-logs/campaign/${campaignId}/retry-all`
              );
              toast.success(`✅ Retried ${res.data.retried} messages`);
              fetchLogs();
              fetchSummary();
            } catch {
              toast.error("❌ Retry failed");
            }
          },
        },
        { label: "Cancel" },
      ],
    });
  };

  const openPreview = log => {
    setSelectedLog(log);
    setPreviewOpen(true);
  };
  const closePreview = () => {
    setPreviewOpen(false);
    setSelectedLog(null);
  };

  // --- render ---
  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold text-purple-700">
          📨 Send Logs for Campaign
        </h1>
        <Link
          to="/app/campaigns/template-campaigns-list"
          className="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50 transition"
        >
          <span className="text-lg">←</span> Back to Campaigns
        </Link>
      </div>

      <CampaignSummaryBar summary={summary} />

      <div className="grid md:grid-cols-4 gap-4 mb-4">
        <input
          className="border px-3 py-2 rounded"
          placeholder="🔍 Search by name or phone"
          onChange={handleSearchChange}
        />
        <select
          className="border px-3 py-2 rounded"
          value={statusFilter}
          onChange={handleStatusChange}
        >
          <option value="">All Statuses</option>
          <option value="Sent">Sent</option>
          <option value="Delivered">Delivered</option>
          <option value="Read">Read</option>
          <option value="Queued">Queued</option>
          <option value="Failed">Failed</option>
        </select>
      </div>

      <div className="mb-4 flex justify-between">
        <p className="text-sm text-gray-500">
          Showing {logs.length} of {totalLogs} logs
        </p>
        <div className="space-x-2">
          <button
            onClick={handleExport}
            className="bg-emerald-600 text-white text-sm px-3 py-1 rounded hover:bg-emerald-700"
          >
            ⬇ Export CSV
          </button>
          <button
            onClick={handleRetryAll}
            className="bg-purple-600 text-white text-sm px-3 py-1 rounded hover:bg-purple-700"
          >
            🔁 Retry All Failed
          </button>
        </div>
      </div>

      {loading ? (
        <p>Loading logs...</p>
      ) : logs.length === 0 ? (
        <p className="text-gray-500">No logs found with current filters.</p>
      ) : (
        <div className="overflow-x-auto bg-white shadow rounded">
          <table className="w-full text-sm">
            <thead className="bg-gray-100 text-left">
              <tr>
                <th className="p-2">Contact</th>
                <th className="p-2">Status</th>
                <th className="p-2">Channel</th>
                <th className="p-2">Sent</th>
                <th className="p-2">Clicked</th>
                <th className="p-2">Click Type</th>
                <th className="p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {logs.map(log => (
                <tr key={log.id} className="border-t hover:bg-gray-50">
                  <td className="p-2">
                    {/* ✅ phone only – no N/A, no parentheses */}
                    {getDisplayPhone(log) || "-"}
                  </td>
                  <td className="p-2">{log.sendStatus || "-"}</td>
                  <td className="p-2">{log.sourceChannel || "-"}</td>
                  <td className="p-2">
                    {log.sentAt ? new Date(log.sentAt).toLocaleString() : "-"}
                  </td>
                  <td className="p-2">{log.isClicked ? "✅ Yes" : "❌ No"}</td>
                  <td className="p-2">{log.clickType || "-"}</td>
                  <td className="p-2 space-x-2">
                    <button
                      onClick={() => openPreview(log)}
                      className="text-xs text-blue-600 hover:underline"
                    >
                      Preview
                    </button>
                    <button
                      onClick={() => {
                        setJourneyLog(log);
                        setIsJourneyOpen(true);
                      }}
                      className="text-xs text-indigo-600 hover:underline"
                    >
                      🧭 Journey
                    </button>
                    {log.sendStatus === "Failed" && (
                      <button
                        onClick={() => handleRetrySingle(log.id)}
                        className="text-xs text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded"
                      >
                        Retry
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {totalPages > 1 && (
        <div className="flex justify-end items-center mt-4 space-x-2">
          <button
            className="px-2 py-1 text-sm border rounded"
            disabled={page === 1}
            onClick={() => setPage(p => p - 1)}
          >
            ⬅ Prev
          </button>
          <span className="text-sm text-gray-600">
            Page {page} of {totalPages}
          </span>
          <button
            className="px-2 py-1 text-sm border rounded"
            disabled={page === totalPages}
            onClick={() => setPage(p => p + 1)}
          >
            Next ➡
          </button>
        </div>
      )}

      <MessagePreviewModal
        isOpen={previewOpen}
        onClose={closePreview}
        messageLog={selectedLog}
      />
      <ContactJourneyModal
        isOpen={isJourneyOpen}
        onClose={() => setIsJourneyOpen(false)}
        log={journeyLog}
      />
    </div>
  );
}

export default CampaignSendLogs;

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, Link } from "react-router-dom";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import { saveAs } from "file-saver";
// import { confirmAlert } from "react-confirm-alert";
// import "react-confirm-alert/src/react-confirm-alert.css";
// import MessagePreviewModal from "./components/MessagePreviewModal";
// import CampaignSummaryBar from "./components/CampaignSummaryBar";
// import ContactJourneyModal from "./components/ContactJourneyModal";

// function CampaignSendLogs() {
//   const { campaignId } = useParams();

//   // State for data returned from the server
//   const [logs, setLogs] = useState([]);
//   const [summary, setSummary] = useState(null);
//   const [loading, setLoading] = useState(true);

//   // State for server-side filtering and pagination
//   const [search, setSearch] = useState("");
//   const [statusFilter, setStatusFilter] = useState("");
//   const [page, setPage] = useState(1);
//   const [pageSize] = useState(10);
//   const [totalPages, setTotalPages] = useState(0);
//   const [totalLogs, setTotalLogs] = useState(0);

//   // State for modals
//   const [previewOpen, setPreviewOpen] = useState(false);
//   const [selectedLog, setSelectedLog] = useState(null);
//   const [isJourneyOpen, setIsJourneyOpen] = useState(false);
//   const [journeyLog, setJourneyLog] = useState(null);

//   // --- DATA FETCHING ---

//   const fetchLogs = useCallback(async () => {
//     setLoading(true);
//     try {
//       // Construct URL with query parameters for server-side processing
//       const params = new URLSearchParams({
//         page,
//         pageSize,
//         status: statusFilter,
//         search,
//       });

//       const res = await axiosClient.get(
//         `/campaign-logs/campaign/${campaignId}?${params.toString()}`
//       );

//       // The API now returns a paged result object
//       setLogs(res.data.items || []);
//       setTotalLogs(res.data.totalCount || 0);
//       setTotalPages(res.data.totalPages || 0);
//     } catch {
//       toast.error("❌ Failed to load send logs");
//     } finally {
//       setLoading(false);
//     }
//   }, [campaignId, page, pageSize, statusFilter, search]);

//   const fetchSummary = useCallback(async () => {
//     try {
//       const res = await axiosClient.get(
//         `/campaign-logs/campaign/${campaignId}/summary`
//       );
//       // Ensure you are accessing the correct property from your ResponseResult
//       setSummary(res.data.data || res.data);
//     } catch {
//       console.error("❌ Failed to fetch summary");
//     }
//   }, [campaignId]);

//   // This effect triggers an API call whenever a filter or page changes
//   useEffect(() => {
//     // A small debounce to prevent API calls on every keystroke for search
//     const handler = setTimeout(() => {
//       fetchLogs();
//     }, 500); // 500ms delay

//     return () => {
//       clearTimeout(handler);
//     };
//   }, [fetchLogs]);

//   // This effect fetches the summary only once when the component loads
//   useEffect(() => {
//     fetchSummary();
//   }, [fetchSummary]);

//   // NOTE: The old client-side filtering useEffect has been removed.

//   // --- EVENT HANDLERS ---

//   const handleStatusChange = e => {
//     setStatusFilter(e.target.value);
//     setPage(1); // Reset to the first page when a filter changes
//   };

//   const handleSearchChange = e => {
//     setSearch(e.target.value);
//     setPage(1); // Reset to the first page when search text changes
//   };

//   const handleExport = () => {
//     // This function would also need to be updated to fetch ALL logs for export
//     // For now, it exports the current page.
//     const headers = [
//       "Contact Name",
//       "Phone",
//       "Status",
//       "Channel",
//       "Sent At",
//       "Delivered",
//       "Read",
//       "Clicked",
//       "Click Type",
//     ];
//     const csvRows = [
//       headers,
//       ...logs.map(log => [
//         log.contactName,
//         log.contactPhone,
//         log.sendStatus,
//         log.sourceChannel,
//         log.sentAt ? new Date(log.sentAt).toLocaleString() : "-",
//         log.deliveredAt ? new Date(log.deliveredAt).toLocaleString() : "-",
//         log.readAt ? new Date(log.readAt).toLocaleString() : "-",
//         log.isClicked ? "Yes" : "No",
//         log.clickType || "-",
//       ]),
//     ];
//     const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
//       type: "text/csv",
//     });
//     saveAs(blob, `CampaignLogs-${campaignId}.csv`);
//   };

//   const handleRetrySingle = logId => {
//     confirmAlert({
//       title: "Retry This Message?",
//       message: "Are you sure you want to retry this failed message?",
//       buttons: [
//         {
//           label: "Yes",
//           onClick: async () => {
//             try {
//               await axiosClient.post(`/campaign-logs/${logId}/retry`);
//               toast.success("✅ Retry triggered");
//               fetchLogs(); // Re-fetch data to show updated status
//               fetchSummary();
//             } catch {
//               toast.error("❌ Retry failed");
//             }
//           },
//         },
//         { label: "Cancel" },
//       ],
//     });
//   };

//   const handleRetryAll = () => {
//     confirmAlert({
//       title: "Retry All Failed Messages?",
//       message:
//         "This will retry all failed messages in this campaign. Continue?",
//       buttons: [
//         {
//           label: "Yes",
//           onClick: async () => {
//             try {
//               const res = await axiosClient.post(
//                 `/campaign-logs/campaign/${campaignId}/retry-all`
//               );
//               toast.success(`✅ Retried ${res.data.retried} messages`);
//               fetchLogs(); // Re-fetch data
//               fetchSummary();
//             } catch {
//               toast.error("❌ Retry failed");
//             }
//           },
//         },
//         { label: "Cancel" },
//       ],
//     });
//   };

//   const openPreview = log => {
//     setSelectedLog(log);
//     setPreviewOpen(true);
//   };
//   const closePreview = () => {
//     setPreviewOpen(false);
//     setSelectedLog(null);
//   };

//   return (
//     <div className="p-6 bg-gray-50 min-h-screen">
//       <div className="flex justify-between items-center mb-4">
//         <h1 className="text-2xl font-bold text-purple-700">
//           📨 Send Logs for Campaign
//         </h1>
//         <Link
//           to="/app/campaigns/template-campaigns-list"
//           className="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50 transition"
//         >
//           <span className="text-lg">←</span> Back to Campaigns
//         </Link>
//       </div>

//       <CampaignSummaryBar summary={summary} />

//       <div className="grid md:grid-cols-4 gap-4 mb-4">
//         <input
//           className="border px-3 py-2 rounded"
//           placeholder="🔍 Search by name or phone"
//           onChange={handleSearchChange}
//         />
//         <select
//           className="border px-3 py-2 rounded"
//           value={statusFilter}
//           onChange={handleStatusChange}
//         >
//           <option value="">All Statuses</option>
//           <option value="Sent">Sent</option>
//           <option value="Delivered">Delivered</option>
//           <option value="Read">Read</option>
//           <option value="Queued">Queued</option>
//           <option value="Failed">Failed</option>
//         </select>
//         {/* You can add back the other filters here following the same pattern */}
//       </div>

//       <div className="mb-4 flex justify-between">
//         <p className="text-sm text-gray-500">
//           Showing {logs.length} of {totalLogs} logs
//         </p>
//         <div className="space-x-2">
//           <button
//             onClick={handleExport}
//             className="bg-emerald-600 text-white text-sm px-3 py-1 rounded hover:bg-emerald-700"
//           >
//             ⬇ Export CSV
//           </button>
//           <button
//             onClick={handleRetryAll}
//             className="bg-purple-600 text-white text-sm px-3 py-1 rounded hover:bg-purple-700"
//           >
//             🔁 Retry All Failed
//           </button>
//         </div>
//       </div>

//       {loading ? (
//         <p>Loading logs...</p>
//       ) : logs.length === 0 ? (
//         <p className="text-gray-500">No logs found with current filters.</p>
//       ) : (
//         <div className="overflow-x-auto bg-white shadow rounded">
//           <table className="w-full text-sm">
//             <thead className="bg-gray-100 text-left">
//               <tr>
//                 <th className="p-2">Contact</th>
//                 <th className="p-2">Status</th>
//                 <th className="p-2">Channel</th>
//                 <th className="p-2">Sent</th>
//                 <th className="p-2">Clicked</th>
//                 <th className="p-2">Click Type</th>
//                 <th className="p-2">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {logs.map(log => (
//                 <tr key={log.id} className="border-t hover:bg-gray-50">
//                   <td className="p-2">
//                     {log.contactName} ({log.contactPhone})
//                   </td>
//                   <td className="p-2">{log.sendStatus || "-"}</td>
//                   <td className="p-2">{log.sourceChannel || "-"}</td>
//                   <td className="p-2">
//                     {log.sentAt ? new Date(log.sentAt).toLocaleString() : "-"}
//                   </td>
//                   <td className="p-2">{log.isClicked ? "✅ Yes" : "❌ No"}</td>
//                   <td className="p-2">{log.clickType || "-"}</td>
//                   <td className="p-2 space-x-2">
//                     <button
//                       onClick={() => openPreview(log)}
//                       className="text-xs text-blue-600 hover:underline"
//                     >
//                       Preview
//                     </button>
//                     <button
//                       onClick={() => {
//                         setJourneyLog(log);
//                         setIsJourneyOpen(true);
//                       }}
//                       className="text-xs text-indigo-600 hover:underline"
//                     >
//                       🧭 Journey
//                     </button>
//                     {log.sendStatus === "Failed" && (
//                       <button
//                         onClick={() => handleRetrySingle(log.id)}
//                         className="text-xs text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded"
//                       >
//                         Retry
//                       </button>
//                     )}
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       )}

//       {totalPages > 1 && (
//         <div className="flex justify-end items-center mt-4 space-x-2">
//           <button
//             className="px-2 py-1 text-sm border rounded"
//             disabled={page === 1}
//             onClick={() => setPage(p => p - 1)}
//           >
//             ⬅ Prev
//           </button>
//           <span className="text-sm text-gray-600">
//             Page {page} of {totalPages}
//           </span>
//           <button
//             className="px-2 py-1 text-sm border rounded"
//             disabled={page === totalPages}
//             onClick={() => setPage(p => p + 1)}
//           >
//             Next ➡
//           </button>
//         </div>
//       )}

//       <MessagePreviewModal
//         isOpen={previewOpen}
//         onClose={closePreview}
//         messageLog={selectedLog}
//       />
//       <ContactJourneyModal
//         isOpen={isJourneyOpen}
//         onClose={() => setIsJourneyOpen(false)}
//         log={journeyLog}
//       />
//     </div>
//   );
// }

// export default CampaignSendLogs;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\Campaigns_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\AssignContactsPage.jsx 
====================================================== 
 
import React, { useEffect, useRef, useState } from "react";
import { useParams } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import Papa from "papaparse";
import Modal from "react-modal";
import TagFilterDropdown from "./components/TagFilterDropdown";

// CSV campaign flow (schema → upload → map → validate → dry-run → commit)
import CsvAudienceSection from "./components/CsvAudienceSection";
import { fetchCsvSchema } from "./api/csvApi";

if (typeof document !== "undefined" && process.env.NODE_ENV !== "test") {
  Modal.setAppElement("#root");
}

export default function AssignContactsPage() {
  const { id: campaignId } = useParams();
  const [contacts, setContacts] = useState([]);
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [selectedIds, setSelectedIds] = useState([]);
  const [search, setSearch] = useState("");
  const [tags, setTags] = useState([]);
  const [campaign, setCampaign] = useState(null);

  const [showFieldMapModal, setShowFieldMapModal] = useState(false);
  const [csvHeaders, setCsvHeaders] = useState([]);
  const [fieldMapping, setFieldMapping] = useState({ name: "", phone: "" });
  const [parsedCSV, setParsedCSV] = useState([]);
  const [importedCount, setImportedCount] = useState(0);
  const [saveToDb, setSaveToDb] = useState(true);
  const [selectedTagId, setSelectedTagId] = useState(null);
  const [allTags, setAllTags] = useState([]);

  // was mistakenly `[setIsImporting] = useState(false)` before
  const [isImporting, setIsImporting] = useState(false);

  // we still fetch placeholder count to adapt helper text, but UI shows regardless
  const [placeholderCount, setPlaceholderCount] = useState(0);

  const importedRef = useRef(null);

  // Helper for consistent phone extraction
  function getPhone(contact) {
    return contact.phoneNumber || contact.phone || "";
  }

  useEffect(() => {
    loadCampaign();
    fetchAllTags();
    // eslint-disable-next-line
  }, [campaignId]);

  useEffect(() => {
    loadContacts();
    // eslint-disable-next-line
  }, [tags]);

  useEffect(() => {
    applySearchFilter();
    // eslint-disable-next-line
  }, [contacts, search]);

  const loadCampaign = async () => {
    if (!campaignId) {
      toast.error("No campaign ID found in URL.");
      return;
    }
    try {
      const res = await axiosClient.get(`/campaign/${campaignId}`);
      setCampaign(res.data);

      // Fetch the CSV schema to know how many template params exist
      try {
        const sc = await fetchCsvSchema(campaignId); // { headers, placeholderCount, ... }
        const n = Number(sc?.placeholderCount ?? 0);
        setPlaceholderCount(isNaN(n) ? 0 : n);
      } catch {
        setPlaceholderCount(0);
      }
    } catch (err) {
      console.error("Failed to load campaign:", err);
      toast.error("Failed to load campaign");
    }
  };

  const fetchAllTags = async () => {
    try {
      const res = await axiosClient.get("/tags/get-tags");
      const tags = res.data?.data || res.data || [];
      setAllTags(tags);
    } catch {
      toast.error("Failed to load tags");
    }
  };

  const loadContacts = async () => {
    try {
      let res;
      if (tags.length > 0) {
        res = await axiosClient.post("/contacts/filter-by-tags", tags);
        setContacts(res.data?.data || []);
      } else {
        res = await axiosClient.get("/contacts", {
          params: { tab: "all", page: 1, pageSize: 1000 },
        });
        setContacts(res.data?.data?.items || []);
      }
    } catch {
      toast.error("Failed to load contacts");
    }
  };

  const applySearchFilter = () => {
    const result = contacts.filter(
      c =>
        c.name?.toLowerCase().includes(search.toLowerCase()) ||
        getPhone(c).includes(search)
    );
    setFilteredContacts(result);
  };

  const toggleContact = id => {
    setSelectedIds(prev =>
      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
    );
  };

  const toggleSelectAll = () => {
    const filteredIds = filteredContacts.map(c => c.id);
    const allSelected = filteredIds.every(id => selectedIds.includes(id));
    setSelectedIds(prev =>
      allSelected
        ? prev.filter(id => !filteredIds.includes(id))
        : [...new Set([...prev, ...filteredIds])]
    );
  };

  // ===== Existing local CSV → CRM import (kept as-is) =====
  const handleFileUpload = e => {
    const file = e.target.files[0];
    if (!file) return;

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: function (results) {
        const headers = Object.keys(results.data[0] || {});
        setParsedCSV(results.data);
        setCsvHeaders(headers);
        setShowFieldMapModal(true);
      },
      error: function () {
        toast.error("CSV Parsing Failed");
      },
    });
  };

  useEffect(() => {
    if (csvHeaders.length > 0) {
      const suggestions = {
        name: ["name", "full name", "contact name"],
        phone: ["phone", "mobile", "number", "whatsapp"],
      };
      const bestMatch = fieldOptions =>
        csvHeaders.find(h =>
          fieldOptions.some(option =>
            h.toLowerCase().includes(option.toLowerCase())
          )
        ) || "";
      setFieldMapping({
        name: bestMatch(suggestions.name),
        phone: bestMatch(suggestions.phone),
      });
    }
  }, [csvHeaders]);

  const applyFieldMapping = async () => {
    const mapped = parsedCSV
      .filter(row => row[fieldMapping.name] && row[fieldMapping.phone])
      .map(row => ({
        id: crypto.randomUUID(),
        name: row[fieldMapping.name],
        phone: row[fieldMapping.phone],
        tags: selectedTagId
          ? [
              {
                tagId: selectedTagId,
                tagName: allTags.find(t => t.id === selectedTagId)?.name || "",
              },
            ]
          : [],
      }));

    setContacts(prev => [...prev, ...mapped]);
    setSelectedIds(prev => [...new Set([...prev, ...mapped.map(c => c.id)])]);
    setImportedCount(mapped.length);
    setShowFieldMapModal(false);
    toast.success(`${mapped.length} contacts imported.`);

    setTimeout(() => {
      if (importedRef.current) {
        importedRef.current.scrollIntoView({ behavior: "smooth" });
      }
    }, 200);

    if (saveToDb) {
      try {
        setIsImporting(true);
        await axiosClient.post("/contacts/bulk-import", mapped);
        toast.success("Contacts also saved to your CRM.");
      } catch {
        toast.error("Saving to CRM failed.");
      } finally {
        setIsImporting(false);
      }
    }
  };

  const assignContacts = async () => {
    if (!campaign || !campaign.id) {
      toast.error("Campaign not ready. Please try again.");
      return;
    }
    if (selectedIds.length === 0) {
      toast.warn("Please select at least one contact");
      return;
    }

    const validIds = selectedIds.filter(id =>
      contacts.find(c => c.id === id && getPhone(c).trim() !== "")
    );

    if (validIds.length === 0) {
      toast.warn("No selected contacts have valid phone numbers.");
      return;
    }

    try {
      const payload = { contactIds: validIds };
      await axiosClient.post(
        `/campaign/${campaign.id}/assign-contacts`,
        payload
      );
      toast.success("Contacts assigned to campaign");
    } catch (err) {
      const message =
        err.response?.data?.message ||
        "Something went wrong during assignment.";
      toast.error(message);
    }
  };

  const allVisibleSelected = filteredContacts.every(c =>
    selectedIds.includes(c.id)
  );

  return (
    <div className="max-w-7xl mx-auto px-4 py-6">
      <h1 className="text-2xl font-bold text-purple-600 mb-6 flex items-center gap-2">
        🎯 Assign Contacts to Campaign
      </h1>

      <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
        <input
          className="border p-2 rounded-md w-full sm:w-1/3"
          type="text"
          placeholder="Search by name or phone..."
          value={search}
          onChange={e => setSearch(e.target.value)}
        />
        <TagFilterDropdown
          selectedTags={tags}
          onChange={setTags}
          category="All"
        />
        <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-auto">
          + Upload CSV
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            className="hidden"
          />
        </label>
      </div>

      <div
        className="bg-white rounded-xl shadow-sm overflow-x-auto"
        ref={importedRef}
      >
        <table className="min-w-full text-sm">
          <thead className="bg-gray-100 text-gray-700">
            <tr>
              <th className="px-4 py-2 text-center">
                <input
                  type="checkbox"
                  checked={allVisibleSelected}
                  onChange={toggleSelectAll}
                />
              </th>
              <th className="px-4 py-2 text-left">Name</th>
              <th className="px-4 py-2 text-left">Phone</th>
              <th className="px-4 py-2 text-left">Tags</th>
              <th className="px-4 py-2 text-left">Status</th>
            </tr>
          </thead>
          <tbody>
            {filteredContacts.map(contact => (
              <tr key={contact.id} className="border-t hover:bg-gray-50">
                <td className="px-4 py-2 text-center">
                  <input
                    type="checkbox"
                    checked={selectedIds.includes(contact.id)}
                    onChange={() => toggleContact(contact.id)}
                  />
                </td>
                <td className="px-4 py-2">{contact.name || "Unnamed"}</td>
                <td className="px-4 py-2">{getPhone(contact) || "—"}</td>
                <td className="px-4 py-2">
                  <div className="flex flex-wrap gap-1">
                    {(contact.tags || contact.contactTags || []).map(tag => (
                      <span
                        key={tag.tagId || tag.id}
                        className="px-2 py-0.5 text-xs rounded-full"
                        style={{
                          backgroundColor: tag.colorHex || "#E5E7EB",
                          color: "#000",
                        }}
                      >
                        {tag.tagName || tag.name}
                      </span>
                    ))}
                  </div>
                </td>
                <td className="px-4 py-2">
                  {getPhone(contact).trim() !== "" ? "✅ Valid" : "⚠️ No Phone"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-600">
        <div>
          Selected: {selectedIds.length} / WhatsApp-ready:{" "}
          {
            filteredContacts.filter(
              c => selectedIds.includes(c.id) && getPhone(c).trim() !== ""
            ).length
          }
        </div>
        {importedCount > 0 && (
          <div className="text-green-600">
            ✔ Imported: {importedCount} contact(s)
          </div>
        )}
      </div>

      {/* === Campaign CSV flow (ALWAYS visible; phones-only works when N=0) === */}
      {campaignId && (
        <div className="mt-8 rounded-xl border bg-white p-4 shadow-sm">
          <h2 className="mb-2 text-sm font-semibold text-gray-800">
            Bulk Personalization via CSV
            {placeholderCount > 0 && (
              <>
                {" "}
                (Template has {placeholderCount} dynamic field
                {placeholderCount > 1 ? "s" : ""})
              </>
            )}
          </h2>
          <p className="mb-3 text-xs text-gray-600">
            Upload a CSV with at least a <code>phone</code> column
            {placeholderCount > 0 && (
              <>
                {" "}
                and values for <code>{"{{1}}"}</code>
                {placeholderCount > 1 && (
                  <>
                    …<code>{`{{${placeholderCount}}}`}</code>
                  </>
                )}
              </>
            )}
            , then validate, dry-run, and persist to create an Audience +
            Recipients with idempotency. Your manual assignment flow above
            remains available.
          </p>
          <CsvAudienceSection campaignId={campaignId} />
        </div>
      )}

      <div className="mt-6 flex justify-end">
        <button
          onClick={assignContacts}
          disabled={false}
          className="px-6 py-3 rounded-lg transition bg-purple-600 text-white hover:bg-purple-700"
        >
          Assign to Campaign
        </button>
      </div>

      <Modal
        isOpen={showFieldMapModal}
        onRequestClose={() => setShowFieldMapModal(false)}
        className="bg-white rounded-lg shadow-lg max-w-xl mx-auto mt-20 p-6"
        overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
      >
        <h2 className="text-lg font-bold mb-4">🧩 Map CSV Fields</h2>
        <div className="space-y-4">
          {["name", "phone"].map(field => (
            <div key={field}>
              <label className="block text-sm font-medium mb-1 capitalize">
                {field}
              </label>
              <select
                className="border px-3 py-2 rounded w-full"
                value={fieldMapping[field]}
                onChange={e =>
                  setFieldMapping(prev => ({
                    ...prev,
                    [field]: e.target.value,
                  }))
                }
              >
                <option value="">-- Select CSV column --</option>
                {csvHeaders.map(header => (
                  <option key={header} value={header}>
                    {header}
                  </option>
                ))}
              </select>
            </div>
          ))}
          <div>
            <label className="block text-sm font-medium mb-1">
              Apply Tag to All
            </label>
            <select
              className="border px-3 py-2 rounded w-full"
              value={selectedTagId || ""}
              onChange={e => setSelectedTagId(e.target.value)}
            >
              <option value="">-- None --</option>
              {Array.isArray(allTags) &&
                allTags.map(tag => (
                  <option key={tag.id} value={tag.id}>
                    {tag.name}
                  </option>
                ))}
            </select>
          </div>
        </div>

        <div className="mt-4">
          <label className="inline-flex items-center">
            <input
              type="checkbox"
              className="mr-2"
              checked={saveToDb}
              onChange={e => setSaveToDb(e.target.checked)}
            />
            Also save these contacts to your CRM
          </label>
        </div>

        <div className="mt-6 flex justify-end gap-3">
          <button
            className="text-gray-600 hover:underline"
            onClick={() => setShowFieldMapModal(false)}
          >
            Cancel
          </button>
          <button
            className="bg-purple-600 text-white px-4 py-2 rounded-md"
            onClick={applyFieldMapping}
            disabled={isImporting}
          >
            {isImporting ? "Importing…" : "Import & Apply"}
          </button>
        </div>
      </Modal>
    </div>
  );
}

// import React, { useEffect, useRef, useState } from "react";
// import { useParams } from "react-router-dom";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import Papa from "papaparse";
// import Modal from "react-modal";
// // ❌ removed: WhatsAppBubblePreview
// import TagFilterDropdown from "./components/TagFilterDropdown";

// if (typeof document !== "undefined" && process.env.NODE_ENV !== "test") {
//   Modal.setAppElement("#root");
// }

// export default function AssignContactsPage() {
//   const { id: campaignId } = useParams();
//   const [contacts, setContacts] = useState([]);
//   const [filteredContacts, setFilteredContacts] = useState([]);
//   const [selectedIds, setSelectedIds] = useState([]);
//   const [search, setSearch] = useState("");
//   const [tags, setTags] = useState([]);
//   const [campaign, setCampaign] = useState(null);

//   const [showFieldMapModal, setShowFieldMapModal] = useState(false);
//   const [csvHeaders, setCsvHeaders] = useState([]);
//   const [fieldMapping, setFieldMapping] = useState({ name: "", phone: "" });
//   const [parsedCSV, setParsedCSV] = useState([]);
//   const [importedCount, setImportedCount] = useState(0);
//   const [saveToDb, setSaveToDb] = useState(true);
//   const [selectedTagId, setSelectedTagId] = useState(null);
//   const [allTags, setAllTags] = useState([]);
//   const [setIsImporting] = useState(false);

//   const importedRef = useRef(null);

//   // ✅ Helper for consistent phone extraction
//   function getPhone(contact) {
//     return contact.phoneNumber || contact.phone || "";
//   }

//   useEffect(() => {
//     loadCampaign();
//     fetchAllTags();
//     // eslint-disable-next-line
//   }, [campaignId]);

//   useEffect(() => {
//     loadContacts();
//     // eslint-disable-next-line
//   }, [tags]);

//   useEffect(() => {
//     applySearchFilter();
//     // eslint-disable-next-line
//   }, [contacts, search]);

//   const loadCampaign = async () => {
//     if (!campaignId) {
//       toast.error("No campaign ID found in URL.");
//       return;
//     }
//     try {
//       const res = await axiosClient.get(`/campaign/${campaignId}`);
//       setCampaign(res.data);
//       // console.log("Loaded campaign:", res.data);
//     } catch (err) {
//       console.error("Failed to load campaign:", err);
//       toast.error("Failed to load campaign");
//     }
//   };

//   const fetchAllTags = async () => {
//     try {
//       const res = await axiosClient.get("/tags/get-tags");
//       const tags = res.data?.data || res.data || [];
//       setAllTags(tags);
//     } catch {
//       toast.error("Failed to load tags");
//     }
//   };

//   const loadContacts = async () => {
//     try {
//       let res;
//       if (tags.length > 0) {
//         res = await axiosClient.post("/contacts/filter-by-tags", tags);
//         setContacts(res.data?.data || []);
//       } else {
//         res = await axiosClient.get("/contacts", {
//           params: { tab: "all", page: 1, pageSize: 1000 },
//         });
//         setContacts(res.data?.data?.items || []);
//       }
//     } catch {
//       toast.error("Failed to load contacts");
//     }
//   };

//   const applySearchFilter = () => {
//     const result = contacts.filter(
//       c =>
//         c.name?.toLowerCase().includes(search.toLowerCase()) ||
//         getPhone(c).includes(search)
//     );
//     setFilteredContacts(result);
//   };

//   const toggleContact = id => {
//     setSelectedIds(prev =>
//       prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
//     );
//   };

//   const toggleSelectAll = () => {
//     const filteredIds = filteredContacts.map(c => c.id);
//     const allSelected = filteredIds.every(id => selectedIds.includes(id));
//     setSelectedIds(prev =>
//       allSelected
//         ? prev.filter(id => !filteredIds.includes(id))
//         : [...new Set([...prev, ...filteredIds])]
//     );
//   };

//   const handleFileUpload = e => {
//     const file = e.target.files[0];
//     if (!file) return;

//     Papa.parse(file, {
//       header: true,
//       skipEmptyLines: true,
//       complete: function (results) {
//         const headers = Object.keys(results.data[0] || {});
//         setParsedCSV(results.data);
//         setCsvHeaders(headers);
//         setShowFieldMapModal(true);
//       },
//       error: function () {
//         toast.error("CSV Parsing Failed");
//       },
//     });
//   };

//   useEffect(() => {
//     if (csvHeaders.length > 0) {
//       const suggestions = {
//         name: ["name", "full name", "contact name"],
//         phone: ["phone", "mobile", "number", "whatsapp"],
//       };
//       const bestMatch = fieldOptions =>
//         csvHeaders.find(h =>
//           fieldOptions.some(option =>
//             h.toLowerCase().includes(option.toLowerCase())
//           )
//         ) || "";
//       setFieldMapping({
//         name: bestMatch(suggestions.name),
//         phone: bestMatch(suggestions.phone),
//       });
//     }
//   }, [csvHeaders]);

//   const applyFieldMapping = async () => {
//     const mapped = parsedCSV
//       .filter(row => row[fieldMapping.name] && row[fieldMapping.phone])
//       .map(row => ({
//         id: crypto.randomUUID(),
//         name: row[fieldMapping.name],
//         phone: row[fieldMapping.phone],
//         tags: selectedTagId
//           ? [
//               {
//                 tagId: selectedTagId,
//                 tagName: allTags.find(t => t.id === selectedTagId)?.name || "",
//               },
//             ]
//           : [],
//       }));

//     setContacts(prev => [...prev, ...mapped]);
//     setSelectedIds(prev => [...new Set([...prev, ...mapped.map(c => c.id)])]);
//     setImportedCount(mapped.length);
//     setShowFieldMapModal(false);
//     toast.success(`${mapped.length} contacts imported.`);

//     setTimeout(() => {
//       if (importedRef.current) {
//         importedRef.current.scrollIntoView({ behavior: "smooth" });
//       }
//     }, 200);

//     if (saveToDb) {
//       try {
//         setIsImporting(true);
//         await axiosClient.post("/contacts/bulk-import", mapped);
//         toast.success("Contacts also saved to your CRM.");
//       } catch {
//         toast.error("Saving to CRM failed.");
//       } finally {
//         setIsImporting(false);
//       }
//     }
//   };

//   const assignContacts = async () => {
//     if (!campaign || !campaign.id) {
//       toast.error("Campaign not ready. Please try again.");
//       return;
//     }
//     if (selectedIds.length === 0) {
//       toast.warn("Please select at least one contact");
//       return;
//     }

//     const validIds = selectedIds.filter(id =>
//       contacts.find(c => c.id === id && getPhone(c).trim() !== "")
//     );

//     if (validIds.length === 0) {
//       toast.warn("No selected contacts have valid phone numbers.");
//       return;
//     }

//     try {
//       const payload = { contactIds: validIds };
//       await axiosClient.post(
//         `/campaign/${campaign.id}/assign-contacts`,
//         payload
//       );
//       toast.success("Contacts assigned to campaign");
//     } catch (err) {
//       const message =
//         err.response?.data?.message ||
//         "Something went wrong during assignment.";
//       toast.error(message);
//     }
//   };

//   const allVisibleSelected = filteredContacts.every(c =>
//     selectedIds.includes(c.id)
//   );

//   return (
//     <div className="max-w-7xl mx-auto px-4 py-6">
//       <h1 className="text-2xl font-bold text-purple-600 mb-6 flex items-center gap-2">
//         🎯 Assign Contacts to Campaign
//       </h1>

//       <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6">
//         <input
//           className="border p-2 rounded-md w-full sm:w-1/3"
//           type="text"
//           placeholder="Search by name or phone..."
//           value={search}
//           onChange={e => setSearch(e.target.value)}
//         />
//         <TagFilterDropdown
//           selectedTags={tags}
//           onChange={setTags}
//           category="All"
//         />
//         <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-auto">
//           + Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={handleFileUpload}
//             className="hidden"
//           />
//         </label>
//       </div>

//       <div
//         className="bg-white rounded-xl shadow-sm overflow-x-auto"
//         ref={importedRef}
//       >
//         <table className="min-w-full text-sm">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               <th className="px-4 py-2 text-center">
//                 <input
//                   type="checkbox"
//                   checked={allVisibleSelected}
//                   onChange={toggleSelectAll}
//                 />
//               </th>
//               <th className="px-4 py-2 text-left">Name</th>
//               <th className="px-4 py-2 text-left">Phone</th>
//               <th className="px-4 py-2 text-left">Tags</th>
//               <th className="px-4 py-2 text-left">Status</th>
//             </tr>
//           </thead>
//           <tbody>
//             {filteredContacts.map(contact => (
//               <tr key={contact.id} className="border-t hover:bg-gray-50">
//                 <td className="px-4 py-2 text-center">
//                   <input
//                     type="checkbox"
//                     checked={selectedIds.includes(contact.id)}
//                     onChange={() => toggleContact(contact.id)}
//                   />
//                 </td>
//                 <td className="px-4 py-2">{contact.name || "Unnamed"}</td>
//                 <td className="px-4 py-2">{getPhone(contact) || "—"}</td>
//                 <td className="px-4 py-2">
//                   <div className="flex flex-wrap gap-1">
//                     {(contact.tags || contact.contactTags || []).map(tag => (
//                       <span
//                         key={tag.tagId || tag.id}
//                         className="px-2 py-0.5 text-xs rounded-full"
//                         style={{
//                           backgroundColor: tag.colorHex || "#E5E7EB",
//                           color: "#000",
//                         }}
//                       >
//                         {tag.tagName || tag.name}
//                       </span>
//                     ))}
//                   </div>
//                 </td>
//                 <td className="px-4 py-2">
//                   {getPhone(contact).trim() !== "" ? "✅ Valid" : "⚠️ No Phone"}
//                 </td>
//               </tr>
//             ))}
//           </tbody>
//         </table>
//       </div>

//       <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-600">
//         <div>
//           Selected: {selectedIds.length} / WhatsApp-ready:{" "}
//           {
//             filteredContacts.filter(
//               c => selectedIds.includes(c.id) && getPhone(c).trim() !== ""
//             ).length
//           }
//         </div>
//         {importedCount > 0 && (
//           <div className="text-green-600">
//             ✔ Imported: {importedCount} contact(s)
//           </div>
//         )}
//       </div>

//       {/* ❌ Preview removed */}

//       <div className="mt-6 flex justify-end">
//         <button
//           onClick={assignContacts}
//           disabled={false}
//           className="px-6 py-3 rounded-lg transition bg-purple-600 text-white hover:bg-purple-700"
//         >
//           Assign to Campaign
//         </button>
//       </div>

//       <Modal
//         isOpen={showFieldMapModal}
//         onRequestClose={() => setShowFieldMapModal(false)}
//         className="bg-white rounded-lg shadow-lg max-w-xl mx-auto mt-20 p-6"
//         overlayClassName="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50"
//       >
//         <h2 className="text-lg font-bold mb-4">🧩 Map CSV Fields</h2>
//         <div className="space-y-4">
//           {["name", "phone"].map(field => (
//             <div key={field}>
//               <label className="block text-sm font-medium mb-1 capitalize">
//                 {field}
//               </label>
//               <select
//                 className="border px-3 py-2 rounded w-full"
//                 value={fieldMapping[field]}
//                 onChange={e =>
//                   setFieldMapping(prev => ({
//                     ...prev,
//                     [field]: e.target.value,
//                   }))
//                 }
//               >
//                 <option value="">-- Select CSV column --</option>
//                 {csvHeaders.map(header => (
//                   <option key={header} value={header}>
//                     {header}
//                   </option>
//                 ))}
//               </select>
//             </div>
//           ))}
//           <div>
//             <label className="block text-sm font-medium mb-1">
//               Apply Tag to All
//             </label>
//             <select
//               className="border px-3 py-2 rounded w-full"
//               value={selectedTagId || ""}
//               onChange={e => setSelectedTagId(e.target.value)}
//             >
//               <option value="">-- None --</option>
//               {Array.isArray(allTags) &&
//                 allTags.map(tag => (
//                   <option key={tag.id} value={tag.id}>
//                     {tag.name}
//                   </option>
//                 ))}
//             </select>
//           </div>
//         </div>

//         <div className="mt-4">
//           <label className="inline-flex items-center">
//             <input
//               type="checkbox"
//               className="mr-2"
//               checked={saveToDb}
//               onChange={e => setSaveToDb(e.target.checked)}
//             />
//             Also save these contacts to your CRM
//           </label>
//         </div>

//         <div className="mt-6 flex justify-end gap-3">
//           <button
//             className="text-gray-600 hover:underline"
//             onClick={() => setShowFieldMapModal(false)}
//           >
//             Cancel
//           </button>
//           <button
//             className="bg-purple-600 text-white px-4 py-2 rounded-md"
//             onClick={applyFieldMapping}
//           >
//             Import & Apply
//           </button>
//         </div>
//       </Modal>
//     </div>
//   );
// }
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignBuilderPage.jsx 
====================================================== 
 
// 📄 src/pages/campaigns/CampaignBuilderPage.jsx
import React, { useEffect, useMemo, useState } from "react";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
import { useNavigate } from "react-router-dom";
import { useAuth } from "../auth/context/pld_AuthContext";

// === Adjust this if your API route differs ===
const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

const isGuid = v =>
  !!v &&
  /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
    v
  );

// Header kind helpers (frontend-only)
const HK = Object.freeze({
  None: "none",
  Text: "text",
  Image: "image",
  Video: "video",
  Document: "document",
});
const isMediaHeader = hk =>
  hk === HK.Image || hk === HK.Video || hk === HK.Document;
const mediaLabel = hk =>
  hk === HK.Image
    ? "Image URL"
    : hk === HK.Video
    ? "Video URL"
    : "Document URL";

function CampaignBuilderPage() {
  const { businessId: ctxBusinessId } = useAuth();

  const [templates, setTemplates] = useState([]);
  const [loadingTemplates, setLoadingTemplates] = useState(false);
  const [syncing, setSyncing] = useState(false);

  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [templateParams, setTemplateParams] = useState([]);
  const [buttonParams, setButtonParams] = useState([]);

  // Unified header media url (for Image/Video/Document)
  const [headerMediaUrl, setHeaderMediaUrl] = useState("");

  const [campaignName, setCampaignName] = useState("");

  const [scheduledAt, setScheduledAt] = useState("");
  const [submitting, setSubmitting] = useState(false);

  // Optional Flow
  const [useFlow, setUseFlow] = useState(false);
  const [flows, setFlows] = useState([]);
  const [loadingFlows, setLoadingFlows] = useState(false);
  const [selectedFlowId, setSelectedFlowId] = useState("");

  // Sender selection (from WhatsAppPhoneNumbers)
  const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
  const [selectedSenderId, setSelectedSenderId] = useState("");

  // CSV controls all dynamic personalization (default ON)
  const [useCsvPersonalization, setUseCsvPersonalization] = useState(true);

  const businessId = useMemo(
    () => ctxBusinessId || localStorage.getItem("businessId") || null,
    [ctxBusinessId]
  );
  const hasValidBusiness = isGuid(businessId);

  const createdBy = localStorage.getItem("userId");
  const businessName = localStorage.getItem("businessName") || "Your Business";
  const navigate = useNavigate();

  // Load approved templates when businessId is ready
  useEffect(() => {
    const load = async () => {
      if (!hasValidBusiness) return;
      setLoadingTemplates(true);
      try {
        const res = await axiosClient.get(
          `/templates/${businessId}?status=APPROVED`
        );
        if (res.data?.success) setTemplates(res.data.templates || []);
        else toast.error("❌ Failed to load templates.");
      } catch {
        toast.error("❌ Error loading templates.");
      } finally {
        setLoadingTemplates(false);
      }
    };
    load();
  }, [businessId, hasValidBusiness]);

  // Load flows when "Attach Flow" is toggled
  useEffect(() => {
    if (!useFlow || !hasValidBusiness) return;

    const loadFlows = async () => {
      setLoadingFlows(true);
      try {
        const r = await axiosClient.get(
          `/campaign/list/${businessId}?onlyPublished=true`
        );

        const items = Array.isArray(r.data?.items) ? r.data.items : [];
        const mapped = items
          .map(f => ({
            id: f.id ?? f.Id,
            name: f.flowName ?? f.FlowName,
            isPublished: f.isPublished ?? f.IsPublished ?? true,
          }))
          .filter(x => x.id && x.name);

        setFlows(mapped);
        if (!mapped.length) {
          toast.info(
            "ℹ️ No published flows found. You can still create a campaign without a flow."
          );
        }
      } catch {
        toast.error("❌ Error loading flows.");
        setFlows([]);
      } finally {
        setLoadingFlows(false);
      }
    };

    loadFlows();
  }, [useFlow, hasValidBusiness, businessId]);

  // Load available senders (WhatsAppPhoneNumbers) for this business
  useEffect(() => {
    if (!hasValidBusiness) return;
    (async () => {
      try {
        const r = await axiosClient.get(
          `/WhatsAppSettings/senders/${businessId}`
        );

        const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
        const normalized = raw.map(x => {
          const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
          const phoneNumberId = x.phoneNumberId;
          const whatsAppNumber =
            x.whatsAppBusinessNumber ??
            x.whatsappBusinessNumber ??
            x.displayNumber ??
            x.phoneNumber ??
            x.phoneNumberId;

          const id = x.id ?? `${provider}|${phoneNumberId}`;
          return { id, provider, phoneNumberId, whatsAppNumber };
        });

        setSenders(normalized);
        // If exactly one sender, preselect it
        if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
      } catch {
        toast.error("❌ Failed to load WhatsApp senders.");
        setSenders([]);
        setSelectedSenderId("");
      }
    })();
  }, [hasValidBusiness, businessId]);

  // Sync Templates
  const handleSyncTemplates = async () => {
    if (!hasValidBusiness) {
      toast.warn("⚠️ Business context missing. Please re-login.");
      return;
    }
    setSyncing(true);
    try {
      const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
      const ok =
        res?.data?.success === true ||
        res?.status === 200 ||
        res?.status === 204;
      if (ok) {
        toast.success("✅ Templates synced. Refreshing list…");
        setLoadingTemplates(true);
        try {
          const r2 = await axiosClient.get(
            `/templates/${businessId}?status=APPROVED`
          );
          if (r2.data?.success) setTemplates(r2.data.templates || []);
        } finally {
          setLoadingTemplates(false);
        }
      } else {
        toast.error("❌ Sync failed.");
      }
    } catch {
      toast.error("❌ Error syncing templates.");
    } finally {
      setSyncing(false);
    }
  };

  const normalizeHeaderKind = t => {
    // Prefer new backend fields; fallback to image-only legacy flag
    const raw = (t.headerKind || "").toString().toLowerCase();
    if (
      raw === HK.Image ||
      raw === HK.Video ||
      raw === HK.Document ||
      raw === HK.Text ||
      raw === HK.None
    ) {
      return raw;
    }
    // Legacy: only image known
    return t.hasImageHeader ? HK.Image : HK.None;
  };

  const handleTemplateSelect = async name => {
    if (!name) {
      setSelectedTemplate(null);
      setTemplateParams([]);
      setButtonParams([]);
      setHeaderMediaUrl("");
      return;
    }
    try {
      if (!hasValidBusiness) {
        toast.error("Invalid or missing Business ID. Please re-login.");
        return;
      }
      const res = await axiosClient.get(
        `/templates/${businessId}/${encodeURIComponent(name)}`
      );
      const t = res.data;
      if (!t?.name) {
        toast.error("❌ Could not load template details.");
        return;
      }

      let parsedButtons = [];
      try {
        parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
      } catch {
        parsedButtons = [];
      }

      const hk = normalizeHeaderKind(t);
      const requiresHeaderMediaUrl =
        t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

      const normalized = {
        name: t.name,
        language: t.language, // <-- we will send this at creation
        body: t.body || "",
        headerKind: hk, // "image" | "video" | "document" | "text" | "none"
        requiresHeaderMediaUrl,
        // Legacy fields kept (not used for logic anymore)
        hasImageHeader: !!t.hasImageHeader,
        parametersCount: t.placeholderCount || 0, // total placeholders in body (server-derived)
        buttonParams: parsedButtons,
      };

      setSelectedTemplate(normalized);
      setTemplateParams(Array(normalized.parametersCount).fill(""));

      // Build client-side slots only to render the preview (actual dynamic values come from CSV later)
      const dynSlots =
        normalized.buttonParams?.map(btn => {
          const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
          const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
          const isDynamic =
            ["url", "copy_code", "flow"].includes(subtype) ||
            originalUrl.includes("{{1}}");
          return isDynamic ? "" : null;
        }) || [];
      setButtonParams(dynSlots);
      setHeaderMediaUrl("");
    } catch {
      toast.error("❌ Error loading template details.");
    }
  };

  // Create Campaign
  const handleCreateCampaign = async () => {
    if (!hasValidBusiness) {
      toast.error("Invalid or missing Business ID. Please re-login.");
      return;
    }
    if (!campaignName || !selectedTemplate) {
      toast.warn("⚠️ Please fill campaign name and choose a template.");
      return;
    }
    // Only require body params when NOT using CSV
    if (!useCsvPersonalization && templateParams.some(p => p === "")) {
      toast.warn("⚠️ Please fill all template parameters or enable CSV.");
      return;
    }
    if (useFlow && !selectedFlowId) {
      toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
      return;
    }

    // Resolve selected sender (required)
    const selectedSender = senders.find(s => s.id === selectedSenderId);
    if (!selectedSender || !selectedSender.phoneNumberId) {
      toast.warn("⚠️ Please choose a Sender (number).");
      return;
    }

    // Header media rules (campaign-level)
    const hk = selectedTemplate?.headerKind || HK.None;
    if (isMediaHeader(hk) && !headerMediaUrl) {
      toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
      return;
    }

    setSubmitting(true);

    // Keep static button values; leave dynamic button values empty (CSV will provide later)
    const buttonPayload =
      selectedTemplate.buttonParams?.map((btn, idx) => {
        const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
        const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
        const isDynamic =
          ["url", "copy_code", "flow"].includes(subtype) ||
          originalUrl.includes("{{1}}");

        return {
          text: btn?.Text || btn?.text || "Button",
          type: btn?.Type || btn?.type || "",
          value: isDynamic
            ? useCsvPersonalization
              ? ""
              : buttonParams[idx] || ""
            : originalUrl,
          position: idx + 1,
        };
      }) || [];

    // For now (until backend supports video/document),
    // keep campaignType = "image" only if image header, else "text"
    const campaignType = hk === HK.Image ? "image" : "text";

    const payload = {
      name: campaignName,
      messageTemplate: selectedTemplate.name, // template name
      templateId: selectedTemplate.name, // legacy/alias
      templateLanguage: selectedTemplate.language, // ✅ critical for provider payloads
      buttonParams: buttonPayload,

      campaignType,
      // Back-compat: old backend expects imageUrl when campaignType === "image"
      imageUrl: hk === HK.Image ? headerMediaUrl : null,

      // Future-friendly: always send headerMediaUrl + headerKind
      headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
      headerKind: hk, // "image" | "video" | "document" | "text" | "none"

      scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
      createdBy,
      businessId,

      // ✅ If CSV is used, do not send per-recipient params here
      templateParameters: useCsvPersonalization ? [] : templateParams,
      useCsvPersonalization, // ✅ tell backend who owns personalization

      // Flow (optional)
      ctaFlowConfigId: useFlow ? selectedFlowId : null,

      // Sender
      provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
      phoneNumberId: selectedSender.phoneNumberId,
    };

    try {
      const res = await axiosClient.post(
        "/campaign/create-text-campaign",
        payload
      );
      if (res.data?.success && res.data?.campaignId) {
        toast.success("✅ Campaign created successfully.");
        navigate(
          `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
        );
      } else {
        toast.error("❌ Failed to create campaign.");
      }
    } catch (err) {
      const errorMsg =
        err?.response?.data?.message || "❌ Error creating campaign.";
      toast.error(errorMsg);
    } finally {
      setSubmitting(false);
    }
  };

  const templateOptions = useMemo(
    () =>
      templates.map(tpl => ({
        key: `${tpl.name}-${tpl.language}`,
        label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
        value: tpl.name,
      })),
    [templates]
  );

  return (
    <div className="mx-auto max-w-5xl px-4 py-6">
      {/* Header */}
      <div className="mb-4 flex items-end justify-between">
        <div>
          <h1 className="text-xl font-bold text-gray-900">
            Create WhatsApp Campaign
          </h1>
          <p className="mt-0.5 text-xs text-gray-500">
            Pick a template, preview, then schedule.
          </p>
        </div>

        {/* Sync Templates */}
        <div className="flex items-center gap-2">
          <button
            type="button"
            onClick={handleSyncTemplates}
            disabled={!hasValidBusiness || syncing}
            className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
              !hasValidBusiness || syncing
                ? "bg-gray-400"
                : "bg-indigo-600 hover:bg-indigo-700"
            }`}
            title={
              !hasValidBusiness ? "Login required to sync templates" : undefined
            }
          >
            {syncing ? "Syncing…" : "Sync Templates"}
          </button>
        </div>
      </div>

      {/* Business guard */}
      {!hasValidBusiness && (
        <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
          <div className="flex items-start gap-3">
            <span className="mt-0.5">⚠️</span>
            <div>
              <p className="font-medium">
                We’re loading your business context…
              </p>
              <p className="mt-1 text-amber-800/90">
                If this doesn’t resolve in a moment, please re-login so we can
                attach your Business ID to requests.
              </p>
              <div className="mt-3">
                <button
                  onClick={() => navigate("/login")}
                  className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
                  type="button"
                >
                  Go to Login
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Content grid */}
      <div className="grid gap-4 md:grid-cols-[1fr_320px]">
        {/* Left column – form */}
        <div className="space-y-4">
          {/* Campaign meta */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <div className="space-y-3 text-sm">
              <div>
                <label className="mb-1 block font-medium text-gray-700">
                  Campaign name
                </label>
                <input
                  type="text"
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                  placeholder="e.g. Diwali Blast – Returning Customers"
                  value={campaignName}
                  onChange={e => setCampaignName(e.target.value)}
                  disabled={!hasValidBusiness}
                />
              </div>

              <div>
                <label className="mb-1 block font-medium text-gray-700">
                  Template <span className="text-gray-400">(approved)</span>
                </label>
                <select
                  disabled={loadingTemplates || !hasValidBusiness}
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
                  onChange={e => handleTemplateSelect(e.target.value)}
                  value={selectedTemplate?.name || ""}
                >
                  <option value="" disabled>
                    {loadingTemplates
                      ? "Loading templates…"
                      : "-- Select Template --"}
                  </option>
                  {templateOptions.map(o => (
                    <option key={o.key} value={o.value}>
                      {o.label}
                    </option>
                  ))}
                </select>
                <p className="mt-1 text-[11px] text-gray-400">
                  Only templates with status{" "}
                  <span className="font-medium">APPROVED</span> are listed.
                </p>
              </div>
            </div>
          </section>

          {/* Flow (optional) */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-sm font-semibold text-gray-800">
              Flow (optional)
            </h2>
            <div className="flex items-center gap-3 text-sm">
              <input
                id="useFlow"
                type="checkbox"
                checked={useFlow}
                onChange={e => {
                  setUseFlow(e.target.checked);
                  if (!e.target.checked) setSelectedFlowId("");
                }}
                disabled={!hasValidBusiness}
              />
              <label htmlFor="useFlow" className="text-gray-700">
                Attach a Visual Flow to this campaign
              </label>
            </div>

            {useFlow && (
              <div className="mt-3">
                <label className="mb-1 block text-sm font-medium text-gray-700">
                  Select Flow
                </label>
                <select
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
                  disabled={loadingFlows || !hasValidBusiness}
                  value={selectedFlowId}
                  onChange={e => setSelectedFlowId(e.target.value)}
                >
                  <option value="">
                    {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
                  </option>
                  {flows.map(f => (
                    <option key={f.id} value={f.id}>
                      {f.name}
                    </option>
                  ))}
                </select>
                <p className="mt-1 text-[11px] text-gray-400">
                  If attached, the campaign will <strong>start</strong> from the
                  flow’s entry step. The backend will align the starting
                  template automatically.
                </p>
              </div>
            )}
          </section>

          {/* Personalization */}
          {selectedTemplate && (
            <section className="rounded-xl border bg-white p-4 shadow-sm">
              <h2 className="mb-1 text-sm font-semibold text-gray-800">
                Personalization
              </h2>

              {/* CSV toggle */}
              <div className="mb-3 flex items-center gap-2 text-xs text-gray-600">
                <input
                  id="useCsv"
                  type="checkbox"
                  checked={useCsvPersonalization}
                  onChange={e => setUseCsvPersonalization(e.target.checked)}
                />
                <label htmlFor="useCsv">
                  I’ll upload a CSV later for personalization (recommended for
                  bulk)
                </label>
              </div>

              {/* Body params — show only if NOT using CSV */}
              {!useCsvPersonalization && templateParams.length > 0 && (
                <div className="mb-4 space-y-2 text-sm">
                  <h3 className="text-xs font-semibold text-gray-700">
                    Template parameters
                  </h3>
                  {templateParams.map((val, idx) => (
                    <div key={`tp-${idx}`} className="flex items-center gap-2">
                      <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
                        idx + 1
                      }}}`}</div>
                      <input
                        className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                        placeholder={`Value for {{${idx + 1}}}`}
                        value={val}
                        onChange={e => {
                          const next = [...templateParams];
                          next[idx] = e.target.value;
                          setTemplateParams(next);
                        }}
                        disabled={!hasValidBusiness}
                      />
                    </div>
                  ))}
                </div>
              )}

              {/* Button params — show only if NOT using CSV */}
              {!useCsvPersonalization &&
                selectedTemplate?.buttonParams?.length > 0 && (
                  <div className="space-y-2 text-sm">
                    <h3 className="text-xs font-semibold text-gray-700">
                      Button parameters
                    </h3>
                    {selectedTemplate.buttonParams.map((btn, idx) => {
                      const originalUrl =
                        btn?.ParameterValue || btn?.parameterValue || "";
                      const subtype = (
                        btn?.SubType ||
                        btn?.subType ||
                        ""
                      ).toLowerCase();
                      const dynamic =
                        ["url", "copy_code", "flow"].includes(subtype) ||
                        originalUrl.includes("{{1}}");
                      const placeholders = {
                        url: "Enter Redirect URL",
                        copy_code: "Enter Coupon Code",
                        flow: "Enter Flow ID",
                      };
                      return (
                        <div key={`bp-${idx}`}>
                          <label className="mb-1 block text-[11px] font-medium text-gray-500">
                            {btn?.Text || btn?.text || "Button"} ·{" "}
                            {subtype ? subtype.toUpperCase() : "STATIC"}
                          </label>
                          {dynamic ? (
                            <input
                              className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                              placeholder={
                                placeholders[subtype] || "Enter value"
                              }
                              value={buttonParams[idx] || ""}
                              onChange={e => {
                                const next = [...buttonParams];
                                next[idx] = e.target.value;
                                setButtonParams(next);
                              }}
                              disabled={!hasValidBusiness}
                            />
                          ) : (
                            <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
                              Static value: {originalUrl || "N/A"}
                            </p>
                          )}
                        </div>
                      );
                    })}
                  </div>
                )}
            </section>
          )}

          {/* Media + sender + schedule */}
          <section className="rounded-xl border bg-white p-4 shadow-sm">
            <h2 className="mb-3 text-sm font-semibold text-gray-800">
              Delivery
            </h2>

            {/* Sender selection (Provider auto-derived) */}
            <div className="mb-3 text-sm">
              <label className="mb-1 block font-medium text-gray-700">
                Sender (WhatsApp Number • Provider)
              </label>
              <select
                className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
                disabled={!hasValidBusiness || !senders.length}
                value={selectedSenderId}
                onChange={e => setSelectedSenderId(e.target.value)}
              >
                <option value="" disabled>
                  {senders.length
                    ? "-- Select Sender --"
                    : "No active senders found"}
                </option>
                {senders.map(s => (
                  <option key={s.id} value={s.id}>
                    {s.whatsAppNumber} • {s.provider}
                  </option>
                ))}
              </select>
              <p className="mt-1 text-[11px] text-gray-400">
                Only the number is shown for selection. We’ll save the sender’s
                phoneNumberId and provider.
              </p>
            </div>

            {selectedTemplate?.requiresHeaderMediaUrl && (
              <div className="mb-3 text-sm">
                <label className="mb-1 block font-medium text-gray-700">
                  {mediaLabel(selectedTemplate.headerKind)}
                </label>
                <input
                  type="text"
                  className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                  placeholder="https://…"
                  value={headerMediaUrl}
                  onChange={e => setHeaderMediaUrl(e.target.value)}
                  disabled={!hasValidBusiness}
                />
                <p className="mt-1 text-[11px] text-gray-400">
                  This is set once per campaign (not in CSV). Must be a public
                  HTTPS link.
                </p>
              </div>
            )}

            <div className="text-sm">
              <label className="mb-1 block font-medium text-gray-700">
                Schedule
              </label>
              <input
                type="datetime-local"
                className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
                value={scheduledAt}
                onChange={e => setScheduledAt(e.target.value)}
                disabled={!hasValidBusiness}
              />
              <p className="mt-1 text-[11px] text-gray-400">
                Leave empty to send immediately after assignment.
              </p>
            </div>
          </section>

          {/* Submit */}
          <div className="sticky bottom-3 z-10">
            <button
              onClick={handleCreateCampaign}
              disabled={submitting || !hasValidBusiness}
              className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
                submitting || !hasValidBusiness
                  ? "bg-gray-400"
                  : "bg-green-600 hover:bg-green-700"
              }`}
              title={
                !hasValidBusiness
                  ? "Login required to create a campaign"
                  : undefined
              }
            >
              {submitting ? "Creating…" : "Create Campaign"}
            </button>
          </div>
        </div>

        {/* Right column – sticky preview */}
        <aside className="md:sticky md:top-4">
          <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
            <div className="mb-2 flex items-center justify-between">
              <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
              <span className="text-[11px] text-gray-400">Customer view</span>
            </div>

            {hasValidBusiness ? (
              selectedTemplate ? (
                <div className="flex justify-center">
                  <PhoneWhatsAppPreview
                    businessName={businessName}
                    templateBody={selectedTemplate.body}
                    parameters={useCsvPersonalization ? [] : templateParams}
                    // For now, only image preview is supported; others will come later.
                    imageUrl={
                      selectedTemplate.headerKind === HK.Image
                        ? headerMediaUrl
                        : ""
                    }
                    buttonParams={(selectedTemplate.buttonParams || []).map(
                      (btn, idx) => {
                        const originalUrl =
                          btn?.ParameterValue || btn?.parameterValue || "";
                        const subtype = (
                          btn?.SubType ||
                          btn?.subType ||
                          ""
                        ).toLowerCase();
                        const dynamic =
                          ["url", "copy_code", "flow"].includes(subtype) ||
                          originalUrl.includes("{{1}}");
                        return {
                          text: btn?.Text || btn?.text || "Button",
                          subType: btn?.SubType || btn?.subType || "",
                          type: btn?.Type || btn?.type || "",
                          value: dynamic
                            ? "" // CSV will provide dynamic at send-time
                            : originalUrl,
                        };
                      }
                    )}
                    width="clamp(330px, 42vw, 410px)"
                  />
                </div>
              ) : (
                <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
                  Select a template to preview it here
                </div>
              )
            ) : (
              <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
                Waiting for Business ID…
              </div>
            )}
          </div>
        </aside>
      </div>
    </div>
  );
}

export default CampaignBuilderPage;

// // 📄 src/pages/campaigns/CampaignBuilderPage.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
// import { useNavigate } from "react-router-dom";
// import { useAuth } from "../auth/context/pld_AuthContext"; // adjust if your path differs

// // === Adjust this if your API route differs ===
// const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

// const isGuid = v =>
//   !!v &&
//   /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
//     v
//   );

// // Header kind helpers (frontend-only)
// const HK = Object.freeze({
//   None: "none",
//   Text: "text",
//   Image: "image",
//   Video: "video",
//   Document: "document",
// });
// const isMediaHeader = hk =>
//   hk === HK.Image || hk === HK.Video || hk === HK.Document;
// const mediaLabel = hk =>
//   hk === HK.Image
//     ? "Image URL"
//     : hk === HK.Video
//     ? "Video URL"
//     : "Document URL";

// function CampaignBuilderPage() {
//   const { businessId: ctxBusinessId } = useAuth();

//   const [templates, setTemplates] = useState([]);
//   const [loadingTemplates, setLoadingTemplates] = useState(false);
//   const [syncing, setSyncing] = useState(false);

//   const [selectedTemplate, setSelectedTemplate] = useState(null);
//   const [templateParams, setTemplateParams] = useState([]);
//   const [buttonParams, setButtonParams] = useState([]);

//   // 🆕 unified header media url (for Image/Video/Document)
//   const [headerMediaUrl, setHeaderMediaUrl] = useState("");

//   const [campaignName, setCampaignName] = useState("");

//   const [scheduledAt, setScheduledAt] = useState("");
//   const [submitting, setSubmitting] = useState(false);

//   // 🆕 Flow association state
//   const [useFlow, setUseFlow] = useState(false);
//   const [flows, setFlows] = useState([]);
//   const [loadingFlows, setLoadingFlows] = useState(false);
//   const [selectedFlowId, setSelectedFlowId] = useState("");

//   // 🆕 Sender selection (from WhatsAppPhoneNumbers)
//   const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
//   const [selectedSenderId, setSelectedSenderId] = useState("");

//   // 🆕 Use CSV for all dynamic personalization (default ON)
//   const [useCsvPersonalization, setUseCsvPersonalization] = useState(true);

//   const businessId = useMemo(
//     () => ctxBusinessId || localStorage.getItem("businessId") || null,
//     [ctxBusinessId]
//   );
//   const hasValidBusiness = isGuid(businessId);

//   const createdBy = localStorage.getItem("userId");
//   const businessName = localStorage.getItem("businessName") || "Your Business";
//   const navigate = useNavigate();

//   // Load approved templates when businessId is ready
//   useEffect(() => {
//     const load = async () => {
//       if (!hasValidBusiness) return;
//       setLoadingTemplates(true);
//       try {
//         const res = await axiosClient.get(
//           `/templates/${businessId}?status=APPROVED`
//         );
//         if (res.data?.success) setTemplates(res.data.templates || []);
//         else toast.error("❌ Failed to load templates.");
//       } catch {
//         toast.error("❌ Error loading templates.");
//       } finally {
//         setLoadingTemplates(false);
//       }
//     };
//     load();
//   }, [businessId, hasValidBusiness]);

//   // 🔁 Load flows when "Attach Flow" is toggled
//   useEffect(() => {
//     if (!useFlow || !hasValidBusiness) return;

//     const loadFlows = async () => {
//       setLoadingFlows(true);
//       try {
//         const r = await axiosClient.get(
//           `/campaign/list/${businessId}?onlyPublished=true`
//         );

//         const items = Array.isArray(r.data?.items) ? r.data.items : [];
//         const mapped = items
//           .map(f => ({
//             id: f.id ?? f.Id,
//             name: f.flowName ?? f.FlowName,
//             isPublished: f.isPublished ?? f.IsPublished ?? true,
//           }))
//           .filter(x => x.id && x.name);

//         setFlows(mapped);
//         if (!mapped.length) {
//           toast.info(
//             "ℹ️ No published flows found. You can still create a campaign without a flow."
//           );
//         }
//       } catch {
//         toast.error("❌ Error loading flows.");
//         setFlows([]);
//       } finally {
//         setLoadingFlows(false);
//       }
//     };

//     loadFlows();
//   }, [useFlow, hasValidBusiness, businessId]);

//   // 🆕 Load available senders (WhatsAppPhoneNumbers) for this business
//   useEffect(() => {
//     if (!hasValidBusiness) return;
//     (async () => {
//       try {
//         const r = await axiosClient.get(
//           `/WhatsAppSettings/senders/${businessId}`
//         );

//         const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
//         const normalized = raw.map(x => {
//           const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
//           const phoneNumberId = x.phoneNumberId;
//           const whatsAppNumber =
//             x.whatsAppBusinessNumber ??
//             x.whatsappBusinessNumber ??
//             x.displayNumber ??
//             x.phoneNumber ??
//             x.phoneNumberId;

//           const id = x.id ?? `${provider}|${phoneNumberId}`;
//           return { id, provider, phoneNumberId, whatsAppNumber };
//         });

//         setSenders(normalized);
//         if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
//       } catch {
//         toast.error("❌ Failed to load WhatsApp senders.");
//         setSenders([]);
//         setSelectedSenderId("");
//       }
//     })();
//   }, [hasValidBusiness, businessId]);

//   // 🔄 Sync Templates
//   const handleSyncTemplates = async () => {
//     if (!hasValidBusiness) {
//       toast.warn("⚠️ Business context missing. Please re-login.");
//       return;
//     }
//     setSyncing(true);
//     try {
//       const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
//       const ok =
//         res?.data?.success === true ||
//         res?.status === 200 ||
//         res?.status === 204;
//       if (ok) {
//         toast.success("✅ Templates synced. Refreshing list…");
//         setLoadingTemplates(true);
//         try {
//           const r2 = await axiosClient.get(
//             `/templates/${businessId}?status=APPROVED`
//           );
//           if (r2.data?.success) setTemplates(r2.data.templates || []);
//         } finally {
//           setLoadingTemplates(false);
//         }
//       } else {
//         toast.error("❌ Sync failed.");
//       }
//     } catch (e) {
//       toast.error("❌ Error syncing templates.");
//     } finally {
//       setSyncing(false);
//     }
//   };

//   const normalizeHeaderKind = t => {
//     // Prefer new backend fields; fallback to image-only legacy flag
//     const raw = (t.headerKind || "").toString().toLowerCase();
//     if (
//       raw === HK.Image ||
//       raw === HK.Video ||
//       raw === HK.Document ||
//       raw === HK.Text ||
//       raw === HK.None
//     ) {
//       return raw;
//     }
//     // Legacy: only image known
//     return t.hasImageHeader ? HK.Image : HK.None;
//   };

//   const handleTemplateSelect = async name => {
//     if (!name) {
//       setSelectedTemplate(null);
//       setTemplateParams([]);
//       setButtonParams([]);
//       setHeaderMediaUrl("");
//       return;
//     }
//     try {
//       if (!hasValidBusiness) {
//         toast.error("Invalid or missing Business ID. Please re-login.");
//         return;
//       }
//       const res = await axiosClient.get(
//         `/templates/${businessId}/${encodeURIComponent(name)}`
//       );
//       const t = res.data;
//       if (!t?.name) {
//         toast.error("❌ Could not load template details.");
//         return;
//       }

//       let parsedButtons = [];
//       try {
//         parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
//       } catch {
//         parsedButtons = [];
//       }

//       const hk = normalizeHeaderKind(t);
//       const requiresHeaderMediaUrl =
//         t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

//       const normalized = {
//         name: t.name,
//         language: t.language,
//         body: t.body || "",
//         headerKind: hk, // "image" | "video" | "document" | "text" | "none"
//         requiresHeaderMediaUrl,
//         // Legacy fields kept (not used for logic anymore)
//         hasImageHeader: !!t.hasImageHeader,
//         parametersCount: t.placeholderCount || 0, // legacy: total placeholder count; we’ll refine later
//         buttonParams: parsedButtons,
//       };

//       setSelectedTemplate(normalized);
//       setTemplateParams(Array(normalized.parametersCount).fill(""));

//       const dynSlots =
//         normalized.buttonParams?.map(btn => {
//           const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//           const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//           const isDynamic =
//             ["url", "copy_code", "flow"].includes(subtype) ||
//             originalUrl.includes("{{1}}");
//           return isDynamic ? "" : null;
//         }) || [];
//       setButtonParams(dynSlots);
//       setHeaderMediaUrl("");
//     } catch {
//       toast.error("❌ Error loading template details.");
//     }
//   };

//   // 📄 Create Campaign
//   const handleCreateCampaign = async () => {
//     if (!hasValidBusiness) {
//       toast.error("Invalid or missing Business ID. Please re-login.");
//       return;
//     }
//     if (!campaignName || !selectedTemplate) {
//       toast.warn("⚠️ Please fill campaign name and choose a template.");
//       return;
//     }
//     // Require body params ONLY when not using CSV
//     if (!useCsvPersonalization && templateParams.some(p => p === "")) {
//       toast.warn("⚠️ Please fill all template parameters.");
//       return;
//     }
//     if (useFlow && !selectedFlowId) {
//       toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
//       return;
//     }

//     // 🧲 Resolve selected sender (required)
//     const selectedSender = senders.find(s => s.id === selectedSenderId);
//     if (!selectedSender || !selectedSender.phoneNumberId) {
//       toast.warn("⚠️ Please choose a Sender (number).");
//       return;
//     }

//     // Header media rules (campaign-level)
//     const hk = selectedTemplate?.headerKind || HK.None;
//     if (isMediaHeader(hk) && !headerMediaUrl) {
//       toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
//       return;
//     }

//     setSubmitting(true);

//     // Keep static button values; leave dynamic button values empty (CSV will provide)
//     const buttonPayload =
//       selectedTemplate.buttonParams?.map((btn, idx) => {
//         const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//         const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//         const isDynamic =
//           ["url", "copy_code", "flow"].includes(subtype) ||
//           originalUrl.includes("{{1}}");

//         return {
//           text: btn?.Text || btn?.text || "Button",
//           type: btn?.Type || btn?.type || "",
//           value: isDynamic ? "" : originalUrl,
//           position: idx + 1,
//         };
//       }) || [];

//     // For now (until backend supports video/document),
//     // keep campaignType = "image" only if image header, else "text"
//     const campaignType = hk === HK.Image ? "image" : "text";

//     const payload = {
//       name: campaignName,
//       messageTemplate: selectedTemplate.name,
//       templateId: selectedTemplate.name,
//       buttonParams: buttonPayload,

//       campaignType,
//       // Back-compat: old backend expects imageUrl when campaignType === "image"
//       imageUrl: hk === HK.Image ? headerMediaUrl : null,

//       // Future-friendly: always send headerMediaUrl + headerKind
//       headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
//       headerKind: hk, // "image" | "video" | "document" | "text" | "none"

//       scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
//       createdBy,
//       businessId,

//       // ✅ If CSV is used, do not send per-recipient params here
//       templateParameters: useCsvPersonalization ? [] : templateParams,

//       // Flow (optional)
//       ctaFlowConfigId: useFlow ? selectedFlowId : null,

//       // Sender
//       provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
//       phoneNumberId: selectedSender.phoneNumberId,
//     };

//     try {
//       const res = await axiosClient.post(
//         "/campaign/create-text-campaign",
//         payload
//       );
//       if (res.data?.success && res.data?.campaignId) {
//         toast.success("✅ Campaign created successfully.");
//         navigate(
//           `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
//         );
//       } else {
//         toast.error("❌ Failed to create campaign.");
//       }
//     } catch (err) {
//       const errorMsg =
//         err.response?.data?.message || "❌ Error creating campaign.";
//       toast.error(errorMsg);
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   const templateOptions = useMemo(
//     () =>
//       templates.map(tpl => ({
//         key: `${tpl.name}-${tpl.language}`,
//         label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
//         value: tpl.name,
//       })),
//     [templates]
//   );

//   return (
//     <div className="mx-auto max-w-5xl px-4 py-6">
//       {/* Header */}
//       <div className="mb-4 flex items-end justify-between">
//         <div>
//           <h1 className="text-xl font-bold text-gray-900">
//             Create WhatsApp Campaign
//           </h1>
//           <p className="mt-0.5 text-xs text-gray-500">
//             Pick a template, preview, then schedule.
//           </p>
//         </div>

//         {/* 🔄 Sync Templates action */}
//         <div className="flex items-center gap-2">
//           <button
//             type="button"
//             onClick={handleSyncTemplates}
//             disabled={!hasValidBusiness || syncing}
//             className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
//               !hasValidBusiness || syncing
//                 ? "bg-gray-400"
//                 : "bg-indigo-600 hover:bg-indigo-700"
//             }`}
//             title={
//               !hasValidBusiness ? "Login required to sync templates" : undefined
//             }
//           >
//             {syncing ? "Syncing…" : "Sync Templates"}
//           </button>
//         </div>
//       </div>

//       {/* Friendly fallback if businessId not available */}
//       {!hasValidBusiness && (
//         <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
//           <div className="flex items-start gap-3">
//             <span className="mt-0.5">⚠️</span>
//             <div>
//               <p className="font-medium">
//                 We’re loading your business context…
//               </p>
//               <p className="mt-1 text-amber-800/90">
//                 If this doesn’t resolve in a moment, please re-login so we can
//                 attach your Business ID to requests.
//               </p>
//               <div className="mt-3">
//                 <button
//                   onClick={() => navigate("/login")}
//                   className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
//                   type="button"
//                 >
//                   Go to Login
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Content grid */}
//       <div className="grid gap-4 md:grid-cols-[1fr_320px]">
//         {/* Left column – form */}
//         <div className="space-y-4">
//           {/* Campaign meta */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <div className="space-y-3 text-sm">
//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Campaign name
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="e.g. Diwali Blast – Returning Customers"
//                   value={campaignName}
//                   onChange={e => setCampaignName(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//               </div>

//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Template <span className="text-gray-400">(approved)</span>
//                 </label>
//                 <select
//                   disabled={loadingTemplates || !hasValidBusiness}
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   onChange={e => handleTemplateSelect(e.target.value)}
//                   value={selectedTemplate?.name || ""}
//                 >
//                   <option value="" disabled>
//                     {loadingTemplates
//                       ? "Loading templates…"
//                       : "-- Select Template --"}
//                   </option>
//                   {templateOptions.map(o => (
//                     <option key={o.key} value={o.value}>
//                       {o.label}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   Only templates with status{" "}
//                   <span className="font-medium">APPROVED</span> are listed.
//                 </p>
//               </div>
//             </div>
//           </section>

//           {/* Flow (optional) */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Flow (optional)
//             </h2>
//             <div className="flex items-center gap-3 text-sm">
//               <input
//                 id="useFlow"
//                 type="checkbox"
//                 checked={useFlow}
//                 onChange={e => {
//                   setUseFlow(e.target.checked);
//                   if (!e.target.checked) setSelectedFlowId("");
//                 }}
//                 disabled={!hasValidBusiness}
//               />
//               <label htmlFor="useFlow" className="text-gray-700">
//                 Attach a Visual Flow to this campaign
//               </label>
//             </div>

//             {useFlow && (
//               <div className="mt-3">
//                 <label className="mb-1 block text-sm font-medium text-gray-700">
//                   Select Flow
//                 </label>
//                 <select
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   disabled={loadingFlows || !hasValidBusiness}
//                   value={selectedFlowId}
//                   onChange={e => setSelectedFlowId(e.target.value)}
//                 >
//                   <option value="">
//                     {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
//                   </option>
//                   {flows.map(f => (
//                     <option key={f.id} value={f.id}>
//                       {f.name}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   If attached, the campaign will <strong>start</strong> from the
//                   flow’s entry step. The backend will align the starting
//                   template automatically.
//                 </p>
//               </div>
//             )}
//           </section>

//           {/* Parameters */}
//           {selectedTemplate && (
//             <section className="rounded-xl border bg-white p-4 shadow-sm">
//               <h2 className="mb-1 text-sm font-semibold text-gray-800">
//                 Personalization
//               </h2>

//               {/* CSV toggle */}
//               <div className="mb-3 flex items-center gap-2 text-xs text-gray-600">
//                 <input
//                   id="useCsv"
//                   type="checkbox"
//                   checked={useCsvPersonalization}
//                   onChange={e => setUseCsvPersonalization(e.target.checked)}
//                 />
//                 <label htmlFor="useCsv">
//                   I’ll upload a CSV later for personalization (recommended for
//                   bulk)
//                 </label>
//               </div>

//               {/* Body params — show only if NOT using CSV */}
//               {!useCsvPersonalization && templateParams.length > 0 && (
//                 <div className="mb-4 space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Template parameters
//                   </h3>
//                   {templateParams.map((val, idx) => (
//                     <div key={`tp-${idx}`} className="flex items-center gap-2">
//                       <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
//                         idx + 1
//                       }}}`}</div>
//                       <input
//                         className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                         placeholder={`Value for {{${idx + 1}}}`}
//                         value={val}
//                         onChange={e => {
//                           const next = [...templateParams];
//                           next[idx] = e.target.value;
//                           setTemplateParams(next);
//                         }}
//                         disabled={!hasValidBusiness}
//                       />
//                     </div>
//                   ))}
//                 </div>
//               )}

//               {/* Button params — show only if NOT using CSV */}
//               {!useCsvPersonalization &&
//                 selectedTemplate?.buttonParams?.length > 0 && (
//                   <div className="space-y-2 text-sm">
//                     <h3 className="text-xs font-semibold text-gray-700">
//                       Button parameters
//                     </h3>
//                     {selectedTemplate.buttonParams.map((btn, idx) => {
//                       const originalUrl =
//                         btn?.ParameterValue || btn?.parameterValue || "";
//                       const subtype = (
//                         btn?.SubType ||
//                         btn?.subType ||
//                         ""
//                       ).toLowerCase();
//                       const dynamic =
//                         ["url", "copy_code", "flow"].includes(subtype) ||
//                         originalUrl.includes("{{1}}");
//                       const placeholders = {
//                         url: "Enter Redirect URL",
//                         copy_code: "Enter Coupon Code",
//                         flow: "Enter Flow ID",
//                       };
//                       return (
//                         <div key={`bp-${idx}`}>
//                           <label className="mb-1 block text-[11px] font-medium text-gray-500">
//                             {btn?.Text || btn?.text || "Button"} ·{" "}
//                             {subtype ? subtype.toUpperCase() : "STATIC"}
//                           </label>
//                           {dynamic ? (
//                             <input
//                               className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                               placeholder={
//                                 placeholders[subtype] || "Enter value"
//                               }
//                               value={buttonParams[idx] || ""}
//                               onChange={e => {
//                                 const next = [...buttonParams];
//                                 next[idx] = e.target.value;
//                                 setButtonParams(next);
//                               }}
//                               disabled={!hasValidBusiness}
//                             />
//                           ) : (
//                             <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
//                               Static value:{" "}
//                               {btn?.ParameterValue ||
//                                 btn?.parameterValue ||
//                                 "N/A"}
//                             </p>
//                           )}
//                         </div>
//                       );
//                     })}
//                   </div>
//                 )}
//             </section>
//           )}

//           {/* Media + sender + schedule */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Delivery
//             </h2>

//             {/* 🆕 Sender selection (Provider auto-derived) */}
//             <div className="mb-3 text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Sender (WhatsApp Number • Provider)
//               </label>
//               <select
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                 disabled={!hasValidBusiness || !senders.length}
//                 value={selectedSenderId}
//                 onChange={e => setSelectedSenderId(e.target.value)}
//               >
//                 <option value="" disabled>
//                   {senders.length
//                     ? "-- Select Sender --"
//                     : "No active senders found"}
//                 </option>
//                 {senders.map(s => (
//                   <option key={s.id} value={s.id}>
//                     {s.whatsAppNumber} • {s.provider}
//                   </option>
//                 ))}
//               </select>
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Only the number is shown for selection. We’ll save the sender’s
//                 phoneNumberId and provider.
//               </p>
//             </div>

//             {selectedTemplate?.requiresHeaderMediaUrl && (
//               <div className="mb-3 text-sm">
//                 <label className="mb-1 block font-medium text-gray-700">
//                   {mediaLabel(selectedTemplate.headerKind)}
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="https://…"
//                   value={headerMediaUrl}
//                   onChange={e => setHeaderMediaUrl(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   This is set once per campaign (not in CSV). Must be a public
//                   HTTPS link.
//                 </p>
//               </div>
//             )}

//             <div className="text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Schedule
//               </label>
//               <input
//                 type="datetime-local"
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                 value={scheduledAt}
//                 onChange={e => setScheduledAt(e.target.value)}
//                 disabled={!hasValidBusiness}
//               />
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Leave empty to send immediately after assignment.
//               </p>
//             </div>
//           </section>

//           {/* Submit */}
//           <div className="sticky bottom-3 z-10">
//             <button
//               onClick={handleCreateCampaign}
//               disabled={submitting || !hasValidBusiness}
//               className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
//                 submitting || !hasValidBusiness
//                   ? "bg-gray-400"
//                   : "bg-green-600 hover:bg-green-700"
//               }`}
//               title={
//                 !hasValidBusiness
//                   ? "Login required to create a campaign"
//                   : undefined
//               }
//             >
//               {submitting ? "Creating…" : "Create Campaign"}
//             </button>
//           </div>
//         </div>

//         {/* Right column – sticky preview */}
//         <aside className="md:sticky md:top-4">
//           <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
//             <div className="mb-2 flex items-center justify-between">
//               <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
//               <span className="text-[11px] text-gray-400">Customer view</span>
//             </div>

//             {hasValidBusiness ? (
//               selectedTemplate ? (
//                 <div className="flex justify-center">
//                   <PhoneWhatsAppPreview
//                     businessName={businessName}
//                     templateBody={selectedTemplate.body}
//                     parameters={useCsvPersonalization ? [] : templateParams}
//                     // For now, only image preview is supported; others will come later.
//                     imageUrl={
//                       selectedTemplate.headerKind === HK.Image
//                         ? headerMediaUrl
//                         : ""
//                     }
//                     buttonParams={(selectedTemplate.buttonParams || []).map(
//                       (btn, idx) => {
//                         const originalUrl =
//                           btn?.ParameterValue || btn?.parameterValue || "";
//                         const subtype = (
//                           btn?.SubType ||
//                           btn?.subType ||
//                           ""
//                         ).toLowerCase();
//                         const dynamic =
//                           ["url", "copy_code", "flow"].includes(subtype) ||
//                           originalUrl.includes("{{1}}");
//                         return {
//                           text: btn?.Text || btn?.text || "Button",
//                           subType: btn?.SubType || btn?.subType || "",
//                           type: btn?.Type || btn?.type || "",
//                           value: dynamic
//                             ? "" // CSV will provide dynamic at send-time
//                             : originalUrl,
//                         };
//                       }
//                     )}
//                     width="clamp(330px, 42vw, 410px)"
//                   />
//                 </div>
//               ) : (
//                 <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
//                   Select a template to preview it here
//                 </div>
//               )
//             ) : (
//               <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
//                 Waiting for Business ID…
//               </div>
//             )}
//           </div>
//         </aside>
//       </div>
//     </div>
//   );
// }

// export default CampaignBuilderPage;

// // 📄 src/pages/campaigns/CampaignBuilderPage.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import PhoneWhatsAppPreview from "../../components/PhoneWhatsAppPreview";
// import { useNavigate } from "react-router-dom";
// import { useAuth } from "../auth/context/pld_AuthContext"; // adjust if your path differs

// // === Adjust this if your API route differs ===
// const SYNC_ENDPOINT = bid => `/templates/sync/${bid}`; // POST

// const isGuid = v =>
//   !!v &&
//   /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i.test(
//     v
//   );

// // Header kind helpers (frontend-only)
// const HK = Object.freeze({
//   None: "none",
//   Text: "text",
//   Image: "image",
//   Video: "video",
//   Document: "document",
// });
// const isMediaHeader = hk =>
//   hk === HK.Image || hk === HK.Video || hk === HK.Document;
// const mediaLabel = hk =>
//   hk === HK.Image
//     ? "Image URL"
//     : hk === HK.Video
//     ? "Video URL"
//     : "Document URL";

// function CampaignBuilderPage() {
//   const { businessId: ctxBusinessId } = useAuth();

//   const [templates, setTemplates] = useState([]);
//   const [loadingTemplates, setLoadingTemplates] = useState(false);
//   const [syncing, setSyncing] = useState(false);

//   const [selectedTemplate, setSelectedTemplate] = useState(null);
//   const [templateParams, setTemplateParams] = useState([]);
//   const [buttonParams, setButtonParams] = useState([]);

//   // 🆕 unified header media url (for Image/Video/Document)
//   const [headerMediaUrl, setHeaderMediaUrl] = useState("");

//   const [campaignName, setCampaignName] = useState("");

//   const [scheduledAt, setScheduledAt] = useState("");
//   const [submitting, setSubmitting] = useState(false);

//   // 🆕 Flow association state
//   const [useFlow, setUseFlow] = useState(false);
//   const [flows, setFlows] = useState([]);
//   const [loadingFlows, setLoadingFlows] = useState(false);
//   const [selectedFlowId, setSelectedFlowId] = useState("");

//   // 🆕 Sender selection (from WhatsAppPhoneNumbers)
//   const [senders, setSenders] = useState([]); // [{id, provider, phoneNumberId, whatsAppNumber}]
//   const [selectedSenderId, setSelectedSenderId] = useState("");

//   const businessId = useMemo(
//     () => ctxBusinessId || localStorage.getItem("businessId") || null,
//     [ctxBusinessId]
//   );
//   const hasValidBusiness = isGuid(businessId);

//   const createdBy = localStorage.getItem("userId");
//   const businessName = localStorage.getItem("businessName") || "Your Business";
//   const navigate = useNavigate();

//   // Load approved templates when businessId is ready
//   useEffect(() => {
//     const load = async () => {
//       if (!hasValidBusiness) return;
//       setLoadingTemplates(true);
//       try {
//         const res = await axiosClient.get(
//           `/templates/${businessId}?status=APPROVED`
//         );
//         if (res.data?.success) setTemplates(res.data.templates || []);
//         else toast.error("❌ Failed to load templates.");
//       } catch {
//         toast.error("❌ Error loading templates.");
//       } finally {
//         setLoadingTemplates(false);
//       }
//     };
//     load();
//   }, [businessId, hasValidBusiness]);

//   // 🔁 Load flows when "Attach Flow" is toggled
//   useEffect(() => {
//     if (!useFlow || !hasValidBusiness) return;

//     const loadFlows = async () => {
//       setLoadingFlows(true);
//       try {
//         const r = await axiosClient.get(
//           `/campaign/list/${businessId}?onlyPublished=true`
//         );

//         const items = Array.isArray(r.data?.items) ? r.data.items : [];
//         const mapped = items
//           .map(f => ({
//             id: f.id ?? f.Id,
//             name: f.flowName ?? f.FlowName,
//             isPublished: f.isPublished ?? f.IsPublished ?? true,
//           }))
//           .filter(x => x.id && x.name);

//         setFlows(mapped);
//         if (!mapped.length) {
//           toast.info(
//             "ℹ️ No published flows found. You can still create a campaign without a flow."
//           );
//         }
//       } catch {
//         toast.error("❌ Error loading flows.");
//         setFlows([]);
//       } finally {
//         setLoadingFlows(false);
//       }
//     };

//     loadFlows();
//   }, [useFlow, hasValidBusiness, businessId]);

//   // 🆕 Load available senders (WhatsAppPhoneNumbers) for this business
//   useEffect(() => {
//     if (!hasValidBusiness) return;
//     (async () => {
//       try {
//         const r = await axiosClient.get(
//           `/WhatsAppSettings/senders/${businessId}`
//         );

//         const raw = Array.isArray(r.data) ? r.data : r.data?.items || [];
//         const normalized = raw.map(x => {
//           const provider = String(x.provider || "").toUpperCase(); // "PINNACLE" | "META_CLOUD"
//           const phoneNumberId = x.phoneNumberId;
//           const whatsAppNumber =
//             x.whatsAppBusinessNumber ??
//             x.whatsappBusinessNumber ??
//             x.displayNumber ??
//             x.phoneNumber ??
//             x.phoneNumberId;

//           const id = x.id ?? `${provider}|${phoneNumberId}`;
//           return { id, provider, phoneNumberId, whatsAppNumber };
//         });

//         setSenders(normalized);
//         if (normalized.length === 1) setSelectedSenderId(normalized[0].id);
//       } catch {
//         toast.error("❌ Failed to load WhatsApp senders.");
//         setSenders([]);
//         setSelectedSenderId("");
//       }
//     })();
//   }, [hasValidBusiness, businessId]);

//   // 🔄 Sync Templates
//   const handleSyncTemplates = async () => {
//     if (!hasValidBusiness) {
//       toast.warn("⚠️ Business context missing. Please re-login.");
//       return;
//     }
//     setSyncing(true);
//     try {
//       const res = await axiosClient.post(SYNC_ENDPOINT(businessId));
//       const ok =
//         res?.data?.success === true ||
//         res?.status === 200 ||
//         res?.status === 204;
//       if (ok) {
//         toast.success("✅ Templates synced. Refreshing list…");
//         setLoadingTemplates(true);
//         try {
//           const r2 = await axiosClient.get(
//             `/templates/${businessId}?status=APPROVED`
//           );
//           if (r2.data?.success) setTemplates(r2.data.templates || []);
//         } finally {
//           setLoadingTemplates(false);
//         }
//       } else {
//         toast.error("❌ Sync failed.");
//       }
//     } catch (e) {
//       toast.error("❌ Error syncing templates.");
//     } finally {
//       setSyncing(false);
//     }
//   };

//   const normalizeHeaderKind = t => {
//     // Prefer new backend fields; fallback to image-only legacy flag
//     const raw = (t.headerKind || "").toString().toLowerCase();
//     if (
//       raw === HK.Image ||
//       raw === HK.Video ||
//       raw === HK.Document ||
//       raw === HK.Text ||
//       raw === HK.None
//     ) {
//       return raw;
//     }
//     // Legacy: only image known
//     return t.hasImageHeader ? HK.Image : HK.None;
//   };

//   const handleTemplateSelect = async name => {
//     if (!name) {
//       setSelectedTemplate(null);
//       setTemplateParams([]);
//       setButtonParams([]);
//       setHeaderMediaUrl("");
//       return;
//     }
//     try {
//       if (!hasValidBusiness) {
//         toast.error("Invalid or missing Business ID. Please re-login.");
//         return;
//       }
//       const res = await axiosClient.get(
//         `/templates/${businessId}/${encodeURIComponent(name)}`
//       );
//       const t = res.data;
//       if (!t?.name) {
//         toast.error("❌ Could not load template details.");
//         return;
//       }

//       let parsedButtons = [];
//       try {
//         parsedButtons = t.buttonsJson ? JSON.parse(t.buttonsJson) : [];
//       } catch {
//         parsedButtons = [];
//       }

//       const hk = normalizeHeaderKind(t);
//       const requiresHeaderMediaUrl =
//         t.requiresHeaderMediaUrl === true || isMediaHeader(hk);

//       const normalized = {
//         name: t.name,
//         language: t.language,
//         body: t.body || "",
//         headerKind: hk, // "image" | "video" | "document" | "text" | "none"
//         requiresHeaderMediaUrl,
//         // Legacy fields kept (not used for logic anymore)
//         hasImageHeader: !!t.hasImageHeader,
//         parametersCount: t.placeholderCount || 0, // legacy: total placeholder count; we’ll refine later
//         buttonParams: parsedButtons,
//       };

//       setSelectedTemplate(normalized);
//       setTemplateParams(Array(normalized.parametersCount).fill(""));

//       const dynSlots =
//         normalized.buttonParams?.map(btn => {
//           const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//           const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//           const isDynamic =
//             ["url", "copy_code", "flow"].includes(subtype) ||
//             originalUrl.includes("{{1}}");
//           return isDynamic ? "" : null;
//         }) || [];
//       setButtonParams(dynSlots);
//       setHeaderMediaUrl("");
//     } catch {
//       toast.error("❌ Error loading template details.");
//     }
//   };

//   // 📄 Create Campaign
//   const handleCreateCampaign = async () => {
//     if (!hasValidBusiness) {
//       toast.error("Invalid or missing Business ID. Please re-login.");
//       return;
//     }
//     if (!campaignName || !selectedTemplate) {
//       toast.warn("⚠️ Please fill campaign name and choose a template.");
//       return;
//     }
//     if (templateParams.some(p => p === "")) {
//       toast.warn("⚠️ Please fill all template parameters.");
//       return;
//     }
//     if (useFlow && !selectedFlowId) {
//       toast.warn("⚠️ Please select a flow or uncheck “Attach Flow”.");
//       return;
//     }

//     // 🧲 Resolve selected sender (required)
//     const selectedSender = senders.find(s => s.id === selectedSenderId);
//     if (!selectedSender || !selectedSender.phoneNumberId) {
//       toast.warn("⚠️ Please choose a Sender (number).");
//       return;
//     }

//     // Header media rules (campaign-level)
//     const hk = selectedTemplate?.headerKind || HK.None;
//     if (isMediaHeader(hk) && !headerMediaUrl) {
//       toast.warn(`⚠️ Please provide a ${mediaLabel(hk)}.`);
//       return;
//     }

//     setSubmitting(true);

//     const buttonPayload =
//       selectedTemplate.buttonParams?.map((btn, idx) => {
//         const originalUrl = btn?.ParameterValue || btn?.parameterValue || "";
//         const subtype = (btn?.SubType || btn?.subType || "").toLowerCase();
//         const isDynamic =
//           ["url", "copy_code", "flow"].includes(subtype) ||
//           originalUrl.includes("{{1}}");

//         return {
//           text: btn?.Text || btn?.text || "Button",
//           type: btn?.Type || btn?.type || "",
//           value: isDynamic ? buttonParams[idx] || "" : originalUrl,
//           position: idx + 1,
//         };
//       }) || [];

//     // For now (until backend supports video/document),
//     // keep campaignType = "image" only if image header, else "text"
//     const campaignType = hk === HK.Image ? "image" : "text";

//     const payload = {
//       name: campaignName,
//       messageTemplate: selectedTemplate.name,
//       templateId: selectedTemplate.name,
//       buttonParams: buttonPayload,

//       campaignType,
//       // Back-compat: old backend expects imageUrl when campaignType === "image"
//       imageUrl: hk === HK.Image ? headerMediaUrl : null,

//       // Future-friendly: always send headerMediaUrl + headerKind
//       headerMediaUrl: isMediaHeader(hk) ? headerMediaUrl : null,
//       headerKind: hk, // "image" | "video" | "document" | "text" | "none"

//       scheduledAt: scheduledAt ? new Date(scheduledAt).toISOString() : null,
//       createdBy,
//       businessId,
//       templateParameters: templateParams,

//       // Flow (optional)
//       ctaFlowConfigId: useFlow ? selectedFlowId : null,

//       // Sender
//       provider: String(selectedSender.provider || "").toUpperCase(), // "PINNACLE" | "META_CLOUD"
//       phoneNumberId: selectedSender.phoneNumberId,
//     };

//     try {
//       const res = await axiosClient.post(
//         "/campaign/create-text-campaign",
//         payload
//       );
//       if (res.data?.success && res.data?.campaignId) {
//         toast.success("✅ Campaign created successfully.");
//         navigate(
//           `/app/campaigns/image-campaigns/assign-contacts/${res.data.campaignId}`
//         );
//       } else {
//         toast.error("❌ Failed to create campaign.");
//       }
//     } catch (err) {
//       const errorMsg =
//         err.response?.data?.message || "❌ Error creating campaign.";
//       toast.error(errorMsg);
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   const templateOptions = useMemo(
//     () =>
//       templates.map(tpl => ({
//         key: `${tpl.name}-${tpl.language}`,
//         label: `${tpl.name} (${tpl.language}) — ${tpl.placeholderCount} param`,
//         value: tpl.name,
//       })),
//     [templates]
//   );

//   return (
//     <div className="mx-auto max-w-5xl px-4 py-6">
//       {/* Header */}
//       <div className="mb-4 flex items-end justify-between">
//         <div>
//           <h1 className="text-xl font-bold text-gray-900">
//             Create WhatsApp Campaign
//           </h1>
//           <p className="mt-0.5 text-xs text-gray-500">
//             Pick a template, preview, then schedule.
//           </p>
//         </div>

//         {/* 🔄 Sync Templates action */}
//         <div className="flex items-center gap-2">
//           <button
//             type="button"
//             onClick={handleSyncTemplates}
//             disabled={!hasValidBusiness || syncing}
//             className={`rounded-lg px-3 py-2 text-sm font-semibold text-white shadow-sm transition ${
//               !hasValidBusiness || syncing
//                 ? "bg-gray-400"
//                 : "bg-indigo-600 hover:bg-indigo-700"
//             }`}
//             title={
//               !hasValidBusiness ? "Login required to sync templates" : undefined
//             }
//           >
//             {syncing ? "Syncing…" : "Sync Templates"}
//           </button>
//         </div>
//       </div>

//       {/* Friendly fallback if businessId not available */}
//       {!hasValidBusiness && (
//         <div className="mb-4 rounded-xl border border-amber-200 bg-amber-50 p-4 text-sm text-amber-900">
//           <div className="flex items-start gap-3">
//             <span className="mt-0.5">⚠️</span>
//             <div>
//               <p className="font-medium">
//                 We’re loading your business context…
//               </p>
//               <p className="mt-1 text-amber-800/90">
//                 If this doesn’t resolve in a moment, please re-login so we can
//                 attach your Business ID to requests.
//               </p>
//               <div className="mt-3">
//                 <button
//                   onClick={() => navigate("/login")}
//                   className="rounded-lg bg-amber-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-amber-700"
//                   type="button"
//                 >
//                   Go to Login
//                 </button>
//               </div>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* Content grid */}
//       <div className="grid gap-4 md:grid-cols-[1fr_320px]">
//         {/* Left column – form */}
//         <div className="space-y-4">
//           {/* Campaign meta */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <div className="space-y-3 text-sm">
//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Campaign name
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="e.g. Diwali Blast – Returning Customers"
//                   value={campaignName}
//                   onChange={e => setCampaignName(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//               </div>

//               <div>
//                 <label className="mb-1 block font-medium text-gray-700">
//                   Template <span className="text-gray-400">(approved)</span>
//                 </label>
//                 <select
//                   disabled={loadingTemplates || !hasValidBusiness}
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   onChange={e => handleTemplateSelect(e.target.value)}
//                   value={selectedTemplate?.name || ""}
//                 >
//                   <option value="" disabled>
//                     {loadingTemplates
//                       ? "Loading templates…"
//                       : "-- Select Template --"}
//                   </option>
//                   {templateOptions.map(o => (
//                     <option key={o.key} value={o.value}>
//                       {o.label}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   Only templates with status{" "}
//                   <span className="font-medium">APPROVED</span> are listed.
//                 </p>
//               </div>
//             </div>
//           </section>

//           {/* Flow (optional) */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Flow (optional)
//             </h2>
//             <div className="flex items-center gap-3 text-sm">
//               <input
//                 id="useFlow"
//                 type="checkbox"
//                 checked={useFlow}
//                 onChange={e => {
//                   setUseFlow(e.target.checked);
//                   if (!e.target.checked) setSelectedFlowId("");
//                 }}
//                 disabled={!hasValidBusiness}
//               />
//               <label htmlFor="useFlow" className="text-gray-700">
//                 Attach a Visual Flow to this campaign
//               </label>
//             </div>

//             {useFlow && (
//               <div className="mt-3">
//                 <label className="mb-1 block text-sm font-medium text-gray-700">
//                   Select Flow
//                 </label>
//                 <select
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 text-sm outline-none focus:border-purple-500 disabled:bg-gray-100"
//                   disabled={loadingFlows || !hasValidBusiness}
//                   value={selectedFlowId}
//                   onChange={e => setSelectedFlowId(e.target.value)}
//                 >
//                   <option value="">
//                     {loadingFlows ? "Loading flows…" : "-- Select Flow --"}
//                   </option>
//                   {flows.map(f => (
//                     <option key={f.id} value={f.id}>
//                       {f.name}
//                     </option>
//                   ))}
//                 </select>
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   If attached, the campaign will <strong>start</strong> from the
//                   flow’s entry step. The backend will align the starting
//                   template automatically.
//                 </p>
//               </div>
//             )}
//           </section>

//           {/* Parameters */}
//           {selectedTemplate && (
//             <section className="rounded-xl border bg-white p-4 shadow-sm">
//               <h2 className="mb-3 text-sm font-semibold text-gray-800">
//                 Personalization
//               </h2>

//               {templateParams.length > 0 && (
//                 <div className="mb-4 space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Template parameters
//                   </h3>
//                   {templateParams.map((val, idx) => (
//                     <div key={`tp-${idx}`} className="flex items-center gap-2">
//                       <div className="w-20 shrink-0 text-xs text-gray-500">{`{{${
//                         idx + 1
//                       }}}`}</div>
//                       <input
//                         className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                         placeholder={`Value for {{${idx + 1}}}`}
//                         value={val}
//                         onChange={e => {
//                           const next = [...templateParams];
//                           next[idx] = e.target.value;
//                           setTemplateParams(next);
//                         }}
//                         disabled={!hasValidBusiness}
//                       />
//                     </div>
//                   ))}
//                 </div>
//               )}

//               {selectedTemplate?.buttonParams?.length > 0 && (
//                 <div className="space-y-2 text-sm">
//                   <h3 className="text-xs font-semibold text-gray-700">
//                     Button parameters
//                   </h3>
//                   {selectedTemplate.buttonParams.map((btn, idx) => {
//                     const originalUrl =
//                       btn?.ParameterValue || btn?.parameterValue || "";
//                     const subtype = (
//                       btn?.SubType ||
//                       btn?.subType ||
//                       ""
//                     ).toLowerCase();
//                     const dynamic =
//                       ["url", "copy_code", "flow"].includes(subtype) ||
//                       originalUrl.includes("{{1}}");
//                     const placeholders = {
//                       url: "Enter Redirect URL",
//                       copy_code: "Enter Coupon Code",
//                       flow: "Enter Flow ID",
//                     };
//                     return (
//                       <div key={`bp-${idx}`}>
//                         <label className="mb-1 block text-[11px] font-medium text-gray-500">
//                           {btn?.Text || btn?.text || "Button"} ·{" "}
//                           {subtype ? subtype.toUpperCase() : "STATIC"}
//                         </label>
//                         {dynamic ? (
//                           <input
//                             className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                             placeholder={placeholders[subtype] || "Enter value"}
//                             value={buttonParams[idx] || ""}
//                             onChange={e => {
//                               const next = [...buttonParams];
//                               next[idx] = e.target.value;
//                               setButtonParams(next);
//                             }}
//                             disabled={!hasValidBusiness}
//                           />
//                         ) : (
//                           <p className="rounded-lg border border-dashed border-gray-200 bg-gray-50 px-3 py-2 text-xs text-gray-500">
//                             Static value:{" "}
//                             {btn?.ParameterValue ||
//                               btn?.parameterValue ||
//                               "N/A"}
//                           </p>
//                         )}
//                       </div>
//                     );
//                   })}
//                 </div>
//               )}
//             </section>
//           )}

//           {/* Media + sender + schedule */}
//           <section className="rounded-xl border bg-white p-4 shadow-sm">
//             <h2 className="mb-3 text-sm font-semibold text-gray-800">
//               Delivery
//             </h2>

//             {/* 🆕 Sender selection (Provider auto-derived) */}
//             <div className="mb-3 text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Sender (WhatsApp Number • Provider)
//               </label>
//               <select
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500 disabled:bg-gray-100"
//                 disabled={!hasValidBusiness || !senders.length}
//                 value={selectedSenderId}
//                 onChange={e => setSelectedSenderId(e.target.value)}
//               >
//                 <option value="" disabled>
//                   {senders.length
//                     ? "-- Select Sender --"
//                     : "No active senders found"}
//                 </option>
//                 {senders.map(s => (
//                   <option key={s.id} value={s.id}>
//                     {s.whatsAppNumber} • {s.provider}
//                   </option>
//                 ))}
//               </select>
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Only the number is shown for selection. We’ll save the sender’s
//                 phoneNumberId and provider.
//               </p>
//             </div>

//             {selectedTemplate?.requiresHeaderMediaUrl && (
//               <div className="mb-3 text-sm">
//                 <label className="mb-1 block font-medium text-gray-700">
//                   {mediaLabel(selectedTemplate.headerKind)}
//                 </label>
//                 <input
//                   type="text"
//                   className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                   placeholder="https://…"
//                   value={headerMediaUrl}
//                   onChange={e => setHeaderMediaUrl(e.target.value)}
//                   disabled={!hasValidBusiness}
//                 />
//                 <p className="mt-1 text-[11px] text-gray-400">
//                   This is set once per campaign (not in CSV). Must be a public
//                   HTTPS link.
//                 </p>
//               </div>
//             )}

//             <div className="text-sm">
//               <label className="mb-1 block font-medium text-gray-700">
//                 Schedule
//               </label>
//               <input
//                 type="datetime-local"
//                 className="w-full rounded-lg border border-gray-300 px-3 py-2 outline-none focus:border-purple-500"
//                 value={scheduledAt}
//                 onChange={e => setScheduledAt(e.target.value)}
//                 disabled={!hasValidBusiness}
//               />
//               <p className="mt-1 text-[11px] text-gray-400">
//                 Leave empty to send immediately after assignment.
//               </p>
//             </div>
//           </section>

//           {/* Submit */}
//           <div className="sticky bottom-3 z-10">
//             <button
//               onClick={handleCreateCampaign}
//               disabled={submitting || !hasValidBusiness}
//               className={`w-full rounded-lg px-4 py-2.5 text-sm font-semibold text-white shadow-sm transition ${
//                 submitting || !hasValidBusiness
//                   ? "bg-gray-400"
//                   : "bg-green-600 hover:bg-green-700"
//               }`}
//               title={
//                 !hasValidBusiness
//                   ? "Login required to create a campaign"
//                   : undefined
//               }
//             >
//               {submitting ? "Creating…" : "Create Campaign"}
//             </button>
//           </div>
//         </div>

//         {/* Right column – sticky preview */}
//         <aside className="md:sticky md:top-4">
//           <div className="rounded-xl border bg-[#fafaf7] p-4 shadow-sm">
//             <div className="mb-2 flex items-center justify-between">
//               <h3 className="text-xs font-semibold text-gray-800">Preview</h3>
//               <span className="text-[11px] text-gray-400">Customer view</span>
//             </div>

//             {hasValidBusiness ? (
//               selectedTemplate ? (
//                 <div className="flex justify-center">
//                   <PhoneWhatsAppPreview
//                     businessName={businessName}
//                     templateBody={selectedTemplate.body}
//                     parameters={templateParams}
//                     // For now, only image preview is supported; others will come later.
//                     imageUrl={
//                       selectedTemplate.headerKind === HK.Image
//                         ? headerMediaUrl
//                         : ""
//                     }
//                     buttonParams={(selectedTemplate.buttonParams || []).map(
//                       (btn, idx) => {
//                         const originalUrl =
//                           btn?.ParameterValue || btn?.parameterValue || "";
//                         const subtype = (
//                           btn?.SubType ||
//                           btn?.subType ||
//                           ""
//                         ).toLowerCase();
//                         const dynamic =
//                           ["url", "copy_code", "flow"].includes(subtype) ||
//                           originalUrl.includes("{{1}}");
//                         return {
//                           text: btn?.Text || btn?.text || "Button",
//                           subType: btn?.SubType || btn?.subType || "",
//                           type: btn?.Type || btn?.type || "",
//                           value: dynamic
//                             ? buttonParams?.[idx] || ""
//                             : btn?.ParameterValue || btn?.parameterValue || "",
//                         };
//                       }
//                     )}
//                     width="clamp(330px, 42vw, 410px)"
//                   />
//                 </div>
//               ) : (
//                 <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-gray-200 bg-white text-xs text-gray-400">
//                   Select a template to preview it here
//                 </div>
//               )
//             ) : (
//               <div className="flex h-[460px] items-center justify-center rounded-xl border border-dashed border-amber-200 bg-amber-50 text-xs text-amber-900">
//                 Waiting for Business ID…
//               </div>
//             )}
//           </div>
//         </aside>
//       </div>
//     </div>
//   );
// }

// export default CampaignBuilderPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignCreateSingle.jsx 
====================================================== 
 
// ✅ File: src/pages/campaigns/CampaignCreateSingle.jsx
import React, { useEffect, useState } from "react";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import { useNavigate } from "react-router-dom";

function CampaignCreateSingle() {
  const navigate = useNavigate();

  const [templates] = useState([]);
  const [contacts, setContacts] = useState([]);
  const [loadingContacts, setLoadingContacts] = useState(true);
  const [submitting, setSubmitting] = useState(false);

  const [templateMessage, setTemplateMessage] = useState("");
  const [form, setForm] = useState({
    templateName: "",
    message: "",
    contactIds: [],
    name: "",
    scheduledAt: "",
    templateParams: [],
  });

  const isFormValid =
    form.name.trim() &&
    (form.templateName || form.message.trim()) &&
    form.contactIds.length > 0;

  const generatePreview = (template, paramValues) => {
    if (!template) return "";
    return template.replace(/{{(\d+)}}/g, (_, p1) => {
      const index = parseInt(p1, 10) - 1;
      return paramValues[index] || `{{${p1}}}`;
    });
  };

  const previewMessage = generatePreview(
    templateMessage || form.message,
    form.templateParams
  );

  const extractParamCount = message => {
    const matches = message.match(/{{\d+}}/g);
    const unique = [...new Set(matches || [])];
    return unique.length;
  };

  const updateField = (key, value) => {
    setForm(f => ({ ...f, [key]: value }));
  };

  const handleTemplateChange = e => {
    const tplName = e.target.value;
    const tpl = templates.find(t => t.name === tplName);
    const msg = tpl?.body || "";
    const paramCount = extractParamCount(msg);

    setTemplateMessage(msg);
    updateField("templateName", tplName);
    updateField("templateParams", Array(paramCount).fill(""));
    updateField("message", "");
  };

  const updateParam = (index, value) => {
    setForm(f => {
      const updated = [...f.templateParams];
      updated[index] = value;
      return { ...f, templateParams: updated };
    });
  };

  const toggleContact = id => {
    setForm(f => ({
      ...f,
      contactIds: f.contactIds.includes(id)
        ? f.contactIds.filter(cid => cid !== id)
        : [...f.contactIds, id],
    }));
  };

  const handleSubmit = async () => {
    if (!isFormValid) {
      if (!form.name.trim()) toast.warn("⚠️ Campaign name is required");
      else if (form.contactIds.length === 0) toast.warn("⚠️ Select contacts");
      else toast.warn("⚠️ Message cannot be empty");
      return;
    }

    setSubmitting(true);

    const payload = {
      name: form.name.trim(),
      contactIds: form.contactIds,
      scheduledAt: form.scheduledAt || null,
      isTemplate: !!form.templateName,
      ...(form.templateName
        ? {
            templateName: form.templateName,
            templateId: form.templateName,
            templateParams: form.templateParams,
            messageTemplate: previewMessage.trim(),
          }
        : {
            messageTemplate: form.message.trim(),
          }),
    };

    try {
      const res = await axiosClient.post(
        "campaign/create-text-campaign",
        payload
      );
      toast.success("🚀 Campaign created!");
      localStorage.setItem(
        "lastCampaign",
        JSON.stringify({
          lastCampaignName: form.name.trim(),
          lastCampaignId: res?.data?.campaignId || null,
          launchedAt: new Date().toISOString(),
        })
      );
      navigate("/app/campaigns/list");
    } catch (err) {
      toast.error("❌ Failed to create campaign");
      console.error(err);
    } finally {
      setSubmitting(false);
    }
  };

  useEffect(() => {
    axiosClient
      .get("/contacts")
      .then(res => {
        const contactList = Array.isArray(res.data) ? res.data : res.data?.data;

        if (!Array.isArray(contactList)) {
          toast.error("❌ Invalid contact format received");
          return setContacts([]);
        }

        setContacts(contactList);
      })
      .catch(() => toast.error("❌ Error loading contacts"))
      .finally(() => setLoadingContacts(false));
  }, []);

  return (
    <div className="max-w-3xl mx-auto p-6 space-y-6">
      <h1 className="text-2xl font-bold text-purple-700">✨ Build Campaign</h1>

      {/* Template Selection */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Approved Template (optional)</label>
        <select
          value={form.templateName}
          onChange={handleTemplateChange}
          className="w-full border rounded px-3 py-2"
        >
          <option value="">– none –</option>
          {templates.map(t => (
            <option key={t.name} value={t.name}>
              {t.name} ({t.language})
            </option>
          ))}
        </select>

        <label className="font-medium">Message Body</label>
        <div className="w-full border rounded px-3 py-2 bg-gray-100 whitespace-pre-wrap text-sm text-gray-800">
          {templateMessage || form.message}
        </div>

        {form.templateName &&
          form.templateParams.map((param, idx) => (
            <input
              key={idx}
              type="text"
              value={param}
              onChange={e => updateParam(idx, e.target.value)}
              placeholder={`Param ${idx + 1}`}
              className="w-full border rounded px-3 py-2 mt-2"
            />
          ))}

        <p className="text-xs text-gray-500">
          Placeholders like <code>{`{{1}}`}</code> will be auto-replaced.
        </p>
      </div>

      {/* Contact Selection */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Select Contacts</label>
        <div className="flex gap-2 mb-2">
          <button
            onClick={() =>
              setForm(f => ({
                ...f,
                contactIds: contacts.map(c => c.id),
              }))
            }
            className="px-2 py-1 bg-blue-100 text-blue-700 rounded text-sm"
          >
            Select All
          </button>
          <button
            onClick={() => updateField("contactIds", [])}
            className="px-2 py-1 bg-gray-100 text-gray-600 rounded text-sm"
          >
            Deselect All
          </button>
          <span className="text-sm text-gray-500">
            {form.contactIds.length} selected
          </span>
        </div>
        {loadingContacts ? (
          <p>Loading contacts…</p>
        ) : (
          <div className="grid md:grid-cols-2 gap-2 max-h-64 overflow-auto">
            {contacts.map(c => (
              <label
                key={c.id}
                className="flex flex-col border rounded p-2 hover:bg-gray-50"
              >
                <div className="flex items-center gap-2 text-sm">
                  <input
                    type="checkbox"
                    checked={form.contactIds.includes(c.id)}
                    onChange={() => toggleContact(c.id)}
                  />
                  {c.name} ({c.phoneNumber})
                </div>
              </label>
            ))}
          </div>
        )}
      </div>

      {/* Campaign Info */}
      <div className="bg-white p-4 rounded shadow space-y-2">
        <label className="font-medium">Campaign Name</label>
        <input
          type="text"
          value={form.name}
          onChange={e => updateField("name", e.target.value)}
          className="w-full border rounded px-3 py-2"
          placeholder="e.g. Summer Promo"
        />
        <label className="font-medium">Schedule (optional)</label>
        <input
          type="datetime-local"
          value={form.scheduledAt}
          onChange={e => updateField("scheduledAt", e.target.value)}
          className="w-full border rounded px-3 py-2"
        />
      </div>

      {/* Preview */}
      <div className="bg-gray-100 p-4 rounded text-sm">
        <p className="font-semibold mb-1">👁️ Live Preview</p>
        <p className="whitespace-pre-wrap">{previewMessage}</p>
      </div>

      {/* Submit */}
      <button
        onClick={handleSubmit}
        disabled={!isFormValid || submitting}
        className={`w-full py-3 font-semibold rounded transition ${
          isFormValid && !submitting
            ? "bg-green-600 text-white hover:bg-green-700"
            : "bg-gray-300 text-gray-500 cursor-not-allowed"
        }`}
      >
        {submitting ? "⏳ Launching..." : "🚀 Launch Campaign"}
      </button>
    </div>
  );
}

export default CampaignCreateSingle;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignList.jsx 
====================================================== 
 
import React, { useEffect, useState, useCallback } from "react";
import axiosClient from "../../api/axiosClient";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { saveAs } from "file-saver";

function CampaignList() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [totalCount, setTotalCount] = useState(0); // fixed useState syntax
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");

  const navigate = useNavigate();

  // Wrap in useCallback!
  const fetchCampaigns = useCallback(async () => {
    try {
      setLoading(true);
      const res = await axiosClient.get(
        `/Campaign/paginated?page=${page}&pageSize=${pageSize}&status=${statusFilter}`
      );
      setCampaigns(res.data.items);
      setTotalCount(res.data.totalCount);
    } catch (err) {
      toast.error("❌ Failed to load campaigns");
    } finally {
      setLoading(false);
    }
  }, [page, pageSize, statusFilter]);

  useEffect(() => {
    fetchCampaigns();
  }, [fetchCampaigns]);

  const handleDelete = async id => {
    if (!window.confirm("Are you sure you want to delete this campaign?"))
      return;
    try {
      await axiosClient.delete(`/Campaign/${id}`);
      toast.success("🗑️ Campaign deleted");
      fetchCampaigns();
    } catch {
      toast.error("❌ Delete failed");
    }
  };

  const handleSendCampaign = async id => {
    try {
      await axiosClient.post(`/campaign/send/${id}`);
      toast.success("✅ Campaign sent successfully");
      fetchCampaigns();
    } catch {
      toast.error("❌ Sending campaign failed");
    }
  };

  const filteredCampaigns = campaigns.filter(c =>
    (c.name || "").toLowerCase().includes(search.toLowerCase())
  );

  const handleExport = () => {
    const csvRows = [
      ["Name", "Status", "ScheduledAt", "CreatedAt"],
      ...filteredCampaigns.map(c => [
        c.name,
        c.status,
        c.scheduledAt || "-",
        new Date(c.createdAt).toLocaleString(),
      ]),
    ];
    const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
      type: "text/csv",
    });
    saveAs(blob, "campaigns.csv");
  };

  const getStatusBadge = status => {
    const color =
      status === "Draft"
        ? "bg-yellow-100 text-yellow-800"
        : status === "Sent"
        ? "bg-green-100 text-green-800"
        : "bg-gray-200 text-gray-800";
    return (
      <span className={`px-2 py-1 rounded text-xs font-semibold ${color}`}>
        {status}
      </span>
    );
  };

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-6">
      <div className="bg-white rounded-md shadow border">
        {/* Header */}
        <div className="flex justify-between items-center px-5 py-4 border-b">
          <h2 className="text-lg font-semibold text-gray-700">
            📋 Campaigns List
          </h2>
          <div className="flex gap-2">
            <button
              onClick={() => navigate("/app/campaigns/template-single")}
              className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
            >
              ➕ New Campaign
            </button>
            <button
              onClick={handleExport}
              className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
            >
              ⬇ Export CSV
            </button>
          </div>
        </div>

        {/* Show total count */}
        <div className="flex justify-between items-center px-5 py-2">
          <span className="text-sm text-gray-600">
            Showing {filteredCampaigns.length} of {totalCount} campaigns
          </span>
        </div>

        {/* Filters */}
        <div className="px-5 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 border-b bg-gray-50">
          <input
            type="text"
            placeholder="Search by name..."
            className="border rounded px-3 py-2 text-sm"
            value={search}
            onChange={e => setSearch(e.target.value)}
          />
          <select
            className="border rounded px-3 py-2 text-sm"
            value={statusFilter}
            onChange={e => setStatusFilter(e.target.value)}
          >
            <option value="">All Statuses</option>
            <option value="Draft">Draft</option>
            <option value="Sent">Sent</option>
          </select>
          <select
            className="border rounded px-3 py-2 text-sm"
            value={pageSize}
            onChange={e => {
              setPageSize(Number(e.target.value));
              setPage(1);
            }}
          >
            {[10, 25, 50].map(size => (
              <option key={size} value={size}>
                Show {size}
              </option>
            ))}
          </select>
        </div>

        {/* Table */}
        <div className="overflow-x-auto rounded-md">
          {loading ? (
            <div className="p-5 text-gray-500 text-sm">
              ⏳ Loading campaigns...
            </div>
          ) : filteredCampaigns.length === 0 ? (
            <div className="p-6 text-center text-gray-500">
              <p className="text-md">😕 No campaigns found</p>
              <p className="text-sm">Try adjusting filters or create one.</p>
            </div>
          ) : (
            <table className="w-full text-sm">
              <thead className="bg-gray-100 text-gray-600 font-semibold">
                <tr>
                  <th className="p-3 text-left">Name</th>
                  <th className="p-3 text-left">Status</th>
                  <th className="p-3 text-left">Scheduled</th>
                  <th className="p-3 text-left">Created</th>
                  <th className="p-3 text-left">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredCampaigns.map(c => (
                  <tr key={c.id} className="border-t hover:bg-gray-50">
                    <td className="p-3">{c.name}</td>
                    <td className="p-3">{getStatusBadge(c.status)}</td>
                    <td className="p-3">
                      {c.scheduledAt
                        ? new Date(c.scheduledAt).toLocaleString()
                        : "-"}
                    </td>
                    <td className="p-3">
                      {new Date(c.createdAt).toLocaleString()}
                    </td>
                    <td className="p-3 space-x-1">
                      <button
                        onClick={() => navigate(`/app/campaigns/edit/${c.id}`)}
                        className="bg-blue-500 text-white px-2 py-1 text-xs rounded hover:bg-blue-600"
                      >
                        ✏️ Edit
                      </button>
                      <button
                        onClick={() => navigate(`/app/campaigns/logs/${c.id}`)}
                        className="bg-purple-600 text-white px-2 py-1 text-xs rounded hover:bg-purple-700"
                      >
                        📊 Logs
                      </button>
                      <button
                        onClick={() =>
                          navigate(`/app/campaigns/dashboard/${c.id}`)
                        }
                        className="bg-indigo-600 text-white px-2 py-1 text-xs rounded hover:bg-indigo-700"
                      >
                        📈 Stats
                      </button>
                      {c.status?.toLowerCase() === "draft" && (
                        <button
                          onClick={() => handleSendCampaign(c.id)}
                          className="bg-green-600 text-white px-2 py-1 text-xs rounded hover:bg-green-700"
                        >
                          🚀 Send
                        </button>
                      )}
                      <button
                        onClick={() => handleDelete(c.id)}
                        className="bg-red-500 text-white px-2 py-1 text-xs rounded hover:bg-red-600"
                      >
                        🗑️ Delete
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </div>
    </div>
  );
}

export default CampaignList;

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { useNavigate } from "react-router-dom";
// import { toast } from "react-toastify";
// import { saveAs } from "file-saver";

// function CampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [page, setPage] = useState(1);
//   const [pageSize, setPageSize] = useState(10);
//   const [setTotalCount] = useState(0);
//   const [search, setSearch] = useState("");
//   const [statusFilter, setStatusFilter] = useState("");

//   const navigate = useNavigate();

//   const fetchCampaigns = async () => {
//     try {
//       setLoading(true);
//       const res = await axiosClient.get(
//         `/Campaign/paginated?page=${page}&pageSize=${pageSize}&status=${statusFilter}`
//       );
//       setCampaigns(res.data.items);
//       setTotalCount(res.data.totalCount);
//     } catch (err) {
//       toast.error("❌ Failed to load campaigns");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     fetchCampaigns();
//   }, [page, pageSize, statusFilter]);

//   const handleDelete = async id => {
//     if (!window.confirm("Are you sure you want to delete this campaign?"))
//       return;
//     try {
//       await axiosClient.delete(`/Campaign/${id}`);
//       toast.success("🗑️ Campaign deleted");
//       fetchCampaigns();
//     } catch {
//       toast.error("❌ Delete failed");
//     }
//   };

//   const handleSendCampaign = async id => {
//     try {
//       // await axiosClient.post(`/campaign/send-template-simple`);
//       await axiosClient.post(`/campaign/send/${id}`);
//       toast.success("✅ Campaign sent successfully");
//       fetchCampaigns();
//     } catch {
//       toast.error("❌ Sending campaign failed");
//     }
//   };

//   const filteredCampaigns = campaigns.filter(c =>
//     (c.name || "").toLowerCase().includes(search.toLowerCase())
//   );

//   const handleExport = () => {
//     const csvRows = [
//       ["Name", "Status", "ScheduledAt", "CreatedAt"],
//       ...filteredCampaigns.map(c => [
//         c.name,
//         c.status,
//         c.scheduledAt || "-",
//         new Date(c.createdAt).toLocaleString(),
//       ]),
//     ];
//     const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
//       type: "text/csv",
//     });
//     saveAs(blob, "campaigns.csv");
//   };

//   const getStatusBadge = status => {
//     const color =
//       status === "Draft"
//         ? "bg-yellow-100 text-yellow-800"
//         : status === "Sent"
//         ? "bg-green-100 text-green-800"
//         : "bg-gray-200 text-gray-800";
//     return (
//       <span className={`px-2 py-1 rounded text-xs font-semibold ${color}`}>
//         {status}
//       </span>
//     );
//   };

//   return (
//     <div className="p-6 max-w-7xl mx-auto space-y-6">
//       <div className="bg-white rounded-md shadow border">
//         {/* Header */}
//         <div className="flex justify-between items-center px-5 py-4 border-b">
//           <h2 className="text-lg font-semibold text-gray-700">
//             📋 Campaigns List
//           </h2>
//           <div className="flex gap-2">
//             <button
//               onClick={() => navigate("/app/campaigns/template-single")}
//               className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
//             >
//               ➕ New Campaign
//             </button>
//             <button
//               onClick={handleExport}
//               className="px-3 py-1.5 text-sm border rounded-md text-gray-700 hover:bg-gray-100"
//             >
//               ⬇ Export CSV
//             </button>
//           </div>
//         </div>

//         {/* Filters */}
//         <div className="px-5 py-4 grid grid-cols-1 md:grid-cols-3 gap-4 border-b bg-gray-50">
//           <input
//             type="text"
//             placeholder="Search by name..."
//             className="border rounded px-3 py-2 text-sm"
//             value={search}
//             onChange={e => setSearch(e.target.value)}
//           />
//           <select
//             className="border rounded px-3 py-2 text-sm"
//             value={statusFilter}
//             onChange={e => setStatusFilter(e.target.value)}
//           >
//             <option value="">All Statuses</option>
//             <option value="Draft">Draft</option>
//             <option value="Sent">Sent</option>
//           </select>
//           <select
//             className="border rounded px-3 py-2 text-sm"
//             value={pageSize}
//             onChange={e => {
//               setPageSize(Number(e.target.value));
//               setPage(1);
//             }}
//           >
//             {[10, 25, 50].map(size => (
//               <option key={size} value={size}>
//                 Show {size}
//               </option>
//             ))}
//           </select>
//         </div>

//         {/* Table */}
//         <div className="overflow-x-auto rounded-md">
//           {loading ? (
//             <div className="p-5 text-gray-500 text-sm">
//               ⏳ Loading campaigns...
//             </div>
//           ) : filteredCampaigns.length === 0 ? (
//             <div className="p-6 text-center text-gray-500">
//               <p className="text-md">😕 No campaigns found</p>
//               <p className="text-sm">Try adjusting filters or create one.</p>
//             </div>
//           ) : (
//             <table className="w-full text-sm">
//               <thead className="bg-gray-100 text-gray-600 font-semibold">
//                 <tr>
//                   <th className="p-3 text-left">Name</th>
//                   <th className="p-3 text-left">Status</th>
//                   <th className="p-3 text-left">Scheduled</th>
//                   <th className="p-3 text-left">Created</th>
//                   <th className="p-3 text-left">Actions</th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {filteredCampaigns.map(c => (
//                   <tr key={c.id} className="border-t hover:bg-gray-50">
//                     <td className="p-3">{c.name}</td>
//                     <td className="p-3">{getStatusBadge(c.status)}</td>
//                     <td className="p-3">
//                       {c.scheduledAt
//                         ? new Date(c.scheduledAt).toLocaleString()
//                         : "-"}
//                     </td>
//                     <td className="p-3">
//                       {new Date(c.createdAt).toLocaleString()}
//                     </td>
//                     <td className="p-3 space-x-1">
//                       <button
//                         onClick={() => navigate(`/app/campaigns/edit/${c.id}`)}
//                         className="bg-blue-500 text-white px-2 py-1 text-xs rounded hover:bg-blue-600"
//                       >
//                         ✏️ Edit
//                       </button>
//                       <button
//                         onClick={() => navigate(`/app/campaigns/logs/${c.id}`)}
//                         className="bg-purple-600 text-white px-2 py-1 text-xs rounded hover:bg-purple-700"
//                       >
//                         📊 Logs
//                       </button>
//                       <button
//                         onClick={
//                           () => navigate(`/app/campaigns/dashboard/${c.id}`)
//                           //  navigate(`/app/campaigns/analytics/${c.id}/summary`)
//                           //campaigns/analytics/${id}/summary
//                           // /campaigns/analytics/${id}/summary
//                         }
//                         className="bg-indigo-600 text-white px-2 py-1 text-xs rounded hover:bg-indigo-700"
//                       >
//                         📈 Stats
//                       </button>
//                       {c.status?.toLowerCase() === "draft" && (
//                         <button
//                           onClick={() => handleSendCampaign(c.id)}
//                           className="bg-green-600 text-white px-2 py-1 text-xs rounded hover:bg-green-700"
//                         >
//                           🚀 Send
//                         </button>
//                       )}
//                       <button
//                         onClick={() => handleDelete(c.id)}
//                         className="bg-red-500 text-white px-2 py-1 text-xs rounded hover:bg-red-600"
//                       >
//                         🗑️ Delete
//                       </button>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// }

// export default CampaignList;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignRecipientsPage.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import { useParams } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";

function CampaignRecipientsPage() {
  const { id } = useParams(); // campaignId
  const [recipients, setRecipients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [filter, setFilter] = useState("All");

  useEffect(() => {
    const loadRecipients = async () => {
      try {
        const res = await axiosClient.get(`/campaigns/${id}/recipients`);
        setRecipients(res.data || []);
      } catch (err) {
        toast.error("Failed to load recipients");
      } finally {
        setLoading(false);
      }
    };
    loadRecipients();
  }, [id]);

  const filteredRecipients = recipients.filter(r =>
    filter === "All" ? true : r.status === filter
  );

  return (
    <div className="max-w-4xl mx-auto p-6 bg-white shadow-xl rounded-2xl">
      <h2 className="text-2xl font-bold text-purple-600 mb-4">
        📋 Assigned Contacts
      </h2>

      {/* 🔍 Filter Dropdown */}
      <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 mb-1">
          Filter by Status
        </label>
        <select
          value={filter}
          onChange={e => setFilter(e.target.value)}
          className="border border-gray-300 rounded px-3 py-2 text-sm w-60"
        >
          <option value="All">All</option>
          <option value="Pending">Pending</option>
          <option value="Sent">Sent</option>
          <option value="Delivered">Delivered</option>
          <option value="Failed">Failed</option>
          <option value="Replied">Replied</option>
        </select>
      </div>

      {loading ? (
        <p className="text-gray-500">Loading...</p>
      ) : filteredRecipients.length === 0 ? (
        <p className="text-yellow-600">No contacts match this filter.</p>
      ) : (
        <table className="w-full text-sm border border-gray-300 rounded-xl overflow-hidden">
          <thead className="bg-purple-100 text-gray-700">
            <tr>
              <th className="p-3 text-left">Contact</th>
              <th className="p-3 text-left">Phone</th>
              <th className="p-3 text-left">Status</th>
              <th className="p-3 text-left">Sent At</th>
            </tr>
          </thead>
          <tbody>
            {filteredRecipients.map(r => (
              <tr key={r.id} className="border-t">
                <td className="p-3">{r.contactName}</td>
                <td className="p-3 text-gray-600">{r.contactPhone}</td>
                <td className="p-3 flex items-center gap-1">
                  {r.status === "Pending" && <span>✉️</span>}
                  {r.status === "Sent" && <span>✅</span>}
                  {r.status === "Delivered" && <span>📬</span>}
                  {r.status === "Failed" && <span>❌</span>}
                  {r.status === "Replied" && <span>💬</span>}
                  <span>{r.status}</span>
                </td>
                <td className="p-3 text-gray-500">
                  {r.sentAt ? new Date(r.sentAt).toLocaleString() : "—"}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      )}
    </div>
  );
}

export default CampaignRecipientsPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignSendLogs.jsx 
====================================================== 
 
// 📄 src/pages/campaigns/CampaignSendLogs.jsx
import React, { useEffect, useState, useCallback } from "react";
import { useParams, Link } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import { saveAs } from "file-saver";
import { confirmAlert } from "react-confirm-alert";
import "react-confirm-alert/src/react-confirm-alert.css";
import MessagePreviewModal from "./components/MessagePreviewModal";
import CampaignSummaryBar from "./components/CampaignSummaryBar";
import ContactJourneyModal from "./components/ContactJourneyModal";

function CampaignSendLogs() {
  const { campaignId } = useParams();

  // data
  const [logs, setLogs] = useState([]);
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);

  // filters/paging
  const [search, setSearch] = useState("");
  const [statusFilter, setStatusFilter] = useState("");
  const [page, setPage] = useState(1);
  const [pageSize] = useState(10);
  const [totalPages, setTotalPages] = useState(0);
  const [totalLogs, setTotalLogs] = useState(0);

  // modals
  const [previewOpen, setPreviewOpen] = useState(false);
  const [selectedLog, setSelectedLog] = useState(null);
  const [isJourneyOpen, setIsJourneyOpen] = useState(false);
  const [journeyLog, setJourneyLog] = useState(null);

  // --- helpers ---
  // Prefer contactPhone when it's a real value; otherwise fall back to recipientNumber / to.
  const getDisplayPhone = log => {
    const clean = v => (typeof v === "string" ? v.trim() : v);
    const p = clean(log?.contactPhone);
    if (p && p !== "-" && p.toLowerCase() !== "n/a") return p;
    const r = clean(log?.recipientNumber) || clean(log?.to);
    return r || ""; // empty if truly unavailable
  };

  // --- fetching ---
  const fetchLogs = useCallback(async () => {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        page,
        pageSize,
        status: statusFilter,
        search,
      });
      const res = await axiosClient.get(
        `/campaign-logs/campaign/${campaignId}?${params.toString()}`
      );
      setLogs(res.data.items || []);
      setTotalLogs(res.data.totalCount || 0);
      setTotalPages(res.data.totalPages || 0);
    } catch {
      toast.error("❌ Failed to load send logs");
    } finally {
      setLoading(false);
    }
  }, [campaignId, page, pageSize, statusFilter, search]);

  const fetchSummary = useCallback(async () => {
    try {
      const res = await axiosClient.get(
        `/campaign-logs/campaign/${campaignId}/summary`
      );
      setSummary(res.data.data || res.data);
    } catch {
      console.error("❌ Failed to fetch summary");
    }
  }, [campaignId]);

  useEffect(() => {
    const t = setTimeout(fetchLogs, 500);
    return () => clearTimeout(t);
  }, [fetchLogs]);

  useEffect(() => {
    fetchSummary();
  }, [fetchSummary]);

  // --- handlers ---
  const handleStatusChange = e => {
    setStatusFilter(e.target.value);
    setPage(1);
  };
  const handleSearchChange = e => {
    setSearch(e.target.value);
    setPage(1);
  };

  const handleExport = () => {
    const headers = [
      "Contact Phone",
      "Status",
      "Channel",
      "Sent At",
      "Delivered",
      "Read",
      "Clicked",
      "Click Type",
    ];
    const csvRows = [
      headers,
      ...logs.map(log => [
        getDisplayPhone(log), // ✅ phone only
        log.sendStatus,
        log.sourceChannel,
        log.sentAt ? new Date(log.sentAt).toLocaleString() : "",
        log.deliveredAt ? new Date(log.deliveredAt).toLocaleString() : "",
        log.readAt ? new Date(log.readAt).toLocaleString() : "",
        log.isClicked ? "Yes" : "No",
        log.clickType || "",
      ]),
    ];
    const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
      type: "text/csv",
    });
    saveAs(blob, `CampaignLogs-${campaignId}.csv`);
  };

  const handleRetrySingle = logId => {
    confirmAlert({
      title: "Retry This Message?",
      message: "Are you sure you want to retry this failed message?",
      buttons: [
        {
          label: "Yes",
          onClick: async () => {
            try {
              await axiosClient.post(`/campaign-logs/${logId}/retry`);
              toast.success("✅ Retry triggered");
              fetchLogs();
              fetchSummary();
            } catch {
              toast.error("❌ Retry failed");
            }
          },
        },
        { label: "Cancel" },
      ],
    });
  };

  const handleRetryAll = () => {
    confirmAlert({
      title: "Retry All Failed Messages?",
      message:
        "This will retry all failed messages in this campaign. Continue?",
      buttons: [
        {
          label: "Yes",
          onClick: async () => {
            try {
              const res = await axiosClient.post(
                `/campaign-logs/campaign/${campaignId}/retry-all`
              );
              toast.success(`✅ Retried ${res.data.retried} messages`);
              fetchLogs();
              fetchSummary();
            } catch {
              toast.error("❌ Retry failed");
            }
          },
        },
        { label: "Cancel" },
      ],
    });
  };

  const openPreview = log => {
    setSelectedLog(log);
    setPreviewOpen(true);
  };
  const closePreview = () => {
    setPreviewOpen(false);
    setSelectedLog(null);
  };

  // --- render ---
  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold text-purple-700">
          📨 Send Logs for Campaign
        </h1>
        <Link
          to="/app/campaigns/template-campaigns-list"
          className="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50 transition"
        >
          <span className="text-lg">←</span> Back to Campaigns
        </Link>
      </div>

      <CampaignSummaryBar summary={summary} />

      <div className="grid md:grid-cols-4 gap-4 mb-4">
        <input
          className="border px-3 py-2 rounded"
          placeholder="🔍 Search by name or phone"
          onChange={handleSearchChange}
        />
        <select
          className="border px-3 py-2 rounded"
          value={statusFilter}
          onChange={handleStatusChange}
        >
          <option value="">All Statuses</option>
          <option value="Sent">Sent</option>
          <option value="Delivered">Delivered</option>
          <option value="Read">Read</option>
          <option value="Queued">Queued</option>
          <option value="Failed">Failed</option>
        </select>
      </div>

      <div className="mb-4 flex justify-between">
        <p className="text-sm text-gray-500">
          Showing {logs.length} of {totalLogs} logs
        </p>
        <div className="space-x-2">
          <button
            onClick={handleExport}
            className="bg-emerald-600 text-white text-sm px-3 py-1 rounded hover:bg-emerald-700"
          >
            ⬇ Export CSV
          </button>
          <button
            onClick={handleRetryAll}
            className="bg-purple-600 text-white text-sm px-3 py-1 rounded hover:bg-purple-700"
          >
            🔁 Retry All Failed
          </button>
        </div>
      </div>

      {loading ? (
        <p>Loading logs...</p>
      ) : logs.length === 0 ? (
        <p className="text-gray-500">No logs found with current filters.</p>
      ) : (
        <div className="overflow-x-auto bg-white shadow rounded">
          <table className="w-full text-sm">
            <thead className="bg-gray-100 text-left">
              <tr>
                <th className="p-2">Contact</th>
                <th className="p-2">Status</th>
                <th className="p-2">Channel</th>
                <th className="p-2">Sent</th>
                <th className="p-2">Clicked</th>
                <th className="p-2">Click Type</th>
                <th className="p-2">Actions</th>
              </tr>
            </thead>
            <tbody>
              {logs.map(log => (
                <tr key={log.id} className="border-t hover:bg-gray-50">
                  <td className="p-2">
                    {/* ✅ phone only – no N/A, no parentheses */}
                    {getDisplayPhone(log) || "-"}
                  </td>
                  <td className="p-2">{log.sendStatus || "-"}</td>
                  <td className="p-2">{log.sourceChannel || "-"}</td>
                  <td className="p-2">
                    {log.sentAt ? new Date(log.sentAt).toLocaleString() : "-"}
                  </td>
                  <td className="p-2">{log.isClicked ? "✅ Yes" : "❌ No"}</td>
                  <td className="p-2">{log.clickType || "-"}</td>
                  <td className="p-2 space-x-2">
                    <button
                      onClick={() => openPreview(log)}
                      className="text-xs text-blue-600 hover:underline"
                    >
                      Preview
                    </button>
                    <button
                      onClick={() => {
                        setJourneyLog(log);
                        setIsJourneyOpen(true);
                      }}
                      className="text-xs text-indigo-600 hover:underline"
                    >
                      🧭 Journey
                    </button>
                    {log.sendStatus === "Failed" && (
                      <button
                        onClick={() => handleRetrySingle(log.id)}
                        className="text-xs text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded"
                      >
                        Retry
                      </button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}

      {totalPages > 1 && (
        <div className="flex justify-end items-center mt-4 space-x-2">
          <button
            className="px-2 py-1 text-sm border rounded"
            disabled={page === 1}
            onClick={() => setPage(p => p - 1)}
          >
            ⬅ Prev
          </button>
          <span className="text-sm text-gray-600">
            Page {page} of {totalPages}
          </span>
          <button
            className="px-2 py-1 text-sm border rounded"
            disabled={page === totalPages}
            onClick={() => setPage(p => p + 1)}
          >
            Next ➡
          </button>
        </div>
      )}

      <MessagePreviewModal
        isOpen={previewOpen}
        onClose={closePreview}
        messageLog={selectedLog}
      />
      <ContactJourneyModal
        isOpen={isJourneyOpen}
        onClose={() => setIsJourneyOpen(false)}
        log={journeyLog}
      />
    </div>
  );
}

export default CampaignSendLogs;

// import React, { useEffect, useState, useCallback } from "react";
// import { useParams, Link } from "react-router-dom";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import { saveAs } from "file-saver";
// import { confirmAlert } from "react-confirm-alert";
// import "react-confirm-alert/src/react-confirm-alert.css";
// import MessagePreviewModal from "./components/MessagePreviewModal";
// import CampaignSummaryBar from "./components/CampaignSummaryBar";
// import ContactJourneyModal from "./components/ContactJourneyModal";

// function CampaignSendLogs() {
//   const { campaignId } = useParams();

//   // State for data returned from the server
//   const [logs, setLogs] = useState([]);
//   const [summary, setSummary] = useState(null);
//   const [loading, setLoading] = useState(true);

//   // State for server-side filtering and pagination
//   const [search, setSearch] = useState("");
//   const [statusFilter, setStatusFilter] = useState("");
//   const [page, setPage] = useState(1);
//   const [pageSize] = useState(10);
//   const [totalPages, setTotalPages] = useState(0);
//   const [totalLogs, setTotalLogs] = useState(0);

//   // State for modals
//   const [previewOpen, setPreviewOpen] = useState(false);
//   const [selectedLog, setSelectedLog] = useState(null);
//   const [isJourneyOpen, setIsJourneyOpen] = useState(false);
//   const [journeyLog, setJourneyLog] = useState(null);

//   // --- DATA FETCHING ---

//   const fetchLogs = useCallback(async () => {
//     setLoading(true);
//     try {
//       // Construct URL with query parameters for server-side processing
//       const params = new URLSearchParams({
//         page,
//         pageSize,
//         status: statusFilter,
//         search,
//       });

//       const res = await axiosClient.get(
//         `/campaign-logs/campaign/${campaignId}?${params.toString()}`
//       );

//       // The API now returns a paged result object
//       setLogs(res.data.items || []);
//       setTotalLogs(res.data.totalCount || 0);
//       setTotalPages(res.data.totalPages || 0);
//     } catch {
//       toast.error("❌ Failed to load send logs");
//     } finally {
//       setLoading(false);
//     }
//   }, [campaignId, page, pageSize, statusFilter, search]);

//   const fetchSummary = useCallback(async () => {
//     try {
//       const res = await axiosClient.get(
//         `/campaign-logs/campaign/${campaignId}/summary`
//       );
//       // Ensure you are accessing the correct property from your ResponseResult
//       setSummary(res.data.data || res.data);
//     } catch {
//       console.error("❌ Failed to fetch summary");
//     }
//   }, [campaignId]);

//   // This effect triggers an API call whenever a filter or page changes
//   useEffect(() => {
//     // A small debounce to prevent API calls on every keystroke for search
//     const handler = setTimeout(() => {
//       fetchLogs();
//     }, 500); // 500ms delay

//     return () => {
//       clearTimeout(handler);
//     };
//   }, [fetchLogs]);

//   // This effect fetches the summary only once when the component loads
//   useEffect(() => {
//     fetchSummary();
//   }, [fetchSummary]);

//   // NOTE: The old client-side filtering useEffect has been removed.

//   // --- EVENT HANDLERS ---

//   const handleStatusChange = e => {
//     setStatusFilter(e.target.value);
//     setPage(1); // Reset to the first page when a filter changes
//   };

//   const handleSearchChange = e => {
//     setSearch(e.target.value);
//     setPage(1); // Reset to the first page when search text changes
//   };

//   const handleExport = () => {
//     // This function would also need to be updated to fetch ALL logs for export
//     // For now, it exports the current page.
//     const headers = [
//       "Contact Name",
//       "Phone",
//       "Status",
//       "Channel",
//       "Sent At",
//       "Delivered",
//       "Read",
//       "Clicked",
//       "Click Type",
//     ];
//     const csvRows = [
//       headers,
//       ...logs.map(log => [
//         log.contactName,
//         log.contactPhone,
//         log.sendStatus,
//         log.sourceChannel,
//         log.sentAt ? new Date(log.sentAt).toLocaleString() : "-",
//         log.deliveredAt ? new Date(log.deliveredAt).toLocaleString() : "-",
//         log.readAt ? new Date(log.readAt).toLocaleString() : "-",
//         log.isClicked ? "Yes" : "No",
//         log.clickType || "-",
//       ]),
//     ];
//     const blob = new Blob([csvRows.map(r => r.join(",")).join("\n")], {
//       type: "text/csv",
//     });
//     saveAs(blob, `CampaignLogs-${campaignId}.csv`);
//   };

//   const handleRetrySingle = logId => {
//     confirmAlert({
//       title: "Retry This Message?",
//       message: "Are you sure you want to retry this failed message?",
//       buttons: [
//         {
//           label: "Yes",
//           onClick: async () => {
//             try {
//               await axiosClient.post(`/campaign-logs/${logId}/retry`);
//               toast.success("✅ Retry triggered");
//               fetchLogs(); // Re-fetch data to show updated status
//               fetchSummary();
//             } catch {
//               toast.error("❌ Retry failed");
//             }
//           },
//         },
//         { label: "Cancel" },
//       ],
//     });
//   };

//   const handleRetryAll = () => {
//     confirmAlert({
//       title: "Retry All Failed Messages?",
//       message:
//         "This will retry all failed messages in this campaign. Continue?",
//       buttons: [
//         {
//           label: "Yes",
//           onClick: async () => {
//             try {
//               const res = await axiosClient.post(
//                 `/campaign-logs/campaign/${campaignId}/retry-all`
//               );
//               toast.success(`✅ Retried ${res.data.retried} messages`);
//               fetchLogs(); // Re-fetch data
//               fetchSummary();
//             } catch {
//               toast.error("❌ Retry failed");
//             }
//           },
//         },
//         { label: "Cancel" },
//       ],
//     });
//   };

//   const openPreview = log => {
//     setSelectedLog(log);
//     setPreviewOpen(true);
//   };
//   const closePreview = () => {
//     setPreviewOpen(false);
//     setSelectedLog(null);
//   };

//   return (
//     <div className="p-6 bg-gray-50 min-h-screen">
//       <div className="flex justify-between items-center mb-4">
//         <h1 className="text-2xl font-bold text-purple-700">
//           📨 Send Logs for Campaign
//         </h1>
//         <Link
//           to="/app/campaigns/template-campaigns-list"
//           className="inline-flex items-center gap-2 rounded-lg border px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50 transition"
//         >
//           <span className="text-lg">←</span> Back to Campaigns
//         </Link>
//       </div>

//       <CampaignSummaryBar summary={summary} />

//       <div className="grid md:grid-cols-4 gap-4 mb-4">
//         <input
//           className="border px-3 py-2 rounded"
//           placeholder="🔍 Search by name or phone"
//           onChange={handleSearchChange}
//         />
//         <select
//           className="border px-3 py-2 rounded"
//           value={statusFilter}
//           onChange={handleStatusChange}
//         >
//           <option value="">All Statuses</option>
//           <option value="Sent">Sent</option>
//           <option value="Delivered">Delivered</option>
//           <option value="Read">Read</option>
//           <option value="Queued">Queued</option>
//           <option value="Failed">Failed</option>
//         </select>
//         {/* You can add back the other filters here following the same pattern */}
//       </div>

//       <div className="mb-4 flex justify-between">
//         <p className="text-sm text-gray-500">
//           Showing {logs.length} of {totalLogs} logs
//         </p>
//         <div className="space-x-2">
//           <button
//             onClick={handleExport}
//             className="bg-emerald-600 text-white text-sm px-3 py-1 rounded hover:bg-emerald-700"
//           >
//             ⬇ Export CSV
//           </button>
//           <button
//             onClick={handleRetryAll}
//             className="bg-purple-600 text-white text-sm px-3 py-1 rounded hover:bg-purple-700"
//           >
//             🔁 Retry All Failed
//           </button>
//         </div>
//       </div>

//       {loading ? (
//         <p>Loading logs...</p>
//       ) : logs.length === 0 ? (
//         <p className="text-gray-500">No logs found with current filters.</p>
//       ) : (
//         <div className="overflow-x-auto bg-white shadow rounded">
//           <table className="w-full text-sm">
//             <thead className="bg-gray-100 text-left">
//               <tr>
//                 <th className="p-2">Contact</th>
//                 <th className="p-2">Status</th>
//                 <th className="p-2">Channel</th>
//                 <th className="p-2">Sent</th>
//                 <th className="p-2">Clicked</th>
//                 <th className="p-2">Click Type</th>
//                 <th className="p-2">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {logs.map(log => (
//                 <tr key={log.id} className="border-t hover:bg-gray-50">
//                   <td className="p-2">
//                     {log.contactName} ({log.contactPhone})
//                   </td>
//                   <td className="p-2">{log.sendStatus || "-"}</td>
//                   <td className="p-2">{log.sourceChannel || "-"}</td>
//                   <td className="p-2">
//                     {log.sentAt ? new Date(log.sentAt).toLocaleString() : "-"}
//                   </td>
//                   <td className="p-2">{log.isClicked ? "✅ Yes" : "❌ No"}</td>
//                   <td className="p-2">{log.clickType || "-"}</td>
//                   <td className="p-2 space-x-2">
//                     <button
//                       onClick={() => openPreview(log)}
//                       className="text-xs text-blue-600 hover:underline"
//                     >
//                       Preview
//                     </button>
//                     <button
//                       onClick={() => {
//                         setJourneyLog(log);
//                         setIsJourneyOpen(true);
//                       }}
//                       className="text-xs text-indigo-600 hover:underline"
//                     >
//                       🧭 Journey
//                     </button>
//                     {log.sendStatus === "Failed" && (
//                       <button
//                         onClick={() => handleRetrySingle(log.id)}
//                         className="text-xs text-white bg-red-500 hover:bg-red-600 px-2 py-1 rounded"
//                       >
//                         Retry
//                       </button>
//                     )}
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       )}

//       {totalPages > 1 && (
//         <div className="flex justify-end items-center mt-4 space-x-2">
//           <button
//             className="px-2 py-1 text-sm border rounded"
//             disabled={page === 1}
//             onClick={() => setPage(p => p - 1)}
//           >
//             ⬅ Prev
//           </button>
//           <span className="text-sm text-gray-600">
//             Page {page} of {totalPages}
//           </span>
//           <button
//             className="px-2 py-1 text-sm border rounded"
//             disabled={page === totalPages}
//             onClick={() => setPage(p => p + 1)}
//           >
//             Next ➡
//           </button>
//         </div>
//       )}

//       <MessagePreviewModal
//         isOpen={previewOpen}
//         onClose={closePreview}
//         messageLog={selectedLog}
//       />
//       <ContactJourneyModal
//         isOpen={isJourneyOpen}
//         onClose={() => setIsJourneyOpen(false)}
//         log={journeyLog}
//       />
//     </div>
//   );
// }

// export default CampaignSendLogs;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\Campaigns_AllFileDump.txt 
====================================================== 
 
Folder and File Content Report
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\s 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\CampaignWizard.jsx 
====================================================== 
 
// ✅ CampaignWizard.jsx
import React, { useState } from "react";
import CampaignInfoTab from "./tabs/CampaignInfoTab";
import MessageTypeTab from "./tabs/MessageTypeTab";
import MessageBuilderTab from "./tabs/MessageBuilderTab";
import CTAButtonsTab from "./tabs/CTAButtonsTab";
import RecipientsTab from "./tabs/RecipientsTab";
import PreviewSendTab from "./tabs/PreviewSendTab";

const tabs = [
  { key: "campaign-info", label: "Campaign Info" },
  { key: "message-type", label: "Message Type" },
  { key: "message-builder", label: "Message Builder" },
  { key: "cta-buttons", label: "CTA Buttons" },
  { key: "targeting", label: "Recipients" },
  { key: "preview-send", label: "Preview & Send" },
];

function CampaignWizard() {
  const [activeTabIndex, setActiveTabIndex] = useState(0);
  const [formData, setFormData] = useState({
    name: "",
    description: "",
    messageType: "template",
    templateId: "",
    imageUrl: "",
    messageText: "",
    templateParams: [],
    multiButtons: [],
    recipientIds: [],
  });

  const activeTabKey = tabs[activeTabIndex].key;

  const renderTabContent = () => {
    switch (activeTabKey) {
      case "campaign-info":
        return (
          <CampaignInfoTab formData={formData} setFormData={setFormData} />
        );
      case "message-type":
        return <MessageTypeTab formData={formData} setFormData={setFormData} />;
      case "message-builder":
        return (
          <MessageBuilderTab formData={formData} setFormData={setFormData} />
        );
      case "cta-buttons":
        return <CTAButtonsTab formData={formData} setFormData={setFormData} />;
      case "targeting":
        return <RecipientsTab formData={formData} setFormData={setFormData} />;
      case "preview-send":
        return <PreviewSendTab formData={formData} setFormData={setFormData} />;
      default:
        return null;
    }
  };

  const goNext = () => {
    if (activeTabIndex < tabs.length - 1) setActiveTabIndex(activeTabIndex + 1);
  };

  const goBack = () => {
    if (activeTabIndex > 0) setActiveTabIndex(activeTabIndex - 1);
  };

  return (
    <div className="flex min-h-screen">
      {/* Left vertical tab menu */}
      <div className="w-64 border-r p-4 bg-gray-50">
        <h2 className="text-xl font-bold mb-4">Create Campaign</h2>
        <ul className="space-y-2">
          {tabs.map((tab, index) => (
            <li
              key={tab.key}
              className={`cursor-pointer px-3 py-2 rounded ${
                index === activeTabIndex
                  ? "bg-purple-600 text-white"
                  : "hover:bg-purple-100 text-gray-800"
              }`}
              onClick={() => setActiveTabIndex(index)}
            >
              {tab.label}
            </li>
          ))}
        </ul>
      </div>

      {/* Right content area */}
      <div className="flex-1 p-6">
        {renderTabContent()}
        <div className="mt-6 flex justify-between">
          <button
            onClick={goBack}
            disabled={activeTabIndex === 0}
            className="px-4 py-2 bg-gray-300 text-black rounded disabled:opacity-50"
          >
            Back
          </button>
          <button
            onClick={goNext}
            disabled={activeTabIndex === tabs.length - 1}
            className="px-4 py-2 bg-purple-600 text-white rounded"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  );
}

export default CampaignWizard;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\ExtrackAllFiles.bat 
====================================================== 
 
@echo off
REM This script will find all files and output their name and content into one file.
REM The output file will be named [FolderName]_AllFileDump.txt.

REM Get the current folder's name and set it as the output file name with the custom suffix
for %%I in ("%cd%") do set "outputFile=%%~nI_AllFileDump.txt"

REM Clear the output file to start fresh
> "%outputFile%" (echo Folder and File Content Report)
echo. >> "%outputFile%"

REM Loop through all files in the current directory and subdirectories
for /R . %%F in (*.*) do (
    echo ====================================================== >> "%outputFile%"
    echo FILE: %%F >> "%outputFile%"
    echo ====================================================== >> "%outputFile%"
    echo. >> "%outputFile%"
    type "%%F" >> "%outputFile%" 2>nul
    echo. >> "%outputFile%"
    echo. >> "%outputFile%"
)

echo Finished! All content has been extracted to %outputFile% 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\ImageCampaignDetailPage.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom"; // ✅ NEW
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";

function ImageCampaignDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [campaign, setCampaign] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchCampaign = async () => {
      try {
        const res = await axiosClient.get(`/campaign/${id}`);
        setCampaign(res.data);
      } catch (err) {
        toast.error("Failed to load campaign details");
      } finally {
        setLoading(false);
      }
    };
    fetchCampaign();
  }, [id]);

  if (loading) return <p className="text-center text-gray-500">Loading...</p>;
  if (!campaign)
    return <p className="text-center text-red-500">Campaign not found</p>;

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white shadow-xl rounded-xl space-y-6">
      <h2 className="text-2xl font-bold text-purple-600">
        📄 Image Campaign Details
      </h2>

      <div>
        <label className="block text-gray-600 font-semibold">
          Campaign Name
        </label>
        <p className="mt-1 text-gray-800">{campaign.name}</p>
      </div>

      <div>
        <label className="block text-gray-600 font-semibold">
          Message Template
        </label>
        <p className="mt-1 text-gray-800 whitespace-pre-wrap">
          {campaign.messageTemplate}
        </p>
      </div>

      {campaign.imageUrl && (
        <div>
          <label className="block text-gray-600 font-semibold">Image</label>
          <img
            src={campaign.imageUrl}
            alt="Campaign"
            className="mt-2 w-full h-64 object-cover border rounded"
          />
        </div>
      )}

      {campaign.imageCaption && (
        <div>
          <label className="block text-gray-600 font-semibold">
            Image Caption
          </label>
          <p className="mt-1 text-gray-800">{campaign.imageCaption}</p>
        </div>
      )}

      {campaign.cta && (
        <div>
          <label className="block text-gray-600 font-semibold">CTA</label>
          <p className="mt-1 text-gray-800">
            {campaign.cta.title} —{" "}
            <span className="text-purple-600 font-semibold">
              {campaign.cta.buttonText}
            </span>
          </p>
        </div>
      )}

      {/* ✅ Assign Contacts Button */}
      <div className="pt-4">
        <button
          onClick={() =>
            navigate(`/app/campaign/image-campaigns/${id}/assign-contacts`)
          }
          className="bg-green-600 hover:bg-green-700 text-white px-6 py-3 rounded-xl font-medium shadow"
        >
          ➕ Assign Contacts
        </button>
      </div>
    </div>
  );
}

export default ImageCampaignDetailPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\ImageCampaignEditPage.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";

function ImageCampaignEditPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const [campaign, setCampaign] = useState({
    name: "",
    messageTemplate: "",
    imageUrl: "",
    imageCaption: "",
    ctaId: "",
  });
  const [ctaOptions, setCtaOptions] = useState([]);
  const [submitting, setSubmitting] = useState(false);

  // Load campaign + CTA options
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [campaignRes, ctaRes] = await Promise.all([
          axiosClient.get(`/campaigns/${id}`),
          axiosClient.get("/ctas"),
        ]);
        const c = campaignRes.data;
        setCampaign({
          name: c.name,
          messageTemplate: c.messageTemplate,
          imageUrl: c.imageUrl,
          imageCaption: c.imageCaption,
          ctaId: c.ctaId || "",
        });
        setCtaOptions(ctaRes.data);
      } catch (err) {
        toast.error("Failed to load data");
      }
    };
    fetchData();
  }, [id]);

  const handleChange = e => {
    const { name, value } = e.target;
    setCampaign(prev => ({ ...prev, [name]: value }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setSubmitting(true);
    try {
      await axiosClient.put(`/campaigns/${id}`, campaign);
      toast.success("Campaign updated");
      navigate("/app/campaigns/image-campaigns");
    } catch {
      toast.error("Failed to update campaign");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="max-w-2xl mx-auto p-6 bg-white shadow rounded-xl space-y-4">
      <h2 className="text-xl font-bold text-purple-600">
        ✏️ Edit Image Campaign
      </h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          type="text"
          name="name"
          value={campaign.name}
          onChange={handleChange}
          className="w-full p-2 border rounded"
          placeholder="Campaign Name"
          required
        />
        <textarea
          name="messageTemplate"
          value={campaign.messageTemplate}
          onChange={handleChange}
          rows={3}
          className="w-full p-2 border rounded"
          placeholder="Message Template"
        />
        <input
          type="text"
          name="imageUrl"
          value={campaign.imageUrl}
          onChange={handleChange}
          className="w-full p-2 border rounded"
          placeholder="Image URL"
        />
        {campaign.imageUrl && (
          <img
            src={campaign.imageUrl}
            alt="Preview"
            className="w-full h-56 object-cover border rounded"
          />
        )}
        <input
          type="text"
          name="imageCaption"
          value={campaign.imageCaption}
          onChange={handleChange}
          className="w-full p-2 border rounded"
          placeholder="Image Caption"
        />
        <select
          name="ctaId"
          value={campaign.ctaId}
          onChange={handleChange}
          className="w-full p-2 border rounded"
        >
          <option value="">Select CTA</option>
          {ctaOptions.map(cta => (
            <option key={cta.id} value={cta.id}>
              {cta.title} — {cta.buttonText}
            </option>
          ))}
        </select>
        <button
          type="submit"
          disabled={submitting}
          className="bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700"
        >
          {submitting ? "Updating..." : "Update Campaign"}
        </button>
      </form>
    </div>
  );
}

export default ImageCampaignEditPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\ImageCampaignListPage.jsx 
====================================================== 
 
// ✅ File: src/pages/Campaigns/ImageCampaignListPage.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";

function ImageCampaignListPage() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sendingId, setSendingId] = useState(null); // ✅ Track sending status
  const navigate = useNavigate();

  // ✅ Load campaigns on mount
  useEffect(() => {
    const fetchCampaigns = async () => {
      try {
        const res = await axiosClient.get(
          "Campaign/get-image-campaign?type=image"
        );
        setCampaigns(res.data || []);
      } catch (err) {
        toast.error("Failed to load campaigns");
      } finally {
        setLoading(false);
      }
    };
    fetchCampaigns();
  }, []);

  const handleEdit = id => navigate(`/app/campaign/image-campaigns/${id}/edit`);

  const handleDelete = async id => {
    if (!window.confirm("Are you sure you want to delete this campaign?"))
      return;
    try {
      await axiosClient.delete(`/campaign/${id}`);
      setCampaigns(prev => prev.filter(c => c.id !== id));
      toast.success("Campaign deleted");
    } catch (err) {
      toast.error("Delete failed");
    }
  };

  // ✅ Use MessageEngine API
  const handleSend = async id => {
    setSendingId(id);
    try {
      await axiosClient.post(`/messageengine/send-image-campaign/${id}`);
      toast.success("🚀 Campaign sent successfully!");
    } catch (err) {
      console.error("❌ Failed to send image campaign:", err);
      toast.error("❌ Sending campaign failed");
    } finally {
      setSendingId(null);
    }
  };

  return (
    <div className="max-w-5xl mx-auto px-4 py-6">
      <h2 className="text-2xl font-bold mb-4 text-purple-700">
        🖼️ Image Campaigns
      </h2>

      {loading ? (
        <p className="text-gray-500">Loading campaigns...</p>
      ) : campaigns.length === 0 ? (
        <div className="bg-yellow-100 text-yellow-700 p-4 rounded-lg shadow-sm">
          No image campaigns found.
        </div>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {campaigns.map(campaign => (
            <div
              key={campaign.id}
              className="bg-white border rounded-xl shadow hover:shadow-lg transition"
            >
              <img
                src={campaign.imageUrl}
                onError={e => {
                  e.target.onerror = null;
                  e.target.src = "/placeholder.jpg";
                }}
                alt={campaign.name}
                className="w-full h-48 object-contain rounded-t-xl bg-gray-50"
              />

              <div className="p-4 space-y-2">
                <h3 className="text-lg font-semibold">{campaign.name}</h3>
                <p className="text-sm text-gray-600">
                  {campaign.imageCaption || "No caption"}
                </p>
                <p className="text-sm text-gray-500 italic">
                  CTA: {campaign.ctaTitle || "—"}
                </p>
                <p className="text-sm text-gray-400 whitespace-pre-wrap">
                  📄 {campaign.messageTemplate?.slice(0, 200) || "No message"}
                </p>
                <p className="text-sm text-gray-400">
                  🎯 Recipients:{" "}
                  <span
                    className={
                      campaign.recipientCount === 0
                        ? "text-red-600 font-semibold"
                        : ""
                    }
                  >
                    {campaign.recipientCount || 0}
                  </span>
                </p>

                <div className="flex justify-end gap-4 pt-2 flex-wrap">
                  {campaign.recipientCount === 0 && (
                    <button
                      onClick={() =>
                        navigate(
                          `/app/campaigns/image-campaigns/contact-assignto-camapign/${campaign.id}`
                        )
                      }
                      className="text-sm text-purple-600 hover:underline font-semibold"
                    >
                      🎯 Assign Contacts
                    </button>
                  )}

                  <button
                    onClick={() =>
                      navigate(
                        `/app/campaigns/image-campaigns/assigned-contacts/${campaign.id}`
                      )
                    }
                    className="text-sm text-indigo-600 hover:underline"
                  >
                    View Recipients
                  </button>

                  <button
                    onClick={() => handleEdit(campaign.id)}
                    className="text-sm text-blue-600 hover:underline"
                  >
                    Edit
                  </button>

                  <button
                    onClick={() => handleDelete(campaign.id)}
                    className="text-sm text-red-600 hover:underline"
                  >
                    Delete
                  </button>

                  <button
                    disabled={
                      !campaign.recipientCount || sendingId === campaign.id
                    }
                    title={
                      campaign.recipientCount
                        ? "Send this campaign now"
                        : "Assign contacts first"
                    }
                    onClick={() => handleSend(campaign.id)}
                    className={`text-sm font-medium ${
                      campaign.recipientCount
                        ? "text-green-600 hover:underline"
                        : "text-gray-400 cursor-not-allowed"
                    }`}
                  >
                    {sendingId === campaign.id ? "Sending..." : "🚀 Send"}
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default ImageCampaignListPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\ImageCampaignPage.jsx 
====================================================== 
 
import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import WhatsAppBubblePreview from "./components/WhatsAppBubblePreview";
import CampaignButtonsForm from "./components/CampaignButtonsForm";

function ImageCampaignPage() {
  const navigate = useNavigate();

  const [campaign, setCampaign] = useState({
    name: "",
    messageTemplate: "",
    imageUrl: "",
    imageCaption: "",
    multiButtons: [], // ✅ Only buttons now
  });

  const [submitting, setSubmitting] = useState(false);

  const handleChange = e => {
    const { name, value } = e.target;
    setCampaign(prev => ({ ...prev, [name]: value }));
  };

  const handleButtonsChange = updatedButtons => {
    setCampaign(prev => ({ ...prev, multiButtons: updatedButtons }));
  };

  const handleSubmit = async e => {
    e.preventDefault();
    setSubmitting(true);

    try {
      const res = await axiosClient.post(
        "/campaign/create-image-campaign",
        campaign
      );
      toast.success("✅ Campaign created successfully");

      const newCampaignId = res?.data?.campaignId || res?.data?.id;
      if (newCampaignId) {
        // 🔁 Auto-redirect to Assign Contacts page
        navigate(
          `/app/campaigns/image-campaigns/assign-contacts/${newCampaignId}`
        );
      }

      setCampaign({
        name: "",
        messageTemplate: "",
        imageUrl: "",
        imageCaption: "",
        multiButtons: [],
      });
    } catch (err) {
      toast.error("❌ Error creating campaign");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="max-w-3xl mx-auto p-6 bg-white shadow-xl rounded-2xl">
      <h2 className="text-2xl font-bold mb-6 text-purple-600">
        📷 Create Image Campaign
      </h2>

      <form onSubmit={handleSubmit} className="space-y-5">
        <input
          type="text"
          name="name"
          placeholder="Campaign Name"
          value={campaign.name}
          onChange={handleChange}
          className="w-full p-3 border border-gray-300 rounded-xl"
          required
        />

        <textarea
          name="messageTemplate"
          placeholder="Message Template"
          rows={3}
          value={campaign.messageTemplate}
          onChange={handleChange}
          className="w-full p-3 border border-gray-300 rounded-xl"
          required
        />

        <input
          type="text"
          name="imageUrl"
          placeholder="Image URL"
          value={campaign.imageUrl}
          onChange={handleChange}
          className="w-full p-3 border border-gray-300 rounded-xl"
        />

        <input
          type="text"
          name="imageCaption"
          placeholder="Image Caption (optional)"
          value={campaign.imageCaption}
          onChange={handleChange}
          className="w-full p-3 border border-gray-300 rounded-xl"
        />

        {/* 🔘 Multi-Button Config Only */}
        <CampaignButtonsForm
          buttons={campaign.multiButtons}
          onChange={handleButtonsChange}
        />

        {/* 🟢 Live Preview */}
        {campaign.messageTemplate && (
          <div>
            <label className="text-sm text-gray-600 mb-1 block">Preview:</label>
            <WhatsAppBubblePreview
              messageTemplate={campaign.messageTemplate}
              imageUrl={campaign.imageUrl}
              caption={campaign.imageCaption}
              multiButtons={campaign.multiButtons}
            />
          </div>
        )}

        <button
          type="submit"
          disabled={submitting}
          className="bg-purple-600 text-white py-3 px-6 rounded-xl hover:bg-purple-700 transition"
        >
          {submitting ? "Creating..." : "Create Campaign"}
        </button>
      </form>
    </div>
  );
}

export default ImageCampaignPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\TemplateCampaignList.jsx 
====================================================== 
 
// 📄 src/pages/campaigns/TemplateCampaignList.jsx
import React, { useEffect, useMemo, useState } from "react";
import axiosClient from "../../api/axiosClient";
import { toast } from "react-toastify";
import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
import TemplateCard from "./components/templates/TemplateCard";
import normalizeCampaign from "../../utils/normalizeTemplate";

import { useNavigate } from "react-router-dom";

import {
  FaRocket,
  FaSearch,
  FaSyncAlt,
  FaListUl,
  FaTable,
  FaThLarge,
  FaFilter,
} from "react-icons/fa";

function cx(...xs) {
  return xs.filter(Boolean).join(" ");
}

const TYPE_FILTERS = [
  { id: "all", label: "All" },
  { id: "image_header", label: "Image Header" },
  { id: "text_only", label: "Text Only" },
  { id: "with_buttons", label: "With Buttons" },
  { id: "no_buttons", label: "No Buttons" },
];

/* ---------- Inspector Modal ---------- */
// function InspectorModal({ item, onClose }) {
//   if (!item) return null;
//   return (
//     <div
//       className="fixed inset-0 z-50 flex items-end sm:items-center justify-center bg-black/40 p-4"
//       onClick={onClose}
//     >
//       <div
//         className="w-full max-w-2xl overflow-hidden rounded-2xl bg-white shadow-xl"
//         onClick={e => e.stopPropagation()}
//       >
//         <div className="flex items-center justify-between border-b px-5 py-3">
//           <div>
//             <div className="text-lg font-semibold text-gray-900">
//               {item.name}
//             </div>
//             <div className="text-xs text-gray-500">Full fidelity preview</div>
//           </div>
//           <button
//             className="rounded-lg border px-3 py-1.5 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//         <div className="p-4">
//           <WhatsAppBubblePreview
//             messageTemplate={item.body}
//             multiButtons={item.buttons}
//             imageUrl={item.imageUrl || undefined}
//             caption={item.caption}
//             campaignId={item.id}
//           />
//         </div>
//         <div className="flex items-center justify-end gap-2 border-t px-5 py-3">
//           <button
//             className="rounded-lg border px-3 py-2 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// }
/* ---------- Inspector Modal ---------- */
function InspectorModal({ item, onClose }) {
  if (!item) return null;

  // Normalize fields from different shapes (DB list vs. detail vs. legacy)
  const messageTemplate =
    item.body || item.messageBody || item.templateBody || "";

  // Buttons can be `buttons`, `multiButtons`, or a JSON string
  let buttonsRaw = item.buttons ?? item.multiButtons ?? [];
  if (typeof buttonsRaw === "string") {
    try {
      buttonsRaw = JSON.parse(buttonsRaw);
    } catch {
      buttonsRaw = [];
    }
  }

  const imageUrl =
    item.imageUrl || item.mediaUrl || item.headerImageUrl || undefined;

  const caption = item.caption || item.imageCaption || "";

  return (
    <div
      className="fixed inset-0 z-50 flex items-end sm:items-center justify-center bg-black/40 p-4"
      onClick={onClose}
    >
      <div
        className="w-full max-w-2xl overflow-hidden rounded-2xl bg-white shadow-xl"
        onClick={e => e.stopPropagation()}
      >
        <div className="flex items-center justify-between border-b px-5 py-3">
          <div>
            <div className="text-lg font-semibold text-gray-900">
              {item.name}
            </div>
            <div className="text-xs text-gray-500">Template Perview</div>
          </div>
          <button
            className="rounded-lg border px-3 py-1.5 text-gray-700 hover:bg-gray-50"
            onClick={onClose}
          >
            Close
          </button>
        </div>

        <div className="p-4">
          <WhatsAppBubblePreview
            messageTemplate={messageTemplate}
            multiButtons={buttonsRaw}
            imageUrl={imageUrl}
            caption={caption}
            campaignId={item.id}
          />
        </div>

        <div className="flex items-center justify-end gap-2 border-t px-5 py-3">
          <button
            className="rounded-lg border px-3 py-2 text-gray-700 hover:bg-gray-50"
            onClick={onClose}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
}

/* ---------- Page ---------- */
function TemplateCampaignList() {
  const [raw, setRaw] = useState([]);
  const [loading, setLoading] = useState(true);
  const [sendingId, setSendingId] = useState(null);
  const [q, setQ] = useState("");
  const [onlyWithRecipients, setOnlyWithRecipients] = useState(false);
  const [sort, setSort] = useState("recent"); // recent | recipients | name
  const [activeType, setActiveType] = useState("all");
  const [viewMode, setViewMode] = useState("grid"); // grid | table
  const [inspector, setInspector] = useState(null);

  const navigate = useNavigate();

  const loadCampaigns = async () => {
    setLoading(true);
    try {
      const res = await axiosClient.get("/campaign/get-image-campaign");
      setRaw(res.data || []);
    } catch (err) {
      console.error(err);
      toast.error("❌ Failed to load template campaigns");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadCampaigns();
  }, []);

  const handleSend = async campaignId => {
    setSendingId(campaignId);
    try {
      await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
      toast.success("🚀 Campaign sent successfully!");
    } catch (err) {
      console.error("❌ Sending failed:", err);
      toast.error("❌ Failed to send campaign");
    } finally {
      setSendingId(null);
    }
  };

  const data = useMemo(() => raw.map(normalizeCampaign), [raw]);

  const view = useMemo(() => {
    let list = data;

    if (q.trim()) {
      const needle = q.toLowerCase();
      list = list.filter(
        c =>
          c.name.toLowerCase().includes(needle) ||
          c.body.toLowerCase().includes(needle)
      );
    }

    if (onlyWithRecipients) list = list.filter(c => c.recipients > 0);

    if (activeType !== "all") {
      list = list.filter(c => {
        if (activeType === "image_header") return c.kind === "image_header";
        if (activeType === "text_only") return c.kind === "text_only";
        if (activeType === "with_buttons") return c.hasButtons;
        if (activeType === "no_buttons") return !c.hasButtons;
        return true;
      });
    }

    list = [...list].sort((a, b) => {
      if (sort === "name") return a.name.localeCompare(b.name);
      if (sort === "recipients") return b.recipients - a.recipients;
      const ax = new Date(a.updatedAt || 0).getTime();
      const bx = new Date(b.updatedAt || 0).getTime();
      return bx - ax; // recent
    });

    return list;
  }, [data, q, onlyWithRecipients, activeType, sort]);

  return (
    <div className="mx-auto max-w-7xl px-4 py-8">
      {/* Header */}
      <div className="mb-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
        <div className="flex items-center gap-2">
          <FaRocket className="text-green-500 text-xl" />
          <h2 className="text-2xl md:text-2xl font-bold text-purple-500">
            Template Campaigns
          </h2>
          <button
            onClick={loadCampaigns}
            className="ml-3 inline-flex items-center gap-2 rounded-lg border px-3 py-2 text-sm text-gray-700 hover:bg-gray-50"
            title="Refresh"
          >
            <FaSyncAlt className={cx(loading && "animate-spin")} />
            Refresh
          </button>
        </div>

        {/* Controls */}
        <div className="flex flex-col gap-3 md:flex-row md:items-center">
          <div className="relative">
            <FaSearch className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
            <input
              value={q}
              onChange={e => setQ(e.target.value)}
              placeholder="Search by name or message…"
              className="w-full md:w-72 rounded-xl border pl-10 pr-3 py-2 focus:ring-2 focus:ring-purple-300 outline-none"
            />
          </div>

          <div className="flex items-center gap-2">
            <label className="inline-flex items-center gap-2 text-sm">
              <input
                type="checkbox"
                checked={onlyWithRecipients}
                onChange={e => setOnlyWithRecipients(e.target.checked)}
                className="h-4 w-4 rounded border-gray-300 text-purple-600 focus:ring-purple-400"
              />
              Only with recipients
            </label>

            <select
              value={sort}
              onChange={e => setSort(e.target.value)}
              className="rounded-xl border px-3 py-2 text-sm focus:ring-2 focus:ring-purple-300 outline-none"
            >
              <option value="recent">Sort: Recent</option>
              <option value="recipients">Sort: Recipients</option>
              <option value="name">Sort: Name</option>
            </select>
          </div>
        </div>
      </div>

      {/* Segmented filters */}
      <div className="mb-6 flex flex-wrap items-center gap-2">
        <span className="text-sm font-semibold text-gray-600 flex items-center gap-2">
          <FaFilter /> Filter:
        </span>
        {TYPE_FILTERS.map(f => (
          <button
            key={f.id}
            className={cx(
              "rounded-full px-3 py-1 text-sm",
              activeType === f.id
                ? "bg-purple-600 text-white"
                : "bg-gray-100 text-gray-700 hover:bg-gray-200"
            )}
            onClick={() => setActiveType(f.id)}
          >
            {f.label}
          </button>
        ))}

        <div className="ml-auto flex items-center gap-2">
          <button
            className={cx(
              "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
              viewMode === "grid"
                ? "bg-purple-50 border-purple-200 text-purple-700"
                : "text-gray-700 hover:bg-gray-50"
            )}
            onClick={() => setViewMode("grid")}
            title="Grid view"
          >
            <FaThLarge /> Grid
          </button>
          <button
            className={cx(
              "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
              viewMode === "table"
                ? "bg-purple-50 border-purple-200 text-purple-700"
                : "text-gray-700 hover:bg-gray-50"
            )}
            onClick={() => setViewMode("table")}
            title="Table view"
          >
            <FaTable /> Table
          </button>
        </div>
      </div>

      {/* Loading skeleton */}
      {loading && (
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {Array.from({ length: 6 }).map((_, i) => (
            <div
              key={i}
              className="rounded-2xl border bg-white p-4 shadow-sm animate-pulse"
            >
              <div className="h-40 w-full rounded-xl bg-gray-100" />
              <div className="mt-4 h-5 w-2/3 rounded bg-gray-100" />
              <div className="mt-2 h-4 w-1/3 rounded bg-gray-100" />
              <div className="mt-4 h-20 w-full rounded bg-gray-100" />
              <div className="mt-4 flex gap-2">
                <div className="h-9 w-24 rounded bg-gray-100" />
                <div className="h-9 w-24 rounded bg-gray-100" />
                <div className="h-9 w-24 rounded bg-gray-100" />
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Empty state */}
      {!loading && view.length === 0 && (
        <div className="mt-16 flex flex-col items-center justify-center text-center">
          <div className="rounded-3xl border p-10 shadow-sm bg-white max-w-lg">
            <div className="mx-auto mb-4 flex h-14 w-14 items-center justify-center rounded-2xl bg-purple-100">
              <FaListUl className="text-purple-600 text-xl" />
            </div>
            <h3 className="text-xl font-semibold text-gray-800">
              No template campaigns yet
            </h3>
            <p className="mt-2 text-gray-500">
              Create an image template campaign and assign recipients to start
              sending.
            </p>
            <div className="mt-6 flex items-center justify-center gap-3">
              <button
                onClick={() =>
                  navigate("/app/campaigns/image-campaigns/create")
                }
                className="rounded-xl bg-purple-600 px-4 py-2 font-semibold text-white hover:bg-purple-700"
              >
                New Campaign
              </button>
              <button
                onClick={loadCampaigns}
                className="rounded-xl border px-4 py-2 font-semibold text-gray-700 hover:bg-gray-50"
              >
                Refresh
              </button>
            </div>
          </div>
        </div>
      )}

      {/* GRID VIEW */}
      {!loading && view.length > 0 && viewMode === "grid" && (
        <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
          {view.map(t => {
            const sending = sendingId === t.id;
            return (
              <TemplateCard
                key={t.id}
                t={t}
                sending={sending}
                onOpenInspector={() => setInspector(t)}
                onSend={() => handleSend(t.id)}
                onAssign={() =>
                  navigate(
                    `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
                  )
                }
                onViewRecipients={() =>
                  navigate(
                    `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
                  )
                }
              />
            );
          })}
        </div>
      )}

      {/* TABLE VIEW (compact) */}
      {!loading && view.length > 0 && viewMode === "table" && (
        <div className="overflow-hidden rounded-2xl border bg-white shadow-sm">
          <div className="max-h-[70vh] overflow-auto">
            <table className="w-full text-[13px]">
              <thead className="sticky top-0 z-10 bg-gray-50 text-left text-gray-700 border-b">
                <tr>
                  <th className="px-3 py-2 font-semibold">Name</th>
                  <th className="px-3 py-2 font-semibold">Type</th>
                  <th className="px-3 py-2 font-semibold">Buttons</th>
                  <th className="px-3 py-2 font-semibold">Recipients</th>
                  <th className="px-3 py-2 font-semibold">Updated</th>
                  <th className="px-3 py-2 font-semibold text-right">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody>
                {view.map(t => (
                  <tr
                    key={t.id}
                    className="border-t hover:bg-gray-50/70 transition-colors"
                  >
                    <td className="px-3 py-2 font-medium text-gray-900">
                      {t.name}
                    </td>
                    <td className="px-3 py-2">
                      {t.kind === "image_header" ? "Image Header" : "Text Only"}
                    </td>
                    <td className="px-3 py-2">
                      {t.hasButtons ? t.buttons.length : 0}
                    </td>
                    <td className="px-3 py-2">{t.recipients}</td>
                    <td className="px-3 py-2">
                      {t.updatedAt
                        ? new Date(t.updatedAt).toLocaleString()
                        : "—"}
                    </td>
                    {/* <td className="px-3 py-2">
                      <div className="flex justify-end gap-2">
                        <button
                          className="rounded-md border px-2.5 py-1.5 hover:bg-gray-50"
                          onClick={() => setInspector(t)}
                        >
                          Preview
                        </button>
                        <button
                          className="rounded-md bg-purple-100 px-2.5 py-1.5 text-purple-800 hover:bg-purple-200"
                          onClick={() =>
                            navigate(
                              `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
                            )
                          }
                        >
                          Assign
                        </button>
                        <button
                          className="rounded-md bg-blue-100 px-2.5 py-1.5 text-blue-700 hover:bg-blue-200"
                          onClick={() =>
                            navigate(
                              `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
                            )
                          }
                        >
                          Recipients
                        </button>
                        <button
                          className="rounded-md bg-emerald-600 px-2.5 py-1.5 font-semibold text-white hover:bg-emerald-700 disabled:opacity-50"
                          disabled={t.recipients === 0}
                          onClick={() => handleSend(t.id)}
                        >
                          Send
                        </button>
                      </div>
                    </td> */}
                    <td className="px-3 py-2">
                      <div className="flex justify-end gap-2">
                        <button
                          className="rounded-md border px-2.5 py-1.5 hover:bg-gray-50"
                          onClick={() => setInspector(t)}
                        >
                          Preview
                        </button>

                        {/* ✅ New Edit button */}
                        <button
                          className="rounded-md bg-yellow-100 px-2.5 py-1.5 text-yellow-800 hover:bg-yellow-200"
                          onClick={() =>
                            navigate(`/app/campaigns/logs/${t.id}`)
                          }
                        >
                          Log
                        </button>

                        <button
                          className="rounded-md bg-purple-100 px-2.5 py-1.5 text-purple-800 hover:bg-purple-200"
                          onClick={() =>
                            navigate(
                              `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
                            )
                          }
                        >
                          Assign
                        </button>

                        <button
                          className="rounded-md bg-blue-100 px-2.5 py-1.5 text-blue-700 hover:bg-blue-200"
                          onClick={() =>
                            navigate(
                              `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
                            )
                          }
                        >
                          Recipients
                        </button>

                        <button
                          className="rounded-md bg-emerald-600 px-2.5 py-1.5 font-semibold text-white hover:bg-emerald-700 disabled:opacity-50"
                          disabled={t.recipients === 0}
                          onClick={() => handleSend(t.id)}
                        >
                          Send
                        </button>
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <InspectorModal item={inspector} onClose={() => setInspector(null)} />
    </div>
  );
}

export default TemplateCampaignList;

// // 📄 src/pages/campaigns/TemplateCampaignList.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
// import { useNavigate } from "react-router-dom";
// import {
//   FaRocket,
//   FaSearch,
//   FaSyncAlt,
//   FaImage,
//   FaUsers,
//   FaUserCheck,
//   FaListUl,
//   FaPaperPlane,
//   FaUserPlus,
//   FaTable,
//   FaThLarge,
//   FaFilter,
// } from "react-icons/fa";

// function cx(...xs) {
//   return xs.filter(Boolean).join(" ");
// }

// /** --------------------------------
//  * Helpers: robust extractors
//  * --------------------------------*/
// function pickFirst(...vals) {
//   for (const v of vals) {
//     if (v !== undefined && v !== null && String(v).trim() !== "") return v;
//   }
//   return "";
// }

// // BODY from multiple shapes
// function extractBody(raw) {
//   const flat = pickFirst(
//     raw?.messageBody,
//     raw?.templateBody,
//     raw?.sampleBody,
//     raw?.messageTemplate,
//     raw?.body,
//     raw?.text,
//     raw?.message
//   );
//   if (flat) return flat;

//   // WABA-like nested
//   const comp1 = raw?.template?.components?.find?.(
//     c => c?.type?.toUpperCase() === "BODY"
//   )?.text;
//   if (comp1) return comp1;

//   const comp2 = raw?.template?.components?.body?.text;
//   if (comp2) return comp2;

//   const comp3 = raw?.payload?.template?.body || raw?.payload?.template?.text;
//   if (comp3) return comp3;

//   const comp4 = raw?.content?.body;
//   if (comp4) return comp4;

//   return "";
// }

// // Buttons normalized to {title,type,value}
// function extractButtons(raw) {
//   const btns =
//     raw?.multiButtons ||
//     raw?.buttonParams ||
//     raw?.buttons ||
//     raw?.templateButtons ||
//     raw?.payload?.template?.buttons ||
//     raw?.content?.buttons ||
//     [];
//   return Array.isArray(btns)
//     ? btns.map(b => ({
//         title: b?.title ?? b?.buttonText ?? b?.text ?? "Button",
//         type: b?.type ?? b?.buttonType ?? "url",
//         value: b?.value ?? b?.targetUrl ?? b?.url ?? undefined,
//       }))
//     : [];
// }

// function extractImageUrl(raw) {
//   return (
//     raw?.imageUrl ||
//     raw?.mediaUrl ||
//     raw?.headerImage ||
//     raw?.template?.components?.find?.(c => c?.type?.toUpperCase() === "HEADER")
//       ?.example?.header_handle?.[0] ||
//     raw?.payload?.template?.image ||
//     null
//   );
// }

// function extractCaption(raw) {
//   return pickFirst(raw?.imageCaption, raw?.caption, raw?.headerCaption);
// }

// /** -----------------------
//  * Normalizer (single source of truth)
//  * ---------------------- */
// function normalizeCampaign(raw) {
//   const buttons = extractButtons(raw);
//   const imageUrl = extractImageUrl(raw);
//   const body = extractBody(raw);

//   if (!body) {
//     // Dev aid: see problematic records in console (won’t break UI)
//     // eslint-disable-next-line no-console
//     console.warn(
//       "[TemplateCampaignList] Empty body for campaign id:",
//       raw?.id,
//       raw
//     );
//   }

//   return {
//     id: raw?.id,
//     name: raw?.name || "Untitled Campaign",
//     kind: imageUrl ? "image_header" : "text_only",
//     body,
//     caption: extractCaption(raw),
//     imageUrl,
//     buttons,
//     hasButtons: Array.isArray(buttons) && buttons.length > 0,
//     recipients: raw?.recipientCount || 0,
//     updatedAt: raw?.updatedAt || raw?.createdAt || null,
//     raw, // keep original for any future needs
//   };
// }

// const TYPE_FILTERS = [
//   { id: "all", label: "All" },
//   { id: "image_header", label: "Image Header" },
//   { id: "text_only", label: "Text Only" },
//   { id: "with_buttons", label: "With Buttons" },
//   { id: "no_buttons", label: "No Buttons" },
// ];

// /** -----------------------
//  * Subcomponents
//  * ---------------------- */
// function InspectorModal({ item, onClose }) {
//   if (!item) return null;
//   return (
//     <div
//       className="fixed inset-0 z-50 flex items-end sm:items-center justify-center bg-black/40 p-4"
//       onClick={onClose}
//     >
//       <div
//         className="w-full max-w-2xl overflow-hidden rounded-2xl bg-white shadow-xl"
//         onClick={e => e.stopPropagation()}
//       >
//         <div className="flex items-center justify-between border-b px-5 py-3">
//           <div>
//             <div className="text-lg font-semibold text-gray-900">
//               {item.name}
//             </div>
//             <div className="text-xs text-gray-500">Full fidelity preview</div>
//           </div>
//           <button
//             className="rounded-lg border px-3 py-1.5 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//         <div className="p-4">
//           <WhatsAppBubblePreview
//             messageTemplate={item.body}
//             multiButtons={item.buttons}
//             imageUrl={item.imageUrl || undefined}
//             caption={item.caption}
//             campaignId={item.id}
//           />
//         </div>
//         <div className="flex items-center justify-end gap-2 border-t px-5 py-3">
//           <button
//             className="rounded-lg border px-3 py-2 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// }

// function TemplateCard({
//   t,
//   onSend,
//   onAssign,
//   onViewRecipients,
//   onOpenInspector,
//   sending,
// }) {
//   const hasRecipients = t.recipients > 0;

//   return (
//     <div className="group relative flex flex-col overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm transition-shadow hover:shadow-md">
//       {/* Media Slot — fixed 16:9 for uniformity */}
//       <div className="relative">
//         <div className="aspect-[16/9] w-full bg-gray-50 flex items-center justify-center">
//           {t.kind === "image_header" && t.imageUrl ? (
//             <img
//               src={t.imageUrl}
//               alt="Campaign"
//               className="h-full w-full object-cover"
//             />
//           ) : (
//             <div className="flex flex-col items-center text-gray-400">
//               <svg
//                 width="40"
//                 height="40"
//                 viewBox="0 0 24 24"
//                 className="opacity-80"
//               >
//                 <path
//                   fill="currentColor"
//                   d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14zm-2 0H5V5h14zM8 13l2.03 2.71L12 13l3 4H7z"
//                 />
//               </svg>
//               <span className="mt-2 text-xs text-gray-500">
//                 {t.kind === "text_only" ? "Text template" : "No media"}
//               </span>
//             </div>
//           )}
//         </div>

//         {/* Type chip (neutral) */}
//         <div className="absolute right-3 top-3">
//           <span className="inline-flex items-center gap-1 rounded-full bg-black/50 px-2 py-0.5 text-[11px] text-white backdrop-blur-sm">
//             {t.kind === "image_header" ? "Image header" : "Text only"}
//           </span>
//         </div>
//       </div>

//       {/* Body */}
//       <div className="flex flex-col gap-3 p-4">
//         {/* Title + recipients */}
//         <div className="flex items-start justify-between gap-3">
//           <h3 className="line-clamp-1 text-base font-semibold text-gray-900">
//             {t.name}
//           </h3>
//           <span
//             className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] font-medium ${
//               hasRecipients
//                 ? "bg-emerald-50 text-emerald-700"
//                 : "bg-gray-100 text-gray-500"
//             }`}
//             title={`${t.recipients} recipient(s)`}
//           >
//             <svg width="14" height="14" viewBox="0 0 24 24">
//               <path
//                 fill="currentColor"
//                 d="M12 12a5 5 0 1 0-5-5a5 5 0 0 0 5 5m7 8v-1a6 6 0 0 0-12 0v1z"
//               />
//             </svg>
//             {t.recipients}
//           </span>
//         </div>

//         {/* Compact preview (click → inspector) */}
//         <button
//           type="button"
//           onClick={onOpenInspector}
//           className="rounded-lg border border-gray-200 bg-gray-50 p-2 text-left transition hover:bg-gray-100"
//           title="Open full preview"
//         >
//           <WhatsAppBubblePreview
//             messageTemplate={t.body}
//             multiButtons={t.buttons}
//             imageUrl={t.imageUrl || undefined}
//             caption={t.caption}
//             campaignId={t.id}
//           />
//         </button>

//         {/* Actions */}
//         <div className="mt-1 grid grid-cols-3 gap-2">
//           <button
//             disabled={!hasRecipients || sending}
//             onClick={onSend}
//             className={`inline-flex items-center justify-center gap-2 rounded-lg px-3 py-2 text-sm font-semibold transition
//               ${
//                 hasRecipients
//                   ? "bg-emerald-600 text-white hover:bg-emerald-700"
//                   : "bg-gray-200 text-gray-400 cursor-not-allowed"
//               }`}
//             title={hasRecipients ? "Send campaign" : "Assign recipients first"}
//           >
//             {sending ? "Sending…" : "Send"}
//           </button>

//           <button
//             onClick={onAssign}
//             className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
//             title="Assign recipients"
//           >
//             Assign
//           </button>

//           <button
//             onClick={onViewRecipients}
//             className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
//             title="View recipients"
//           >
//             Recipients
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// }

// /** -----------------------
//  * Page
//  * ---------------------- */
// function TemplateCampaignList() {
//   const [raw, setRaw] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [sendingId, setSendingId] = useState(null);
//   const [q, setQ] = useState("");
//   const [onlyWithRecipients, setOnlyWithRecipients] = useState(false);
//   const [sort, setSort] = useState("recent"); // recent | recipients | name
//   const [activeType, setActiveType] = useState("all");
//   const [viewMode, setViewMode] = useState("grid"); // grid | table
//   const [inspector, setInspector] = useState(null);

//   const navigate = useNavigate();

//   const loadCampaigns = async () => {
//     setLoading(true);
//     try {
//       const res = await axiosClient.get("/campaign/get-image-campaign");
//       setRaw(res.data || []);
//     } catch (err) {
//       console.error(err);
//       toast.error("❌ Failed to load template campaigns");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   const data = useMemo(() => raw.map(normalizeCampaign), [raw]);

//   const view = useMemo(() => {
//     let list = data;

//     if (q.trim()) {
//       const needle = q.toLowerCase();
//       list = list.filter(
//         c =>
//           c.name.toLowerCase().includes(needle) ||
//           c.body.toLowerCase().includes(needle)
//       );
//     }

//     if (onlyWithRecipients) list = list.filter(c => c.recipients > 0);

//     if (activeType !== "all") {
//       list = list.filter(c => {
//         if (activeType === "image_header") return c.kind === "image_header";
//         if (activeType === "text_only") return c.kind === "text_only";
//         if (activeType === "with_buttons") return c.hasButtons;
//         if (activeType === "no_buttons") return !c.hasButtons;
//         return true;
//       });
//     }

//     list = [...list].sort((a, b) => {
//       if (sort === "name") return a.name.localeCompare(b.name);
//       if (sort === "recipients") return b.recipients - a.recipients;
//       const ax = new Date(a.updatedAt || 0).getTime();
//       const bx = new Date(b.updatedAt || 0).getTime();
//       return bx - ax; // recent
//     });

//     return list;
//   }, [data, q, onlyWithRecipients, activeType, sort]);

//   return (
//     <div className="mx-auto max-w-7xl px-4 py-8">
//       {/* Header */}
//       <div className="mb-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
//         <div className="flex items-center gap-2">
//           <FaRocket className="text-green-500 text-xl" />
//           <h2 className="text-2xl md:text-3xl font-bold text-purple-700">
//             Template Campaigns
//           </h2>
//           <button
//             onClick={loadCampaigns}
//             className="ml-3 inline-flex items-center gap-2 rounded-lg border px-3 py-2 text-sm text-gray-700 hover:bg-gray-50"
//             title="Refresh"
//           >
//             <FaSyncAlt className={cx(loading && "animate-spin")} />
//             Refresh
//           </button>
//         </div>

//         {/* Controls */}
//         <div className="flex flex-col gap-3 md:flex-row md:items-center">
//           <div className="relative">
//             <FaSearch className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
//             <input
//               value={q}
//               onChange={e => setQ(e.target.value)}
//               placeholder="Search by name or message…"
//               className="w-full md:w-72 rounded-xl border pl-10 pr-3 py-2 focus:ring-2 focus:ring-purple-300 outline-none"
//             />
//           </div>

//           <div className="flex items-center gap-2">
//             <label className="inline-flex items-center gap-2 text-sm">
//               <input
//                 type="checkbox"
//                 checked={onlyWithRecipients}
//                 onChange={e => setOnlyWithRecipients(e.target.checked)}
//                 className="h-4 w-4 rounded border-gray-300 text-purple-600 focus:ring-purple-400"
//               />
//               Only with recipients
//             </label>

//             <select
//               value={sort}
//               onChange={e => setSort(e.target.value)}
//               className="rounded-xl border px-3 py-2 text-sm focus:ring-2 focus:ring-purple-300 outline-none"
//             >
//               <option value="recent">Sort: Recent</option>
//               <option value="recipients">Sort: Recipients</option>
//               <option value="name">Sort: Name</option>
//             </select>
//           </div>
//         </div>
//       </div>

//       {/* Segmented filters */}
//       <div className="mb-6 flex flex-wrap items-center gap-2">
//         <span className="text-sm font-semibold text-gray-600 flex items-center gap-2">
//           <FaFilter /> Filter:
//         </span>
//         {TYPE_FILTERS.map(f => (
//           <button
//             key={f.id}
//             className={cx(
//               "rounded-full px-3 py-1 text-sm",
//               activeType === f.id
//                 ? "bg-purple-600 text-white"
//                 : "bg-gray-100 text-gray-700 hover:bg-gray-200"
//             )}
//             onClick={() => setActiveType(f.id)}
//           >
//             {f.label}
//           </button>
//         ))}

//         <div className="ml-auto flex items-center gap-2">
//           <button
//             className={cx(
//               "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
//               viewMode === "grid"
//                 ? "bg-purple-50 border-purple-200 text-purple-700"
//                 : "text-gray-700 hover:bg-gray-50"
//             )}
//             onClick={() => setViewMode("grid")}
//             title="Grid view"
//           >
//             <FaThLarge /> Grid
//           </button>
//           <button
//             className={cx(
//               "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
//               viewMode === "table"
//                 ? "bg-purple-50 border-purple-200 text-purple-700"
//                 : "text-gray-700 hover:bg-gray-50"
//             )}
//             onClick={() => setViewMode("table")}
//             title="Table view"
//           >
//             <FaTable /> Table
//           </button>
//         </div>
//       </div>

//       {/* Loading skeleton */}
//       {loading && (
//         <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
//           {Array.from({ length: 6 }).map((_, i) => (
//             <div
//               key={i}
//               className="rounded-2xl border bg-white p-4 shadow-sm animate-pulse"
//             >
//               <div className="h-40 w-full rounded-xl bg-gray-100" />
//               <div className="mt-4 h-5 w-2/3 rounded bg-gray-100" />
//               <div className="mt-2 h-4 w-1/3 rounded bg-gray-100" />
//               <div className="mt-4 h-20 w-full rounded bg-gray-100" />
//               <div className="mt-4 flex gap-2">
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//               </div>
//             </div>
//           ))}
//         </div>
//       )}

//       {/* Empty state */}
//       {!loading && view.length === 0 && (
//         <div className="mt-16 flex flex-col items-center justify-center text-center">
//           <div className="rounded-3xl border p-10 shadow-sm bg-white max-w-lg">
//             <div className="mx-auto mb-4 flex h-14 w-14 items-center justify-center rounded-2xl bg-purple-100">
//               <FaListUl className="text-purple-600 text-xl" />
//             </div>
//             <h3 className="text-xl font-semibold text-gray-800">
//               No template campaigns yet
//             </h3>
//             <p className="mt-2 text-gray-500">
//               Create an image template campaign and assign recipients to start
//               sending.
//             </p>
//             <div className="mt-6 flex items-center justify-center gap-3">
//               <button
//                 onClick={() =>
//                   navigate("/app/campaigns/image-campaigns/create")
//                 }
//                 className="rounded-xl bg-purple-600 px-4 py-2 font-semibold text-white hover:bg-purple-700"
//               >
//                 New Campaign
//               </button>
//               <button
//                 onClick={loadCampaigns}
//                 className="rounded-xl border px-4 py-2 font-semibold text-gray-700 hover:bg-gray-50"
//               >
//                 Refresh
//               </button>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* GRID VIEW */}
//       {!loading && view.length > 0 && viewMode === "grid" && (
//         <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
//           {view.map(t => {
//             const sending = sendingId === t.id;
//             return (
//               <TemplateCard
//                 key={t.id}
//                 t={t}
//                 sending={sending}
//                 onOpenInspector={() => setInspector(t)}
//                 onSend={() => handleSend(t.id)}
//                 onAssign={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
//                   )
//                 }
//                 onViewRecipients={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
//                   )
//                 }
//               />
//             );
//           })}
//         </div>
//       )}

//       {/* TABLE VIEW (compact) */}
//       {!loading && view.length > 0 && viewMode === "table" && (
//         <div className="overflow-hidden rounded-2xl border bg-white shadow-sm">
//           <div className="max-h-[70vh] overflow-auto">
//             <table className="w-full text-[13px]">
//               <thead className="sticky top-0 z-10 bg-gray-50 text-left text-gray-700 border-b">
//                 <tr>
//                   <th className="px-3 py-2 font-semibold">Name</th>
//                   <th className="px-3 py-2 font-semibold">Type</th>
//                   <th className="px-3 py-2 font-semibold">Buttons</th>
//                   <th className="px-3 py-2 font-semibold">Recipients</th>
//                   <th className="px-3 py-2 font-semibold">Updated</th>
//                   <th className="px-3 py-2 font-semibold text-right">
//                     Actions
//                   </th>
//                 </tr>
//               </thead>
//               <tbody>
//                 {view.map(t => (
//                   <tr
//                     key={t.id}
//                     className="border-t hover:bg-gray-50/70 transition-colors"
//                   >
//                     <td className="px-3 py-2 font-medium text-gray-900">
//                       {t.name}
//                     </td>
//                     <td className="px-3 py-2">
//                       {t.kind === "image_header" ? "Image Header" : "Text Only"}
//                     </td>
//                     <td className="px-3 py-2">
//                       {t.hasButtons ? t.buttons.length : 0}
//                     </td>
//                     <td className="px-3 py-2">{t.recipients}</td>
//                     <td className="px-3 py-2">
//                       {t.updatedAt
//                         ? new Date(t.updatedAt).toLocaleString()
//                         : "—"}
//                     </td>
//                     <td className="px-3 py-2">
//                       <div className="flex justify-end gap-2">
//                         <button
//                           className="rounded-md border px-2.5 py-1.5 hover:bg-gray-50"
//                           onClick={() => setInspector(t)}
//                         >
//                           Preview
//                         </button>
//                         <button
//                           className="rounded-md bg-purple-100 px-2.5 py-1.5 text-purple-800 hover:bg-purple-200"
//                           onClick={() =>
//                             navigate(
//                               `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
//                             )
//                           }
//                         >
//                           Assign
//                         </button>
//                         <button
//                           className="rounded-md bg-blue-100 px-2.5 py-1.5 text-blue-700 hover:bg-blue-200"
//                           onClick={() =>
//                             navigate(
//                               `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
//                             )
//                           }
//                         >
//                           Recipients
//                         </button>
//                         <button
//                           className="rounded-md bg-emerald-600 px-2.5 py-1.5 font-semibold text-white hover:bg-emerald-700 disabled:opacity-50"
//                           disabled={t.recipients === 0}
//                           onClick={() => handleSend(t.id)}
//                         >
//                           Send
//                         </button>
//                       </div>
//                     </td>
//                   </tr>
//                 ))}
//               </tbody>
//             </table>
//           </div>
//         </div>
//       )}

//       <InspectorModal item={inspector} onClose={() => setInspector(null)} />
//     </div>
//   );
// }

// export default TemplateCampaignList;

// // 📄 src/pages/campaigns/TemplateCampaignList.jsx
// import React, { useEffect, useMemo, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
// import { useNavigate } from "react-router-dom";
// import {
//   FaRocket,
//   FaSearch,
//   FaSyncAlt,
//   FaImage,
//   FaUsers,
//   FaUserCheck,
//   FaListUl,
//   FaPaperPlane,
//   FaUserPlus,
//   FaTable,
//   FaThLarge,
//   FaFilter,
// } from "react-icons/fa";

// function cx(...xs) {
//   return xs.filter(Boolean).join(" ");
// }

// /** -----------------------
//  * Normalizer (single source of truth)
//  * ---------------------- */
// function normalizeCampaign(raw) {
//   const buttons = raw?.multiButtons || raw?.buttonParams || raw?.buttons || [];
//   const imageUrl = raw?.imageUrl || null;
//   const body =
//     raw?.messageBody ||
//     raw?.templateBody ||
//     raw?.sampleBody ||
//     raw?.messageTemplate ||
//     raw?.body ||
//     "";

//   return {
//     id: raw?.id,
//     name: raw?.name || "Untitled Campaign",
//     kind: imageUrl ? "image_header" : "text_only",
//     body,
//     caption: raw?.imageCaption || raw?.caption || "",
//     imageUrl,
//     buttons,
//     hasButtons: Array.isArray(buttons) && buttons.length > 0,
//     recipients: raw?.recipientCount || 0,
//     updatedAt: raw?.updatedAt || raw?.createdAt || null,
//     raw, // keep original for any future needs
//   };
// }

// const TYPE_FILTERS = [
//   { id: "all", label: "All" },
//   { id: "image_header", label: "Image Header" },
//   { id: "text_only", label: "Text Only" },
//   { id: "with_buttons", label: "With Buttons" },
//   { id: "no_buttons", label: "No Buttons" },
// ];

// /** -----------------------
//  * Subcomponents
//  * ---------------------- */
// function InspectorModal({ item, onClose }) {
//   if (!item) return null;
//   return (
//     <div
//       className="fixed inset-0 z-50 flex items-end sm:items-center justify-center bg-black/40 p-4"
//       onClick={onClose}
//     >
//       <div
//         className="w-full max-w-2xl overflow-hidden rounded-2xl bg-white shadow-xl"
//         onClick={e => e.stopPropagation()}
//       >
//         <div className="flex items-center justify-between border-b px-5 py-3">
//           <div>
//             <div className="text-lg font-semibold text-gray-900">
//               {item.name}
//             </div>
//             <div className="text-xs text-gray-500">Full fidelity preview</div>
//           </div>
//           <button
//             className="rounded-lg border px-3 py-1.5 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//         <div className="p-4">
//           <WhatsAppBubblePreview
//             messageTemplate={item.body}
//             multiButtons={item.buttons}
//             imageUrl={item.imageUrl || undefined}
//             caption={item.caption}
//             campaignId={item.id}
//           />
//         </div>
//         <div className="flex items-center justify-end gap-2 border-t px-5 py-3">
//           <button
//             className="rounded-lg border px-3 py-2 text-gray-700 hover:bg-gray-50"
//             onClick={onClose}
//           >
//             Close
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// }

// // function TemplateCard({
// //   t,
// //   onSend,
// //   onAssign,
// //   onViewRecipients,
// //   onOpenInspector,
// //   sending,
// // }) {
// //   const hasRecipients = t.recipients > 0;

// //   return (
// //     <div className="group relative flex flex-col overflow-hidden rounded-2xl border bg-white shadow-sm transition hover:shadow-lg">
// //       {/* Media Slot — fixed 16:9 to normalize card heights */}
// //       <div className="relative">
// //         <div className="aspect-[16/9] w-full bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
// //           {t.kind === "image_header" && t.imageUrl ? (
// //             <img
// //               src={t.imageUrl}
// //               alt="Campaign"
// //               className="h-full w-full object-cover"
// //             />
// //           ) : (
// //             <div className="flex flex-col items-center text-gray-400">
// //               <FaImage className="text-4xl" />
// //               <span className="mt-2 text-xs">
// //                 {t.kind === "text_only" ? "Text Template" : "No Media"}
// //               </span>
// //             </div>
// //           )}
// //         </div>
// //         <div className="absolute left-0 top-0 h-1 w-full bg-gradient-to-r from-purple-500 via-purple-400 to-green-400" />
// //         <div className="absolute right-3 top-3">
// //           <span className="inline-flex items-center gap-1 rounded-full bg-black/60 px-2 py-1 text-xs text-white backdrop-blur">
// //             {t.kind === "image_header" ? "Image Header" : "Text Only"}
// //           </span>
// //         </div>
// //       </div>

// //       <div className="flex flex-col gap-3 p-4">
// //         <div className="flex items-start justify-between gap-3">
// //           <h3 className="line-clamp-1 text-lg font-semibold text-gray-900">
// //             {t.name}
// //           </h3>
// //           <span
// //             className={cx(
// //               "inline-flex items-center gap-1 rounded-full px-2 py-1 text-xs font-medium",
// //               hasRecipients
// //                 ? "bg-green-100 text-green-700"
// //                 : "bg-gray-100 text-gray-500"
// //             )}
// //             title={`${t.recipients} recipient(s)`}
// //           >
// //             {hasRecipients ? <FaUserCheck /> : <FaUsers />}
// //             {t.recipients}
// //           </span>
// //         </div>

// //         {/* Curated, compact preview (click to open full inspector) */}
// //         <div
// //           className="rounded-xl border bg-gray-50/60 p-2 cursor-pointer"
// //           onClick={onOpenInspector}
// //           title="Open full preview"
// //         >
// //           <WhatsAppBubblePreview
// //             messageTemplate={t.body}
// //             multiButtons={t.buttons}
// //             imageUrl={t.imageUrl || undefined}
// //             caption={t.caption}
// //             campaignId={t.id}
// //           />
// //         </div>

// //         {/* Actions */}
// //         <div className="mt-1 grid grid-cols-3 gap-2">
// //           <button
// //             disabled={!hasRecipients || sending}
// //             onClick={onSend}
// //             className={cx(
// //               "inline-flex items-center justify-center gap-2 rounded-lg px-3 py-2 font-semibold transition",
// //               hasRecipients
// //                 ? "bg-green-600 text-white hover:bg-green-700"
// //                 : "bg-gray-200 text-gray-400 cursor-not-allowed"
// //             )}
// //             title={hasRecipients ? "Send campaign" : "Assign recipients first"}
// //           >
// //             <FaPaperPlane className={sending ? "animate-pulse" : ""} />
// //             {sending ? "Sending…" : "Send"}
// //           </button>

// //           <button
// //             onClick={onAssign}
// //             className="inline-flex items-center justify-center gap-2 rounded-lg bg-purple-100 px-3 py-2 font-semibold text-purple-800 hover:bg-purple-200"
// //             title="Assign recipients"
// //           >
// //             <FaUserPlus />
// //             Assign
// //           </button>

// //           <button
// //             onClick={onViewRecipients}
// //             className="inline-flex items-center justify-center gap-2 rounded-lg bg-blue-100 px-3 py-2 font-semibold text-blue-700 hover:bg-blue-200"
// //             title="View recipients"
// //           >
// //             <FaListUl />
// //             Recipients
// //           </button>
// //         </div>
// //       </div>
// //     </div>
// //   );
// // }
// function TemplateCard({
//   t,
//   onSend,
//   onAssign,
//   onViewRecipients,
//   onOpenInspector,
//   sending,
// }) {
//   const hasRecipients = t.recipients > 0;

//   return (
//     <div className="group relative flex flex-col overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm transition-shadow hover:shadow-md">
//       {/* Media Slot — fixed 16:9 for uniformity */}
//       <div className="relative">
//         <div className="aspect-[16/9] w-full bg-gray-50 flex items-center justify-center">
//           {t.kind === "image_header" && t.imageUrl ? (
//             <img
//               src={t.imageUrl}
//               alt="Campaign"
//               className="h-full w-full object-cover"
//             />
//           ) : (
//             <div className="flex flex-col items-center text-gray-400">
//               <svg
//                 width="40"
//                 height="40"
//                 viewBox="0 0 24 24"
//                 className="opacity-80"
//               >
//                 <path
//                   fill="currentColor"
//                   d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14zm-2 0H5V5h14zM8 13l2.03 2.71L12 13l3 4H7z"
//                 />
//               </svg>
//               <span className="mt-2 text-xs text-gray-500">
//                 {t.kind === "text_only" ? "Text template" : "No media"}
//               </span>
//             </div>
//           )}
//         </div>

//         {/* Type chip (neutral) */}
//         <div className="absolute right-3 top-3">
//           <span className="inline-flex items-center gap-1 rounded-full bg-black/50 px-2 py-0.5 text-[11px] text-white backdrop-blur-sm">
//             {t.kind === "image_header" ? "Image header" : "Text only"}
//           </span>
//         </div>
//       </div>

//       {/* Body */}
//       <div className="flex flex-col gap-3 p-4">
//         {/* Title + recipients */}
//         <div className="flex items-start justify-between gap-3">
//           <h3 className="line-clamp-1 text-base font-semibold text-gray-900">
//             {t.name}
//           </h3>
//           <span
//             className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] font-medium ${
//               hasRecipients
//                 ? "bg-emerald-50 text-emerald-700"
//                 : "bg-gray-100 text-gray-500"
//             }`}
//             title={`${t.recipients} recipient(s)`}
//           >
//             <svg width="14" height="14" viewBox="0 0 24 24">
//               <path
//                 fill="currentColor"
//                 d="M12 12a5 5 0 1 0-5-5a5 5 0 0 0 5 5m7 8v-1a6 6 0 0 0-12 0v1z"
//               />
//             </svg>
//             {t.recipients}
//           </span>
//         </div>

//         {/* Compact preview (click → inspector) */}
//         <button
//           type="button"
//           onClick={onOpenInspector}
//           className="rounded-lg border border-gray-200 bg-gray-50 p-2 text-left transition hover:bg-gray-100"
//           title="Open full preview"
//         >
//           <WhatsAppBubblePreview
//             messageTemplate={t.body}
//             multiButtons={t.buttons}
//             imageUrl={t.imageUrl || undefined}
//             caption={t.caption}
//             campaignId={t.id}
//           />
//         </button>

//         {/* Actions */}
//         <div className="mt-1 grid grid-cols-3 gap-2">
//           <button
//             disabled={!hasRecipients || sending}
//             onClick={onSend}
//             className={`inline-flex items-center justify-center gap-2 rounded-lg px-3 py-2 text-sm font-semibold transition
//               ${
//                 hasRecipients
//                   ? "bg-emerald-600 text-white hover:bg-emerald-700"
//                   : "bg-gray-200 text-gray-400 cursor-not-allowed"
//               }`}
//             title={hasRecipients ? "Send campaign" : "Assign recipients first"}
//           >
//             {sending ? "Sending…" : "Send"}
//           </button>

//           <button
//             onClick={onAssign}
//             className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
//             title="Assign recipients"
//           >
//             Assign
//           </button>

//           <button
//             onClick={onViewRecipients}
//             className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
//             title="View recipients"
//           >
//             Recipients
//           </button>
//         </div>
//       </div>
//     </div>
//   );
// }

// /** -----------------------
//  * Page
//  * ---------------------- */
// function TemplateCampaignList() {
//   const [raw, setRaw] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [sendingId, setSendingId] = useState(null);
//   const [q, setQ] = useState("");
//   const [onlyWithRecipients, setOnlyWithRecipients] = useState(false);
//   const [sort, setSort] = useState("recent"); // recent | recipients | name
//   const [activeType, setActiveType] = useState("all");
//   const [viewMode, setViewMode] = useState("grid"); // grid | table
//   const [inspector, setInspector] = useState(null);

//   const navigate = useNavigate();

//   const loadCampaigns = async () => {
//     setLoading(true);
//     try {
//       const res = await axiosClient.get("/campaign/get-image-campaign");
//       setRaw(res.data || []);
//     } catch (err) {
//       console.error(err);
//       toast.error("❌ Failed to load template campaigns");
//     } finally {
//       setLoading(false);
//     }
//   };

//   useEffect(() => {
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   const data = useMemo(() => raw.map(normalizeCampaign), [raw]);

//   const view = useMemo(() => {
//     let list = data;

//     if (q.trim()) {
//       const needle = q.toLowerCase();
//       list = list.filter(
//         c =>
//           c.name.toLowerCase().includes(needle) ||
//           c.body.toLowerCase().includes(needle)
//       );
//     }

//     if (onlyWithRecipients) list = list.filter(c => c.recipients > 0);

//     if (activeType !== "all") {
//       list = list.filter(c => {
//         if (activeType === "image_header") return c.kind === "image_header";
//         if (activeType === "text_only") return c.kind === "text_only";
//         if (activeType === "with_buttons") return c.hasButtons;
//         if (activeType === "no_buttons") return !c.hasButtons;
//         return true;
//       });
//     }

//     list = [...list].sort((a, b) => {
//       if (sort === "name") return a.name.localeCompare(b.name);
//       if (sort === "recipients") return b.recipients - a.recipients;
//       const ax = new Date(a.updatedAt || 0).getTime();
//       const bx = new Date(b.updatedAt || 0).getTime();
//       return bx - ax; // recent
//     });

//     return list;
//   }, [data, q, onlyWithRecipients, activeType, sort]);

//   return (
//     <div className="mx-auto max-w-7xl px-4 py-8">
//       {/* Header */}
//       <div className="mb-6 flex flex-col gap-4 md:flex-row md:items-center md:justify-between">
//         <div className="flex items-center gap-2">
//           <FaRocket className="text-green-500 text-xl" />
//           <h2 className="text-2xl md:text-3xl font-bold text-purple-700">
//             Template Campaigns
//           </h2>
//           <button
//             onClick={loadCampaigns}
//             className="ml-3 inline-flex items-center gap-2 rounded-lg border px-3 py-2 text-sm text-gray-700 hover:bg-gray-50"
//             title="Refresh"
//           >
//             <FaSyncAlt className={cx(loading && "animate-spin")} />
//             Refresh
//           </button>
//         </div>

//         {/* Controls */}
//         <div className="flex flex-col gap-3 md:flex-row md:items-center">
//           <div className="relative">
//             <FaSearch className="pointer-events-none absolute left-3 top-1/2 -translate-y-1/2 text-gray-400" />
//             <input
//               value={q}
//               onChange={e => setQ(e.target.value)}
//               placeholder="Search by name or message…"
//               className="w-full md:w-72 rounded-xl border pl-10 pr-3 py-2 focus:ring-2 focus:ring-purple-300 outline-none"
//             />
//           </div>

//           <div className="flex items-center gap-2">
//             <label className="inline-flex items-center gap-2 text-sm">
//               <input
//                 type="checkbox"
//                 checked={onlyWithRecipients}
//                 onChange={e => setOnlyWithRecipients(e.target.checked)}
//                 className="h-4 w-4 rounded border-gray-300 text-purple-600 focus:ring-purple-400"
//               />
//               Only with recipients
//             </label>

//             <select
//               value={sort}
//               onChange={e => setSort(e.target.value)}
//               className="rounded-xl border px-3 py-2 text-sm focus:ring-2 focus:ring-purple-300 outline-none"
//             >
//               <option value="recent">Sort: Recent</option>
//               <option value="recipients">Sort: Recipients</option>
//               <option value="name">Sort: Name</option>
//             </select>
//           </div>
//         </div>
//       </div>

//       {/* Segmented filters */}
//       <div className="mb-6 flex flex-wrap items-center gap-2">
//         <span className="text-sm font-semibold text-gray-600 flex items-center gap-2">
//           <FaFilter /> Filter:
//         </span>
//         {TYPE_FILTERS.map(f => (
//           <button
//             key={f.id}
//             className={cx(
//               "rounded-full px-3 py-1 text-sm",
//               activeType === f.id
//                 ? "bg-purple-600 text-white"
//                 : "bg-gray-100 text-gray-700 hover:bg-gray-200"
//             )}
//             onClick={() => setActiveType(f.id)}
//           >
//             {f.label}
//           </button>
//         ))}

//         <div className="ml-auto flex items-center gap-2">
//           <button
//             className={cx(
//               "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
//               viewMode === "grid"
//                 ? "bg-purple-50 border-purple-200 text-purple-700"
//                 : "text-gray-700 hover:bg-gray-50"
//             )}
//             onClick={() => setViewMode("grid")}
//             title="Grid view"
//           >
//             <FaThLarge /> Grid
//           </button>
//           <button
//             className={cx(
//               "inline-flex items-center gap-2 rounded-xl border px-3 py-2 text-sm",
//               viewMode === "table"
//                 ? "bg-purple-50 border-purple-200 text-purple-700"
//                 : "text-gray-700 hover:bg-gray-50"
//             )}
//             onClick={() => setViewMode("table")}
//             title="Table view"
//           >
//             <FaTable /> Table
//           </button>
//         </div>
//       </div>

//       {/* Loading skeleton */}
//       {loading && (
//         <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
//           {Array.from({ length: 6 }).map((_, i) => (
//             <div
//               key={i}
//               className="rounded-2xl border bg-white p-4 shadow-sm animate-pulse"
//             >
//               <div className="h-40 w-full rounded-xl bg-gray-100" />
//               <div className="mt-4 h-5 w-2/3 rounded bg-gray-100" />
//               <div className="mt-2 h-4 w-1/3 rounded bg-gray-100" />
//               <div className="mt-4 h-20 w-full rounded bg-gray-100" />
//               <div className="mt-4 flex gap-2">
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//                 <div className="h-9 w-24 rounded bg-gray-100" />
//               </div>
//             </div>
//           ))}
//         </div>
//       )}

//       {/* Empty state */}
//       {!loading && view.length === 0 && (
//         <div className="mt-16 flex flex-col items-center justify-center text-center">
//           <div className="rounded-3xl border p-10 shadow-sm bg-white max-w-lg">
//             <div className="mx-auto mb-4 flex h-14 w-14 items-center justify-center rounded-2xl bg-purple-100">
//               <FaListUl className="text-purple-600 text-xl" />
//             </div>
//             <h3 className="text-xl font-semibold text-gray-800">
//               No template campaigns yet
//             </h3>
//             <p className="mt-2 text-gray-500">
//               Create an image template campaign and assign recipients to start
//               sending.
//             </p>
//             <div className="mt-6 flex items-center justify-center gap-3">
//               <button
//                 onClick={() =>
//                   navigate("/app/campaigns/image-campaigns/create")
//                 }
//                 className="rounded-xl bg-purple-600 px-4 py-2 font-semibold text-white hover:bg-purple-700"
//               >
//                 New Campaign
//               </button>
//               <button
//                 onClick={loadCampaigns}
//                 className="rounded-xl border px-4 py-2 font-semibold text-gray-700 hover:bg-gray-50"
//               >
//                 Refresh
//               </button>
//             </div>
//           </div>
//         </div>
//       )}

//       {/* GRID VIEW */}
//       {!loading && view.length > 0 && viewMode === "grid" && (
//         <div className="grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
//           {view.map(t => {
//             const sending = sendingId === t.id;
//             return (
//               <TemplateCard
//                 key={t.id}
//                 t={t}
//                 sending={sending}
//                 onOpenInspector={() => setInspector(t)}
//                 onSend={() => handleSend(t.id)}
//                 onAssign={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
//                   )
//                 }
//                 onViewRecipients={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
//                   )
//                 }
//               />
//             );
//           })}
//         </div>
//       )}

//       {/* TABLE VIEW */}
//       {!loading && view.length > 0 && viewMode === "table" && (
//         <div className="overflow-hidden rounded-2xl border bg-white shadow-sm">
//           <table className="w-full text-sm">
//             <thead className="bg-gray-50 text-left text-gray-700">
//               <tr>
//                 <th className="px-4 py-3">Name</th>
//                 <th className="px-4 py-3">Type</th>
//                 <th className="px-4 py-3">Buttons</th>
//                 <th className="px-4 py-3">Recipients</th>
//                 <th className="px-4 py-3">Updated</th>
//                 <th className="px-4 py-3 text-right">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {view.map(t => (
//                 <tr key={t.id} className="border-t">
//                   <td className="px-4 py-3 font-medium text-gray-900">
//                     {t.name}
//                   </td>
//                   <td className="px-4 py-3">
//                     {t.kind === "image_header" ? "Image Header" : "Text Only"}
//                   </td>
//                   <td className="px-4 py-3">
//                     {t.hasButtons ? t.buttons.length : 0}
//                   </td>
//                   <td className="px-4 py-3">{t.recipients}</td>
//                   <td className="px-4 py-3">
//                     {t.updatedAt ? new Date(t.updatedAt).toLocaleString() : "—"}
//                   </td>
//                   <td className="px-4 py-3">
//                     <div className="flex justify-end gap-2">
//                       <button
//                         className="rounded-lg border px-3 py-1.5 hover:bg-gray-50"
//                         onClick={() => setInspector(t)}
//                       >
//                         Preview
//                       </button>
//                       <button
//                         className="rounded-lg bg-purple-100 px-3 py-1.5 text-purple-800 hover:bg-purple-200"
//                         onClick={() =>
//                           navigate(
//                             `/app/campaigns/image-campaigns/assign-contacts/${t.id}`
//                           )
//                         }
//                       >
//                         Assign
//                       </button>
//                       <button
//                         className="rounded-lg bg-blue-100 px-3 py-1.5 text-blue-700 hover:bg-blue-200"
//                         onClick={() =>
//                           navigate(
//                             `/app/campaigns/image-campaigns/assigned-contacts/${t.id}`
//                           )
//                         }
//                       >
//                         Recipients
//                       </button>
//                       <button
//                         className="rounded-lg bg-green-600 px-3 py-1.5 font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//                         disabled={t.recipients === 0}
//                         onClick={() => handleSend(t.id)}
//                       >
//                         Send
//                       </button>
//                     </div>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       )}

//       <InspectorModal item={inspector} onClose={() => setInspector(null)} />
//     </div>
//   );
// }

// export default TemplateCampaignList;

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
// import { useNavigate } from "react-router-dom";
// import { FaRocket } from "react-icons/fa";

// function TemplateCampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [sendingId, setSendingId] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const loadCampaigns = async () => {
//       try {
//         const res = await axiosClient.get("/campaign/get-image-campaign");
//         setCampaigns(res.data || []);
//       } catch (err) {
//         console.error(err);
//         toast.error("❌ Failed to load template campaigns");
//       }
//     };
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   // Utility: Get the message body from all likely fields
//   function getMessageBody(campaign) {
//     return (
//       campaign.messageBody ||
//       campaign.templateBody ||
//       campaign.sampleBody ||
//       campaign.messageTemplate ||
//       campaign.body ||
//       ""
//     );
//   }

//   // Utility: Get buttons (array) from all likely fields
//   function getButtons(campaign) {
//     return (
//       campaign.multiButtons || campaign.buttonParams || campaign.buttons || []
//     );
//   }

//   // Utility: Get caption from all likely fields
//   function getCaption(campaign) {
//     return campaign.imageCaption || campaign.caption || "";
//   }

//   return (
//     <div className="max-w-7xl mx-auto px-4 py-8">
//       <h2 className="text-3xl font-bold text-purple-700 mb-8 flex items-center gap-2">
//         <FaRocket className="text-green-500" />
//         Template Campaigns
//       </h2>

//       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
//         {campaigns.length === 0 ? (
//           <div className="col-span-full text-gray-500 text-lg mt-8">
//             No template campaigns available.
//           </div>
//         ) : (
//           campaigns.map(campaign => (
//             <div
//               key={campaign.id}
//               className="flex flex-col bg-white rounded-xl shadow border px-6 py-4 min-h-[540px] relative"
//               style={{ minWidth: 340, maxWidth: 410 }}
//             >
//               {/* Gradient Bar */}
//               <div className="absolute left-0 top-0 h-2 w-full rounded-t-xl bg-gradient-to-r from-purple-500 via-purple-400 to-green-400"></div>
//               {/* Header Row */}
//               <div className="flex items-center justify-between mt-2 mb-2">
//                 <h3 className="text-lg font-semibold text-purple-800">
//                   {campaign.name}
//                 </h3>
//                 <span className="text-xs flex items-center gap-1 px-2 py-1 bg-gray-100 rounded font-medium">
//                   <svg
//                     width={18}
//                     height={18}
//                     className="inline-block text-gray-500"
//                     fill="none"
//                     stroke="currentColor"
//                   >
//                     <rect x="2" y="2" width="14" height="14" rx="2" />
//                     <path d="M2 12l4-4a2 2 0 012.8 0l5.2 5.2" />
//                     <path d="M14 6h.01" />
//                   </svg>
//                   Image
//                 </span>
//               </div>
//               {/* Image Preview */}
//               <div className="bg-gray-100 rounded-lg flex items-center justify-center min-h-[180px] mb-3 border border-gray-200">
//                 {campaign.imageUrl ? (
//                   <img
//                     src={campaign.imageUrl}
//                     alt="Campaign"
//                     className="object-contain max-h-44 max-w-full rounded"
//                   />
//                 ) : (
//                   <div className="flex flex-col items-center text-gray-400 py-10">
//                     <svg
//                       width={54}
//                       height={54}
//                       fill="none"
//                       stroke="currentColor"
//                       viewBox="0 0 48 48"
//                     >
//                       <rect
//                         x="7"
//                         y="11"
//                         width="34"
//                         height="26"
//                         rx="2"
//                         strokeWidth={2}
//                       />
//                       <path
//                         d="M7 32l8.4-8.8c1.1-1.1 2.9-1.1 4 0L31 32M21.5 20.5a2.5 2.5 0 115 0 2.5 2.5 0 01-5 0z"
//                         strokeWidth={2}
//                       />
//                     </svg>
//                     <span className="mt-2 text-sm">No Image</span>
//                   </div>
//                 )}
//               </div>
//               {/* Recipients Badge */}
//               <div className="mb-2">
//                 <span
//                   className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm font-medium
//       ${
//         campaign.recipientCount > 0
//           ? "bg-green-100 text-green-700"
//           : "bg-gray-100 text-gray-500"
//       }`}
//                 >
//                   <svg
//                     className="w-4 h-4"
//                     fill="none"
//                     stroke="currentColor"
//                     viewBox="0 0 20 20"
//                   >
//                     <path d="M13 7a4 4 0 11-8 0 4 4 0 018 0zM5 13a7 7 0 0110 0" />
//                   </svg>
//                   {campaign.recipientCount || 0} Recipients
//                 </span>
//               </div>

//               {/* WhatsApp Bubble Preview */}
//               <div className="mb-2">
//                 <WhatsAppBubblePreview
//                   messageTemplate={getMessageBody(campaign)}
//                   multiButtons={getButtons(campaign)}
//                   imageUrl={campaign.imageUrl}
//                   caption={getCaption(campaign)}
//                   campaignId={campaign.id}
//                 />
//               </div>

//               {/* Spacer to push buttons to bottom */}
//               <div className="flex-1"></div>
//               {/* Action Buttons */}
//               <div className="flex gap-2 mt-3 pt-1 w-full">
//                 <button
//                   disabled={
//                     !campaign.recipientCount || sendingId === campaign.id
//                   }
//                   onClick={() => handleSend(campaign.id)}
//                   className={`flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold shadow-sm transition
//         ${
//           !campaign.recipientCount
//             ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//             : "bg-green-600 text-white hover:bg-green-700"
//         }
//       `}
//                 >
//                   <span role="img" aria-label="Send">
//                     🚀
//                   </span>{" "}
//                   Send
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assign-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-purple-100 text-purple-800 hover:bg-purple-200 transition"
//                 >
//                   <span role="img" aria-label="Assign">
//                     📇
//                   </span>{" "}
//                   Assign
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assigned-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-blue-100 text-blue-700 hover:bg-blue-200 transition"
//                 >
//                   <span role="img" aria-label="Recipients">
//                     👁️
//                   </span>{" "}
//                   Recipients
//                 </button>
//               </div>
//             </div>
//           ))
//         )}
//       </div>
//     </div>
//   );
// }

// export default TemplateCampaignList;

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
// import { useNavigate } from "react-router-dom";
// import { FaRocket } from "react-icons/fa";

// function TemplateCampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [sendingId, setSendingId] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const loadCampaigns = async () => {
//       try {
//         const res = await axiosClient.get("/campaign/get-image-campaign");
//         setCampaigns(res.data || []);
//       } catch (err) {
//         console.error(err);
//         toast.error("❌ Failed to load template campaigns");
//       }
//     };
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   return (
//     <div className="max-w-7xl mx-auto px-4 py-8">
//       <h2 className="text-3xl font-bold text-purple-700 mb-8 flex items-center gap-2">
//         <FaRocket className="text-green-500" />
//         Template Campaigns
//       </h2>

//       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
//         {campaigns.length === 0 ? (
//           <div className="col-span-full text-gray-500 text-lg mt-8">
//             No template campaigns available.
//           </div>
//         ) : (
//           campaigns.map(campaign => (
//             <div
//               key={campaign.id}
//               className="flex flex-col bg-white rounded-xl shadow border px-6 py-4 min-h-[540px] relative"
//               style={{ minWidth: 340, maxWidth: 410 }}
//             >
//               {/* Gradient Bar */}
//               <div className="absolute left-0 top-0 h-2 w-full rounded-t-xl bg-gradient-to-r from-purple-500 via-purple-400 to-green-400"></div>
//               {/* Header Row */}
//               <div className="flex items-center justify-between mt-2 mb-2">
//                 <h3 className="text-lg font-semibold text-purple-800">
//                   {campaign.name}
//                 </h3>
//                 <span className="text-xs flex items-center gap-1 px-2 py-1 bg-gray-100 rounded font-medium">
//                   <svg
//                     width={18}
//                     height={18}
//                     className="inline-block text-gray-500"
//                     fill="none"
//                     stroke="currentColor"
//                   >
//                     <rect x="2" y="2" width="14" height="14" rx="2" />
//                     <path d="M2 12l4-4a2 2 0 012.8 0l5.2 5.2" />
//                     <path d="M14 6h.01" />
//                   </svg>
//                   Image
//                 </span>
//               </div>
//               {/* Image Preview */}
//               <div className="bg-gray-100 rounded-lg flex items-center justify-center min-h-[180px] mb-3 border border-gray-200">
//                 {campaign.imageUrl ? (
//                   <img
//                     src={campaign.imageUrl}
//                     alt="Campaign"
//                     className="object-contain max-h-44 max-w-full rounded"
//                   />
//                 ) : (
//                   <div className="flex flex-col items-center text-gray-400 py-10">
//                     <svg
//                       width={54}
//                       height={54}
//                       fill="none"
//                       stroke="currentColor"
//                       viewBox="0 0 48 48"
//                     >
//                       <rect
//                         x="7"
//                         y="11"
//                         width="34"
//                         height="26"
//                         rx="2"
//                         strokeWidth={2}
//                       />
//                       <path
//                         d="M7 32l8.4-8.8c1.1-1.1 2.9-1.1 4 0L31 32M21.5 20.5a2.5 2.5 0 115 0 2.5 2.5 0 01-5 0z"
//                         strokeWidth={2}
//                       />
//                     </svg>
//                     <span className="mt-2 text-sm">No Image</span>
//                   </div>
//                 )}
//               </div>
//               {/* Recipients Badge */}
//               <div className="mb-2">
//                 <span
//                   className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm font-medium
//       ${
//         campaign.recipientCount > 0
//           ? "bg-green-100 text-green-700"
//           : "bg-gray-100 text-gray-500"
//       }`}
//                 >
//                   <svg
//                     className="w-4 h-4"
//                     fill="none"
//                     stroke="currentColor"
//                     viewBox="0 0 20 20"
//                   >
//                     <path d="M13 7a4 4 0 11-8 0 4 4 0 018 0zM5 13a7 7 0 0110 0" />
//                   </svg>
//                   {campaign.recipientCount || 0} Recipients
//                 </span>
//               </div>

//               {/* WhatsApp Bubble Preview */}
//               <div className="mb-2">
//                 <WhatsAppBubblePreview
//                   messageTemplate={
//                     campaign.messageBody ||
//                     campaign.templateBody ||
//                     campaign.sampleBody ||
//                     campaign.messageTemplate ||
//                     "No message body"
//                   }
//                   multiButtons={
//                     campaign.multiButtons ||
//                     campaign.buttonParams ||
//                     campaign.buttons ||
//                     []
//                   }
//                   imageUrl={campaign.imageUrl}
//                   caption={campaign.imageCaption || ""}
//                   campaignId={campaign.id}
//                 />
//               </div>

//               {/* Spacer to push buttons to bottom */}
//               <div className="flex-1"></div>
//               {/* Action Buttons */}
//               <div className="flex gap-2 mt-3 pt-1 w-full">
//                 <button
//                   disabled={
//                     !campaign.recipientCount || sendingId === campaign.id
//                   }
//                   onClick={() => handleSend(campaign.id)}
//                   className={`flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold shadow-sm transition
//         ${
//           !campaign.recipientCount
//             ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//             : "bg-green-600 text-white hover:bg-green-700"
//         }
//       `}
//                 >
//                   <span role="img" aria-label="Send">
//                     🚀
//                   </span>{" "}
//                   Send
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assign-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-purple-100 text-purple-800 hover:bg-purple-200 transition"
//                 >
//                   <span role="img" aria-label="Assign">
//                     📇
//                   </span>{" "}
//                   Assign
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assigned-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-blue-100 text-blue-700 hover:bg-blue-200 transition"
//                 >
//                   <span role="img" aria-label="Recipients">
//                     👁️
//                   </span>{" "}
//                   Recipients
//                 </button>
//               </div>
//             </div>
//           ))
//         )}
//       </div>
//     </div>
//   );
// }

// export default TemplateCampaignList;

// // ✅ File: src/pages/Campaigns/TemplateCampaignList.jsx

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import { useNavigate } from "react-router-dom";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";
// import {
//   FaRocket,
//   FaAddressBook,
//   FaEye,
//   FaImage,
//   FaUsers,
// } from "react-icons/fa";

// function TemplateCampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [sendingId, setSendingId] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const loadCampaigns = async () => {
//       try {
//         const res = await axiosClient.get("/campaign/get-image-campaign");
//         setCampaigns(res.data || []);
//       } catch (err) {
//         console.error(err);
//         toast.error("❌ Failed to load template campaigns");
//       }
//     };
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   return (
//     <div className="max-w-7xl mx-auto px-4 py-8">
//       <h2 className="text-3xl font-bold text-purple-700 mb-8 flex items-center gap-2">
//         <FaRocket className="text-green-500" />
//         Template Campaigns
//       </h2>

//       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-7">
//         {campaigns.length === 0 ? (
//           <div className="col-span-full text-gray-500 text-lg mt-8">
//             No template campaigns available.
//           </div>
//         ) : (
//           campaigns.map(campaign => (
//             <div
//               key={campaign.id}
//               className="flex flex-col bg-white rounded-xl shadow border px-6 py-4 min-h-[540px] relative"
//               style={{ minWidth: 340, maxWidth: 410 }}
//             >
//               {/* Gradient Bar */}
//               <div className="absolute left-0 top-0 h-2 w-full rounded-t-xl bg-gradient-to-r from-purple-500 via-purple-400 to-green-400"></div>
//               {/* Header Row */}
//               <div className="flex items-center justify-between mt-2 mb-2">
//                 <h3 className="text-lg font-semibold text-purple-800">
//                   {campaign.name}
//                 </h3>
//                 <span className="text-xs flex items-center gap-1 px-2 py-1 bg-gray-100 rounded font-medium">
//                   <svg
//                     width={18}
//                     height={18}
//                     className="inline-block text-gray-500"
//                     fill="none"
//                     stroke="currentColor"
//                   >
//                     <rect x="2" y="2" width="14" height="14" rx="2" />
//                     <path d="M2 12l4-4a2 2 0 012.8 0l5.2 5.2" />
//                     <path d="M14 6h.01" />
//                   </svg>
//                   Image
//                 </span>
//               </div>
//               {/* Image Preview */}
//               <div className="bg-gray-100 rounded-lg flex items-center justify-center min-h-[180px] mb-3 border border-gray-200">
//                 {campaign.imageUrl ? (
//                   <img
//                     src={campaign.imageUrl}
//                     alt="Campaign"
//                     className="object-contain max-h-44 max-w-full rounded"
//                   />
//                 ) : (
//                   <div className="flex flex-col items-center text-gray-400 py-10">
//                     <svg
//                       width={54}
//                       height={54}
//                       fill="none"
//                       stroke="currentColor"
//                       viewBox="0 0 48 48"
//                     >
//                       <rect
//                         x="7"
//                         y="11"
//                         width="34"
//                         height="26"
//                         rx="2"
//                         strokeWidth={2}
//                       />
//                       <path
//                         d="M7 32l8.4-8.8c1.1-1.1 2.9-1.1 4 0L31 32M21.5 20.5a2.5 2.5 0 115 0 2.5 2.5 0 01-5 0z"
//                         strokeWidth={2}
//                       />
//                     </svg>
//                     <span className="mt-2 text-sm">No Image</span>
//                   </div>
//                 )}
//               </div>
//               {/* Recipients Badge */}
//               <div className="mb-2">
//                 <span
//                   className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-sm font-medium
//       ${
//         campaign.recipientCount > 0
//           ? "bg-green-100 text-green-700"
//           : "bg-gray-100 text-gray-500"
//       }`}
//                 >
//                   <svg
//                     className="w-4 h-4"
//                     fill="none"
//                     stroke="currentColor"
//                     viewBox="0 0 20 20"
//                   >
//                     <path d="M13 7a4 4 0 11-8 0 4 4 0 018 0zM5 13a7 7 0 0110 0" />
//                   </svg>
//                   {campaign.recipientCount || 0} Recipients
//                 </span>
//               </div>
//               {/* Template Preview */}
//               <div className="bg-gray-50 rounded-lg p-3 min-h-[84px] mb-2 border border-gray-100">
//                 <div className="font-mono text-xs text-gray-700 break-all">
//                   {campaign.messageTemplate || "Template Preview"}
//                 </div>
//               </div>
//               {/* Spacer to push buttons to bottom */}
//               <div className="flex-1"></div>
//               {/* Action Buttons */}
//               <div className="flex gap-2 mt-3 pt-1 w-full">
//                 <button
//                   disabled={
//                     !campaign.recipientCount || sendingId === campaign.id
//                   }
//                   onClick={() => handleSend(campaign.id)}
//                   className={`flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold shadow-sm transition
//         ${
//           !campaign.recipientCount
//             ? "bg-gray-200 text-gray-400 cursor-not-allowed"
//             : "bg-green-600 text-white hover:bg-green-700"
//         }
//       `}
//                 >
//                   <span role="img" aria-label="Send">
//                     🚀
//                   </span>{" "}
//                   Send
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assign-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-purple-100 text-purple-800 hover:bg-purple-200 transition"
//                 >
//                   <span role="img" aria-label="Assign">
//                     📇
//                   </span>{" "}
//                   Assign
//                 </button>
//                 <button
//                   onClick={() =>
//                     navigate(
//                       `/app/campaigns/image-campaigns/assigned-contacts/${campaign.id}`
//                     )
//                   }
//                   className="flex-1 flex items-center justify-center gap-1 px-3 py-2 rounded-lg font-semibold bg-blue-100 text-blue-700 hover:bg-blue-200 transition"
//                 >
//                   <span role="img" aria-label="Recipients">
//                     👁️
//                   </span>{" "}
//                   Recipients
//                 </button>
//               </div>
//             </div>
//           ))
//         )}
//       </div>
//     </div>
//   );
// }

// export default TemplateCampaignList;

// ✅ File: src/pages/Campaigns/TemplateCampaignList.jsx
// import React, { useEffect, useState } from "react";
// import axiosClient from "../../api/axiosClient";
// import { toast } from "react-toastify";
// import { useNavigate } from "react-router-dom";
// import WhatsAppBubblePreview from "../../components/WhatsAppBubblePreview";

// function TemplateCampaignList() {
//   const [campaigns, setCampaigns] = useState([]);
//   const [sendingId, setSendingId] = useState(null);
//   const navigate = useNavigate();

//   useEffect(() => {
//     const loadCampaigns = async () => {
//       try {
//         const res = await axiosClient.get("/campaign/get-image-campaign");
//         setCampaigns(res.data || []);
//       } catch (err) {
//         console.error(err);
//         toast.error("❌ Failed to load template campaigns");
//       }
//     };
//     loadCampaigns();
//   }, []);

//   const handleSend = async campaignId => {
//     setSendingId(campaignId);
//     try {
//       // await axiosClient.post(`/campaign/send-template-campaign/${campaignId}`);
//       await axiosClient.post(`/campaign/send-campaign/${campaignId}`);
//       toast.success("🚀 Campaign sent +1 successfully!");
//     } catch (err) {
//       console.error("❌ Sending failed:", err);
//       toast.error("❌ Failed to send campaign");
//     } finally {
//       setSendingId(null);
//     }
//   };

//   return (
//     <div className="max-w-5xl mx-auto px-4 py-6 space-y-6">
//       <h2 className="text-2xl font-bold text-purple-700">
//         📄 Template Campaigns
//       </h2>

//       {campaigns.length === 0 ? (
//         <p className="text-gray-500">No template campaigns available.</p>
//       ) : (
//         campaigns.map(campaign => (
//           <div
//             key={campaign.id}
//             className="bg-white rounded-xl shadow border p-4 space-y-3"
//           >
//             <h3 className="text-lg font-semibold text-purple-800">
//               {campaign.name}
//             </h3>
//             <p className="text-sm text-gray-500">
//               Template: <strong>{campaign.messageTemplate}</strong>
//             </p>
//             <p className="text-sm text-gray-400">
//               Recipients: <strong>{campaign.recipientCount || 0}</strong>
//             </p>

//             <WhatsAppBubblePreview
//               templateBody={campaign.messageTemplate}
//               parameters={campaign.templateParameters || []}
//               imageUrl={campaign.imageUrl}
//               buttonParams={campaign.multiButtons?.map(btn => ({
//                 title: btn.title,
//                 type: btn.type,
//                 value: btn.value,
//               }))}
//             />

//             <div className="flex justify-end gap-4">
//               <button
//                 disabled={!campaign.recipientCount || sendingId === campaign.id}
//                 onClick={() => handleSend(campaign.id)}
//                 className={`px-4 py-2 rounded font-medium ${
//                   !campaign.recipientCount
//                     ? "bg-gray-300 text-gray-500 cursor-not-allowed"
//                     : "bg-green-600 text-white hover:bg-green-700"
//                 }`}
//               >
//                 {sendingId === campaign.id ? "Sending..." : "🚀 Send"}
//               </button>

//               <button
//                 onClick={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assign-contacts/${campaign.id}`
//                   )
//                 }
//                 className="px-4 py-2 rounded text-sm text-purple-600 hover:underline"
//               >
//                 🧩 Assign Contacts
//               </button>

//               <button
//                 onClick={() =>
//                   navigate(
//                     `/app/campaigns/image-campaigns/assigned-contacts/${campaign.id}`
//                   )
//                 }
//                 className="px-4 py-2 rounded text-sm text-blue-600 hover:underline"
//               >
//                 View Recipients
//               </button>
//             </div>
//           </div>
//         ))
//       )}
//     </div>
//   );
// }

// export default TemplateCampaignList;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\Analytics\CampaignDashboard.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import axios from "../../../api/axiosClient";
import { useParams } from "react-router-dom";
import StatCard from "../../../components/StatCard";

function CampaignDashboard() {
  const { campaignId } = useParams();
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const res = await axios.get(
          `/campaigns/analytics/${campaignId}/summary`
        );
        if (res.data.success) setStats(res.data.data);
      } catch (err) {
        console.error("❌ Failed to load campaign summary", err);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, [campaignId]);

  if (loading)
    return <p className="text-gray-500">⏳ Loading campaign summary...</p>;
  if (!stats) return <p className="text-red-500">⚠️ No data found.</p>;

  return (
    <div className="p-6">
      <h2 className="text-xl font-semibold mb-4">📊 Campaign Summary</h2>
      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        <StatCard title="Total Messages" value={stats.totalMessages} />
        <StatCard title="Sent" value={stats.sentCount} />
        <StatCard title="Delivered" value={stats.deliveredCount} />
        <StatCard title="Read" value={stats.readCount} />
        <StatCard title="Failed" value={stats.failedCount} />
      </div>
    </div>
  );
}

export default CampaignDashboard;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\api\csvApi.js 
====================================================== 
 
// src/pages/Campaigns/api/csvApi.js
import axiosClient from "../../../api/axiosClient";

/** Helper to unwrap { success, data } or raw payloads */
function un(data) {
  return data?.data ?? data;
}

/** ---------- Schema + Sample ---------- **/

export async function fetchCsvSchema(campaignId) {
  const { data } = await axiosClient.get(
    `/campaigns/${campaignId}/csv-sample/schema`
  );
  const p = un(data) ?? {};

  // Prefer explicit headers; fall back to array payloads; finally to []
  let headers = p.headers ?? p.data?.headers;
  if (!headers && Array.isArray(p?.data)) headers = p.data;
  if (!Array.isArray(headers)) headers = [];

  const placeholderCount =
    Number(p.placeholderCount ?? p.data?.placeholderCount ?? 0) || 0;
  return { headers, placeholderCount };
}

export async function downloadCsvSampleBlob(campaignId) {
  const res = await axiosClient.get(`/campaigns/${campaignId}/csv-sample`, {
    responseType: "blob",
  });
  return res.data; // Blob
}

/** ---------- Upload + Batch Info ---------- **/

/**
 * Uploads a CSV and returns a normalized object:
 * { batchId, headerJson: string[] }
 */
export async function uploadCsvBatch(file, audienceId = null) {
  const form = new FormData();
  form.append("file", file);
  if (audienceId) form.append("audienceId", audienceId);

  const { data } = await axiosClient.post("/csv/batch", form, {
    headers: { "Content-Type": "multipart/form-data" },
  });
  const p = un(data) ?? {};

  // Normalize keys so components can immediately render headers
  const batchId = p.batchId ?? p.BatchId ?? p.id ?? p.Id;
  const headerJson = p.headerJson ?? p.headers ?? p.Headers ?? [];

  return { ...p, batchId, headerJson };
}

/**
 * Returns batch meta in a normalized shape:
 * { batchId, headers, headerJson, rowCount, createdAt, ... }
 */
export async function getBatchInfo(batchId) {
  const { data } = await axiosClient.get(`/csv/batch/${batchId}`);
  const p = un(data) ?? {};
  const headers = p.headers ?? p.headerJson ?? p.Headers ?? [];
  return {
    ...p,
    batchId: p.batchId ?? p.BatchId ?? batchId,
    headers,
    headerJson: headers,
  };
}

/** ---------- Sample (preview rows) ---------- **/

/**
 * Always returns { headers: string[], rows: Array<Record<string,string>> }
 * even if the backend only returns an array of { rowIndex, data | Data }.
 */
export async function getBatchSample(batchId, take = 10) {
  const { data } = await axiosClient.get(`/csv/batch/${batchId}/sample`, {
    params: { take },
  });
  const payload = un(data);

  // Case A: backend already returns { headers, rows }
  if (payload?.headers && payload?.rows) {
    return {
      headers: payload.headers,
      rows: payload.rows,
    };
  }

  // Case B: backend returns only rows as an array
  if (Array.isArray(payload)) {
    const rows = payload.map(x => x.data ?? x.Data ?? x.row ?? x.Row ?? {});
    // Try to infer from the first row; else fall back to batch info; else []
    let headers = rows.length > 0 ? Object.keys(rows[0] ?? {}) : [];
    if (!headers.length) {
      const info = await getBatchInfo(batchId);
      headers =
        Array.isArray(info.headers) && info.headers.length ? info.headers : [];
    }
    return { headers, rows };
  }

  // Case C: unexpected shape — fall back to batch info
  const info = await getBatchInfo(batchId);
  return { headers: info.headers ?? [], rows: [] };
}

/** ---------- Validation ---------- **/

/**
 * Validates the batch using the chosen phone header and options.
 * Returns a normalized shape: { problems: string[], ...raw }
 */
export async function validateBatch(batchId, req) {
  // Map UI request -> backend field names (tolerant to either)
  const body = {
    phoneField: req.phoneHeader ?? req.phoneField,
    requiredHeaders: req.requiredHeaders ?? [],
    normalizePhones: !!(req.normalizePhone ?? req.normalizePhones),
    deduplicate: !!(req.checkDuplicates ?? req.deduplicate),
  };

  const { data } = await axiosClient.post(
    `/csv/batch/${batchId}/validate`,
    body
  );
  const p = un(data) ?? {};

  // Normalize a few common shapes
  const problems = p.problems ?? p.errors ?? p.Errors ?? [];

  return { ...p, problems };
}

/** ---------- Optional: mapping helpers (no-ops if backend lacks them) ---------- **/

/**
 * Ask backend for parameter mapping suggestions based on the batch.
 * Gracefully handles 404/501 by returning { items: [] }.
 */
export async function suggestMappings(campaignId, batchId) {
  try {
    const { data } = await axiosClient.get(
      `/campaigns/${campaignId}/mappings/suggest`,
      { params: { batchId } }
    );
    const p = un(data) ?? {};
    return { items: p.items ?? [] };
  } catch {
    return { items: [] };
  }
}

/** Persist current mapping preferences (optional, idempotent). */
export async function saveMappings(campaignId, mappingDto) {
  // many backends use POST /campaigns/{id}/mappings
  const { data } = await axiosClient.post(
    `/campaigns/${campaignId}/mappings`,
    mappingDto
  );
  return un(data) ?? {};
}

/** ---------- Materialize (dry-run / commit) ---------- **/

/**
 * body = {
 *   csvBatchId,
 *   mappings: { "{{1}}": "Name", "button1.url_param": "UrlCol", ... } (column names or "constant:VALUE"),
 *   phoneField: "Phone",
 *   normalizePhones: boolean,
 *   deduplicate: boolean,
 *   persist: boolean,
 *   audienceName?: string
 * }
 */
export async function materialize(campaignId, body) {
  const { data } = await axiosClient.post(
    `/campaigns/${campaignId}/materialize`,
    body
  );
  return un(data) ?? {};
}

// // src/pages/Campaigns/api/csvApi.js
// import axiosClient from "../../../api/axiosClient";

// /** Helper to unwrap { success, data } or raw payloads */
// function un(data) {
//   return data?.data ?? data;
// }

// /** ---------- Schema + Sample ---------- **/

// export async function fetchCsvSchema(campaignId) {
//   const { data } = await axiosClient.get(
//     `/campaigns/${campaignId}/csv-sample/schema`
//   );
//   const p = un(data) ?? {};

//   // Prefer explicit headers; fall back to array payloads; then to ["phone"]
//   let headers = p.headers ?? p.data?.headers;
//   if (!headers && Array.isArray(p?.data)) headers = p.data;
//   if (!Array.isArray(headers) || headers.length === 0) headers = ["phone"];

//   const placeholderCount =
//     Number(p.placeholderCount ?? p.data?.placeholderCount ?? 0) || 0;
//   return { headers, placeholderCount };
// }

// export async function downloadCsvSampleBlob(campaignId) {
//   const res = await axiosClient.get(`/campaigns/${campaignId}/csv-sample`, {
//     responseType: "blob",
//   });
//   return res.data; // Blob
// }

// /** ---------- Upload + Batch Info ---------- **/

// /**
//  * Uploads a CSV and returns a normalized object:
//  * { batchId, headerJson: string[] }
//  */
// export async function uploadCsvBatch(file, audienceId = null) {
//   const form = new FormData();
//   form.append("file", file);
//   if (audienceId) form.append("audienceId", audienceId);

//   const { data } = await axiosClient.post("/csv/batch", form, {
//     headers: { "Content-Type": "multipart/form-data" },
//   });
//   const p = un(data) ?? {};

//   // Normalize keys so components can immediately render headers
//   const batchId = p.batchId ?? p.BatchId ?? p.id ?? p.Id;
//   const headerJson = p.headerJson ?? p.headers ?? p.Headers ?? [];

//   return { ...p, batchId, headerJson };
// }

// /**
//  * Returns batch meta in a normalized shape:
//  * { batchId, headers, headerJson, rowCount, createdAt, ... }
//  */
// export async function getBatchInfo(batchId) {
//   const { data } = await axiosClient.get(`/csv/batch/${batchId}`);
//   const p = un(data) ?? {};
//   const headers = p.headers ?? p.headerJson ?? p.Headers ?? [];
//   return {
//     ...p,
//     batchId: p.batchId ?? p.BatchId ?? batchId,
//     headers,
//     headerJson: headers,
//   };
// }

// /** ---------- Sample (preview rows) ---------- **/

// /**
//  * Always returns { headers: string[], rows: Array<Record<string,string>> }
//  * even if the backend only returns an array of { rowIndex, data | Data }.
//  */
// export async function getBatchSample(batchId, take = 10) {
//   const { data } = await axiosClient.get(`/csv/batch/${batchId}/sample`, {
//     params: { take },
//   });
//   const payload = un(data);

//   // Case A: backend already returns { headers, rows }
//   if (payload?.headers && payload?.rows) {
//     return {
//       headers: payload.headers,
//       rows: payload.rows,
//     };
//   }

//   // Case B: backend returns only rows as an array
//   if (Array.isArray(payload)) {
//     const rows = payload.map(x => x.data ?? x.Data ?? x.row ?? x.Row ?? {});
//     // Try to infer from the first row; else fall back to batch info; else ["phone"]
//     let headers = rows.length > 0 ? Object.keys(rows[0] ?? {}) : [];
//     if (!headers.length) {
//       const info = await getBatchInfo(batchId);
//       headers =
//         Array.isArray(info.headers) && info.headers.length
//           ? info.headers
//           : ["phone"];
//     }
//     return { headers, rows };
//   }

//   // Case C: unexpected shape — fall back to batch info
//   const info = await getBatchInfo(batchId);
//   return { headers: info.headers ?? ["phone"], rows: [] };
// }

// /** ---------- Validation ---------- **/

// /**
//  * Validates the batch using the chosen phone header and options.
//  * Returns a normalized shape: { problems: string[], ...raw }
//  */
// export async function validateBatch(batchId, req) {
//   // Map UI request -> backend field names (tolerant to either)
//   const body = {
//     phoneField: req.phoneHeader ?? req.phoneField,
//     requiredHeaders: req.requiredHeaders ?? [],
//     normalizePhones: !!(req.normalizePhone ?? req.normalizePhones),
//     deduplicate: !!(req.checkDuplicates ?? req.deduplicate),
//   };

//   const { data } = await axiosClient.post(
//     `/csv/batch/${batchId}/validate`,
//     body
//   );
//   const p = un(data) ?? {};

//   // Normalize a few common shapes
//   const problems = p.problems ?? p.errors ?? p.Errors ?? [];

//   return { ...p, problems };
// }

// /** ---------- Optional: mapping helpers (no-ops if backend lacks them) ---------- **/

// /**
//  * Ask backend for parameter mapping suggestions based on the batch.
//  * Gracefully handles 404/501 by returning { items: [] }.
//  */
// export async function suggestMappings(campaignId, batchId) {
//   try {
//     const { data } = await axiosClient.get(
//       `/campaigns/${campaignId}/mappings/suggest`,
//       { params: { batchId } }
//     );
//     const p = un(data) ?? {};
//     return { items: p.items ?? [] };
//   } catch {
//     return { items: [] };
//   }
// }

// /** Persist current mapping preferences (optional, idempotent). */
// export async function saveMappings(campaignId, mappingDto) {
//   // many backends use POST /campaigns/{id}/mappings
//   const { data } = await axiosClient.post(
//     `/campaigns/${campaignId}/mappings`,
//     mappingDto
//   );
//   return un(data) ?? {};
// }

// /** ---------- Materialize (dry-run / commit) ---------- **/

// /**
//  * body = {
//  *   // common FE shapes your backend can accept as-is:
//  *   // csvBatchId: string,            // preferred by FE
//  *   // OR batchId: string,            // some backends prefer this
//  *   mappings: Record<string,string>,  // "{{1}}": "colA", "button1.url_param": "colX", ...
//  *   phoneField: string,
//  *   normalizePhones: boolean,
//  *   deduplicate: boolean,
//  *   persist?: boolean,                // true=commit, false=dry-run
//  *   audienceName?: string
//  * }
//  */
// export async function materialize(campaignId, body) {
//   const { data } = await axiosClient.post(
//     `/campaigns/${campaignId}/materialize`,
//     body
//   );
//   return un(data) ?? {};
// }

// // src/pages/Campaigns/api/csvApi.js
// import axiosClient from "../../../api/axiosClient";

// /** Helper to unwrap { success, data } or raw payloads */
// function un(data) {
//   return data?.data ?? data;
// }

// /** ---------- Schema + Sample ---------- **/

// export async function fetchCsvSchema(campaignId) {
//   const { data } = await axiosClient.get(
//     `/campaigns/${campaignId}/csv-sample/schema`
//   );
//   const p = un(data) ?? {};
//   const headers = p.headers ??
//     p.data?.headers ??
//     (Array.isArray(p?.data) ? p.data : []) ?? ["phone"];
//   const placeholderCount = p.placeholderCount ?? p.data?.placeholderCount ?? 0;

//   return { headers, placeholderCount };
// }

// export async function downloadCsvSampleBlob(campaignId) {
//   const res = await axiosClient.get(`/campaigns/${campaignId}/csv-sample`, {
//     responseType: "blob",
//   });
//   return res.data; // Blob
// }

// /** ---------- Upload + Batch Info ---------- **/

// /**
//  * Uploads a CSV and returns a normalized object:
//  * { batchId, headerJson: string[] }
//  */
// export async function uploadCsvBatch(file, audienceId = null) {
//   const form = new FormData();
//   form.append("file", file);
//   if (audienceId) form.append("audienceId", audienceId);

//   const { data } = await axiosClient.post("/csv/batch", form, {
//     headers: { "Content-Type": "multipart/form-data" },
//   });
//   const p = un(data) ?? {};

//   // Normalize keys so components can immediately render headers
//   const batchId = p.batchId ?? p.BatchId ?? p.id ?? p.Id;
//   const headerJson = p.headerJson ?? p.headers ?? p.Headers ?? [];

//   return { ...p, batchId, headerJson };
// }

// /**
//  * Returns batch meta in a normalized shape:
//  * { batchId, headers, headerJson, rowCount, createdAt, ... }
//  */
// export async function getBatchInfo(batchId) {
//   const { data } = await axiosClient.get(`/csv/batch/${batchId}`);
//   const p = un(data) ?? {};
//   const headers = p.headers ?? p.headerJson ?? p.Headers ?? [];
//   return {
//     ...p,
//     batchId: p.batchId ?? p.BatchId ?? batchId,
//     headers,
//     headerJson: headers,
//   };
// }

// /** ---------- Sample (preview rows) ---------- **/

// /**
//  * Always returns { headers: string[], rows: Array<Record<string,string>> }
//  * even if the backend only returns an array of { rowIndex, data | Data }.
//  */
// export async function getBatchSample(batchId, take = 10) {
//   const { data } = await axiosClient.get(`/csv/batch/${batchId}/sample`, {
//     params: { take },
//   });
//   const payload = un(data);

//   // Case A: backend already returns { headers, rows }
//   if (payload?.headers && payload?.rows) {
//     return {
//       headers: payload.headers,
//       rows: payload.rows,
//     };
//   }

//   // Case B: backend returns only rows as an array
//   if (Array.isArray(payload)) {
//     const info = await getBatchInfo(batchId);
//     const headers = info.headers?.length ? info.headers : ["phone"];
//     const rows = payload.map(x => x.data ?? x.Data ?? x.row ?? x.Row ?? {});
//     return { headers, rows };
//   }

//   // Case C: unexpected shape — fall back to batch info
//   const info = await getBatchInfo(batchId);
//   return { headers: info.headers ?? ["phone"], rows: [] };
// }

// /** ---------- Validation ---------- **/

// /**
//  * Validates the batch using the chosen phone header and options.
//  * Returns a normalized shape: { problems: string[], ...raw }
//  */
// export async function validateBatch(batchId, req) {
//   // Map UI request -> backend field names (tolerant to either)
//   const body = {
//     phoneField: req.phoneHeader ?? req.phoneField,
//     requiredHeaders: req.requiredHeaders ?? [],
//     normalizePhones: !!(req.normalizePhone ?? req.normalizePhones),
//     deduplicate: !!(req.checkDuplicates ?? req.deduplicate),
//   };

//   const { data } = await axiosClient.post(
//     `/csv/batch/${batchId}/validate`,
//     body
//   );
//   const p = un(data) ?? {};

//   // Normalize a few common shapes
//   const problems = p.problems ?? p.errors ?? p.Errors ?? [];

//   return { ...p, problems };
// }

// /** ---------- Optional: mapping helpers (no-ops if backend lacks them) ---------- **/

// /**
//  * Ask backend for parameter mapping suggestions based on the batch.
//  * Gracefully handles 404/501 by returning { items: [] }.
//  */
// export async function suggestMappings(campaignId, batchId) {
//   try {
//     const { data } = await axiosClient.get(
//       `/campaigns/${campaignId}/mappings/suggest`,
//       { params: { batchId } }
//     );
//     const p = un(data) ?? {};
//     return { items: p.items ?? [] };
//   } catch {
//     return { items: [] };
//   }
// }

// /** Persist current mapping preferences (optional, idempotent). */
// export async function saveMappings(campaignId, mappingDto) {
//   // many backends use POST /campaigns/{id}/mappings
//   const { data } = await axiosClient.post(
//     `/campaigns/${campaignId}/mappings`,
//     mappingDto
//   );
//   return un(data) ?? {};
// }

// /** ---------- Materialize (dry-run / commit) ---------- **/

// /**
//  * body = {
//  *   mode: "dryRun" | "commit",
//  *   batchId,
//  *   normalizePhone: boolean,
//  *   deduplicate: boolean,
//  *   phoneHeader: string,
//  *   mappings: [...]
//  * }
//  */
// export async function materialize(campaignId, body) {
//   const { data } = await axiosClient.post(
//     `/campaigns/${campaignId}/materialize`,
//     body
//   );
//   return un(data) ?? {};
// }
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\CampaignButtonsForm.jsx 
====================================================== 
 
import React from "react";
import { FaTrash } from "react-icons/fa";

const defaultButton = {
  buttonText: "",
  buttonType: "url",
  targetUrl: "",
};

const CampaignButtonsForm = ({ buttons, onChange }) => {
  const handleChange = (index, field, value) => {
    const updated = [...buttons];
    updated[index][field] = value;
    onChange(updated);
  };

  const handleAdd = () => {
    if (buttons.length < 3) {
      onChange([...buttons, { ...defaultButton }]);
    }
  };

  const handleRemove = index => {
    const updated = [...buttons];
    updated.splice(index, 1);
    onChange(updated);
  };

  return (
    <div className="bg-white rounded-lg shadow p-4 mt-4">
      <h3 className="text-md font-semibold mb-2">📎 Add up to 3 CTA Buttons</h3>

      {buttons.map((btn, index) => (
        <div
          key={index}
          className="grid grid-cols-12 gap-2 items-center mb-3 border p-3 rounded"
        >
          <div className="col-span-3">
            <input
              type="text"
              className="w-full border rounded px-2 py-1"
              placeholder="Title"
              value={btn.buttonText}
              onChange={e => handleChange(index, "buttonText", e.target.value)}
            />
          </div>
          <div className="col-span-3">
            <select
              className="w-full border rounded px-2 py-1"
              value={btn.buttonType}
              onChange={e => handleChange(index, "buttonType", e.target.value)}
            >
              <option value="url">🌐 URL</option>
              <option value="call">📞 Call</option>
              <option value="quick_reply">💬 Reply</option>
            </select>
          </div>
          <div className="col-span-5">
            <input
              type="text"
              className="w-full border rounded px-2 py-1"
              placeholder="Value (link or payload)"
              value={btn.targetUrl}
              onChange={e => handleChange(index, "targetUrl", e.target.value)}
            />
          </div>
          <div className="col-span-1 text-right">
            <button
              type="button"
              onClick={() => handleRemove(index)}
              className="text-red-500 hover:text-red-700"
            >
              <FaTrash />
            </button>
          </div>
        </div>
      ))}

      <button
        type="button"
        onClick={handleAdd}
        disabled={buttons.length >= 3}
        className="bg-green-600 text-white px-4 py-2 rounded mt-2 hover:bg-green-700 disabled:opacity-50"
      >
        ➕ Add Button
      </button>
    </div>
  );
};

export default CampaignButtonsForm;

// import React from "react";
// import { FaTrash } from "react-icons/fa";

// const defaultButton = { title: "", type: "url", value: "" };

// const CampaignButtonsForm = ({ buttons, onChange }) => {
//   const handleChange = (index, field, value) => {
//     const updated = [...buttons];
//     updated[index][field] = value;
//     onChange(updated); // ✅ Corrected
//   };

//   const handleAdd = () => {
//     if (buttons.length < 3) {
//       onChange([...buttons, { ...defaultButton }]); // ✅ Corrected
//     }
//   };

//   const handleRemove = index => {
//     const updated = [...buttons];
//     updated.splice(index, 1);
//     onChange(updated); // ✅ Corrected
//   };

//   return (
//     <div className="bg-white rounded-lg shadow p-4 mt-4">
//       <h3 className="text-md font-semibold mb-2">📎 Add up to 3 CTA Buttons</h3>

//       {buttons.map((btn, index) => (
//         <div
//           key={index}
//           className="grid grid-cols-12 gap-2 items-center mb-3 border p-3 rounded"
//         >
//           <div className="col-span-3">
//             <input
//               type="text"
//               className="w-full border rounded px-2 py-1"
//               placeholder="Title"
//               value={btn.title}
//               onChange={e => handleChange(index, "title", e.target.value)}
//             />
//           </div>
//           <div className="col-span-3">
//             <select
//               className="w-full border rounded px-2 py-1"
//               value={btn.type}
//               onChange={e => handleChange(index, "type", e.target.value)}
//             >
//               <option value="url">🌐 URL</option>
//               <option value="call">📞 Call</option>
//               <option value="quick_reply">💬 Reply</option>
//             </select>
//           </div>
//           <div className="col-span-5">
//             <input
//               type="text"
//               className="w-full border rounded px-2 py-1"
//               placeholder="Value (link or payload)"
//               value={btn.value}
//               onChange={e => handleChange(index, "value", e.target.value)}
//             />
//           </div>
//           <div className="col-span-1 text-right">
//             <button
//               type="button"
//               onClick={() => handleRemove(index)}
//               className="text-red-500 hover:text-red-700"
//             >
//               <FaTrash />
//             </button>
//           </div>
//         </div>
//       ))}

//       <button
//         type="button"
//         onClick={handleAdd}
//         disabled={buttons.length >= 3}
//         className="bg-green-600 text-white px-4 py-2 rounded mt-2 hover:bg-green-700 disabled:opacity-50"
//       >
//         ➕ Add Button
//       </button>
//     </div>
//   );
// };

// export default CampaignButtonsForm;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\CampaignSummaryBar.jsx 
====================================================== 
 
import React from "react";
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from "recharts";
import {
  Send,
  CheckCircle2,
  Eye,
  XCircle,
  MousePointerClick,
} from "lucide-react";

function CampaignSummaryBar({ summary }) {
  if (!summary) {
    return (
      <div className="bg-white border rounded-lg shadow-sm p-4 mb-4">
        <p className="text-gray-500">Loading summary...</p>
      </div>
    );
  }

  // --- Calculations for Rates ---
  const deliveryRate =
    summary.sent > 0 // Use 'sent' as the base for delivery rate
      ? ((summary.delivered / summary.sent) * 100).toFixed(1)
      : 0;
  const readRate =
    summary.delivered > 0
      ? ((summary.read / summary.delivered) * 100).toFixed(1)
      : 0;

  // --- Data for the Chart ---
  const chartData = [
    { name: "Read", value: summary.read || 0 },
    {
      name: "Delivered (Unread)",
      value: (summary.delivered || 0) - (summary.read || 0),
    },
    // Show 'Sent' but not yet delivered
    {
      name: "Sent (Pending Delivery)",
      value:
        (summary.sent || 0) -
        (summary.delivered || 0) -
        (summary.failedCount || 0),
    },
    { name: "Failed", value: summary.failedCount || 0 },
  ];
  const COLORS = ["#10B981", "#3B82F6", "#F59E0B", "#EF4444"]; // Green, Blue, Amber, Red

  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
      <div className="lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-5">
        <KpiCard
          title="Total Recipients"
          value={summary.totalSent || 0} // This is the total number of messages attempted
          icon={<Send size={40} />}
          gradient="from-slate-500 to-slate-600"
        />
        {/* NEW "Sent" CARD */}
        <KpiCard
          title="Sent"
          value={summary.sent || 0}
          subText="Successfully sent to provider"
          icon={<Send size={40} />}
          gradient="from-pink-500 to-purple-600"
          decoration="wave"
        />
        <KpiCard
          title="Delivered"
          value={summary.delivered || 0}
          subText={`${deliveryRate}% Delivery Rate`}
          icon={<CheckCircle2 size={40} />}
          gradient="from-purple-500 to-indigo-600"
          decoration="graph"
        />
        <KpiCard
          title="Read"
          value={summary.read || 0}
          subText={`${readRate}% Read Rate`}
          icon={<Eye size={40} />}
          gradient="from-blue-400 to-cyan-500"
          decoration="bars"
        />
        <KpiCard
          title="Failed"
          value={summary.failedCount || 0}
          subText="Could not be sent"
          icon={<XCircle size={40} />}
          gradient="from-orange-400 to-red-500"
        />
        <KpiCard
          title="Clicked"
          value={summary.clickedCount || 0}
          icon={<MousePointerClick size={40} />}
          gradient="from-green-400 to-teal-500"
        />
      </div>

      {/* Chart Section */}
      <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm flex flex-col justify-center items-center">
        <h3 className="font-semibold text-gray-700 mb-2">
          Message Status Funnel
        </h3>
        <div className="w-full h-48 relative">
          <ResponsiveContainer width="100%" height="100%">
            <PieChart>
              <Pie
                data={chartData.filter(d => d.value > 0)}
                dataKey="value"
                nameKey="name"
                cx="50%"
                cy="50%"
                innerRadius={50}
                outerRadius={70}
                fill="#8884d8"
                paddingAngle={5}
              >
                {chartData
                  .filter(d => d.value > 0)
                  .map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={COLORS[chartData.indexOf(entry)]}
                    />
                  ))}
              </Pie>
              <Tooltip formatter={(value, name) => [value, name]} />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>
    </div>
  );
}
// A new, redesigned component for the KPI cards to match your example
const KpiCard = ({
  icon,
  title,
  value,
  subText = null,
  gradient,
  decoration = null,
}) => {
  const decorations = {
    wave: (
      <svg
        className="absolute bottom-0 left-0 w-full h-16 text-white opacity-10"
        fill="currentColor"
        viewBox="0 0 100 100"
        preserveAspectRatio="none"
      >
        <path d="M0,50 C25,100 75,0 100,50 L100,100 L0,100 Z" />
      </svg>
    ),
    graph: (
      <svg
        className="absolute bottom-0 right-0 h-20 text-white opacity-10"
        fill="none"
        viewBox="0 0 100 100"
        preserveAspectRatio="none"
      >
        <path
          d="M0 80 C20 40, 40 90, 60 50, 80 10, 100 60"
          stroke="currentColor"
          strokeWidth="4"
        />
      </svg>
    ),
    bars: (
      <svg
        className="absolute bottom-0 right-4 h-16 text-white opacity-10"
        fill="currentColor"
        viewBox="0 0 50 100"
        preserveAspectRatio="none"
      >
        <rect x="0" y="60" width="8" height="40" />
        <rect x="12" y="40" width="8" height="60" />
        <rect x="24" y="20" width="8" height="80" />
        <rect x="36" y="50" width="8" height="50" />
      </svg>
    ),
  };

  return (
    <div
      className={`relative overflow-hidden rounded-xl shadow-lg p-5 text-white bg-gradient-to-r ${gradient}`}
    >
      {decoration && decorations[decoration]}
      <div className="relative flex items-center gap-5">
        <div className="opacity-80">{icon}</div>
        <div className="flex-grow">
          <p className="text-sm font-medium text-white/80">{title}</p>
          <p className="text-3xl font-bold tracking-tight">{value}</p>
          {subText && <p className="text-xs text-white/70">{subText}</p>}
        </div>
      </div>
    </div>
  );
};

export default CampaignSummaryBar;

// import React from "react";
// import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from "recharts";
// import {
//   Send,
//   CheckCircle2,
//   Eye,
//   XCircle,
//   MousePointerClick,
// } from "lucide-react"; // Modern icons

// function CampaignSummaryBar({ summary }) {
//   if (!summary) {
//     return (
//       <div className="bg-white border rounded-lg shadow-sm p-4 mb-4">
//         <p className="text-gray-500">Loading summary...</p>
//       </div>
//     );
//   }

//   // --- Calculations for Rates ---
//   const deliveryRate =
//     summary.totalSent > 0
//       ? ((summary.delivered / summary.totalSent) * 100).toFixed(1)
//       : 0;
//   const readRate =
//     summary.delivered > 0
//       ? ((summary.read / summary.delivered) * 100).toFixed(1)
//       : 0;
//   const clickRate =
//     summary.delivered > 0
//       ? ((summary.clickedCount / summary.delivered) * 100).toFixed(1)
//       : 0;

//   // --- Data for the Chart ---
//   const chartData = [
//     { name: "Read", value: summary.read || 0 },
//     {
//       name: "Delivered (Not Read)",
//       value: (summary.delivered || 0) - (summary.read || 0),
//     },
//     { name: "Failed", value: summary.failedCount || 0 },
//   ];
//   const COLORS = ["#10B981", "#3B82F6", "#EF4444"]; // Emerald, Blue, Red

//   return (
//     <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
//       {/* KPI Cards Section */}
//       <div className="lg:col-span-2 grid grid-cols-2 md:grid-cols-3 gap-4">
//         {/* Total Sent Card */}
//         <KpiCard
//           icon={<Send size={24} className="text-gray-400" />}
//           title="Total Sent"
//           value={summary.totalSent || 0}
//         />

//         {/* Delivered Card */}
//         <KpiCard
//           icon={<CheckCircle2 size={24} className="text-blue-500" />}
//           title="Delivered"
//           value={summary.delivered || 0}
//           subText={`${deliveryRate}% Delivery Rate`}
//         />

//         {/* Read Card */}
//         <KpiCard
//           icon={<Eye size={24} className="text-emerald-500" />}
//           title="Read"
//           value={summary.read || 0}
//           subText={`${readRate}% Read Rate`}
//         />

//         {/* Failed Card */}
//         <KpiCard
//           icon={<XCircle size={24} className="text-red-500" />}
//           title="Failed"
//           value={summary.failedCount || 0}
//         />

//         {/* Clicked Card */}
//         <KpiCard
//           icon={<MousePointerClick size={24} className="text-pink-500" />}
//           title="Clicked"
//           value={summary.clickedCount || 0}
//           subText={`${clickRate}% Click Rate`}
//         />
//       </div>

//       {/* Chart Section */}
//       <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm flex flex-col justify-center items-center">
//         <h3 className="font-semibold text-gray-700 mb-2">Delivery Funnel</h3>
//         <div className="w-full h-48 relative">
//           <ResponsiveContainer width="100%" height="100%">
//             <PieChart>
//               <Pie
//                 data={chartData}
//                 dataKey="value"
//                 nameKey="name"
//                 cx="50%"
//                 cy="50%"
//                 innerRadius={50}
//                 outerRadius={70}
//                 fill="#8884d8"
//                 paddingAngle={5}
//               >
//                 {chartData.map((entry, index) => (
//                   <Cell
//                     key={`cell-${index}`}
//                     fill={COLORS[index % COLORS.length]}
//                   />
//                 ))}
//               </Pie>
//               <Tooltip formatter={(value, name) => [value, name]} />
//             </PieChart>
//           </ResponsiveContainer>
//           <div className="absolute inset-0 flex flex-col items-center justify-center pointer-events-none">
//             <span className="text-3xl font-bold text-gray-800">
//               {deliveryRate}%
//             </span>
//             <span className="text-sm text-gray-500">Delivered</span>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// // A reusable component for the KPI cards to keep the main component clean
// const KpiCard = ({ icon, title, value, subText = null }) => (
//   <div className="bg-white p-4 rounded-lg border border-gray-200 shadow-sm">
//     <div className="flex items-center gap-4">
//       {icon}
//       <div>
//         <p className="text-gray-500 text-sm font-medium">{title}</p>
//         <p className="text-2xl font-bold text-gray-800">{value}</p>
//         {subText && <p className="text-xs text-gray-400">{subText}</p>}
//       </div>
//     </div>
//   </div>
// );

// export default CampaignSummaryBar;

// import React from "react";
// import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from "recharts";
// import {
//   Send,
//   CheckCircle2,
//   Eye,
//   XCircle,
//   MousePointerClick,
// } from "lucide-react";

// function CampaignSummaryBar({ summary }) {
//   if (!summary) {
//     return (
//       <div className="bg-slate-800 border border-slate-700 rounded-xl p-6 mb-6 text-center text-slate-400">
//         Loading Summary...
//       </div>
//     );
//   }

//   // --- Calculations for Rates ---
//   const deliveryRate =
//     summary.totalSent > 0 ? (summary.delivered / summary.totalSent) * 100 : 0;
//   const readRate =
//     summary.delivered > 0 ? (summary.read / summary.delivered) * 100 : 0;
//   const failureRate =
//     summary.totalSent > 0 ? (summary.failedCount / summary.totalSent) * 100 : 0;

//   // --- Data for the Chart ---
//   const chartData = [
//     { name: "Read", value: summary.read || 0 },
//     {
//       name: "Delivered",
//       value: (summary.delivered || 0) - (summary.read || 0),
//     },
//     { name: "Failed", value: summary.failedCount || 0 },
//   ];
//   // Vibrant, neon-like colors for the dark theme
//   const COLORS = ["#22d3ee", "#38bdf8", "#fb7185"]; // Cyan, Sky Blue, Rose

//   return (
//     <div className="bg-slate-900 p-6 rounded-2xl border border-slate-800/80 mb-6">
//       <div className="grid grid-cols-1 lg:grid-cols-12 gap-6 items-center">
//         {/* KPI Cards Section */}
//         <div className="lg:col-span-8 grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-3 gap-5">
//           <KpiCard
//             title="Total Sent"
//             value={summary.totalSent || 0}
//             icon={<Send />}
//             gradient="from-slate-700 to-slate-800"
//           />
//           <KpiCard
//             title="Delivered"
//             value={summary.delivered || 0}
//             subText={`${deliveryRate.toFixed(1)}% Delivery Rate`}
//             icon={<CheckCircle2 />}
//             gradient="from-blue-500 to-cyan-500"
//           />
//           <KpiCard
//             title="Read"
//             value={summary.read || 0}
//             subText={`${readRate.toFixed(1)}% Read Rate`}
//             icon={<Eye />}
//             gradient="from-emerald-500 to-green-500"
//           />
//           <KpiCard
//             title="Failed"
//             value={summary.failedCount || 0}
//             subText={`${failureRate.toFixed(1)}% Failure Rate`}
//             icon={<XCircle />}
//             gradient="from-rose-500 to-red-600"
//           />
//           <KpiCard
//             title="Clicked"
//             value={summary.clickedCount || 0}
//             icon={<MousePointerClick />}
//             gradient="from-violet-500 to-fuchsia-500"
//           />
//         </div>

//         {/* Central Chart Section */}
//         <div className="lg:col-span-4 flex flex-col items-center justify-center p-4 bg-slate-800/50 backdrop-blur-sm border border-slate-700/80 rounded-xl h-full">
//           <h3 className="font-semibold text-slate-300 text-base mb-2">
//             Delivery Status
//           </h3>
//           <div
//             className="w-full h-48"
//             style={{ filter: `drop-shadow(0 0 12px ${COLORS[1]}40)` }}
//           >
//             <ResponsiveContainer width="100%" height="100%">
//               <PieChart>
//                 <Pie
//                   data={chartData}
//                   dataKey="value"
//                   nameKey="name"
//                   cx="50%"
//                   cy="50%"
//                   innerRadius={60}
//                   outerRadius={75}
//                   fill="#8884d8"
//                   paddingAngle={5}
//                 >
//                   {chartData.map((entry, index) => (
//                     <Cell
//                       key={`cell-${index}`}
//                       fill={COLORS[index % COLORS.length]}
//                       stroke={COLORS[index % COLORS.length]}
//                     />
//                   ))}
//                 </Pie>
//                 <Tooltip
//                   cursor={false}
//                   contentStyle={{
//                     background: "rgba(20, 30, 48, 0.8)",
//                     backdropFilter: "blur(4px)",
//                     border: "1px solid rgba(255,255,255,0.1)",
//                     borderRadius: "0.75rem",
//                     color: "#fff",
//                   }}
//                 />
//               </PieChart>
//             </ResponsiveContainer>
//           </div>
//         </div>
//       </div>
//     </div>
//   );
// }

// // A new, redesigned component for the gradient KPI cards
// const KpiCard = ({ title, value, subText, icon, gradient }) => (
//   <div
//     className={`bg-gradient-to-br ${gradient} p-5 rounded-xl shadow-lg text-white relative overflow-hidden`}
//   >
//     <div className="flex justify-between items-start">
//       <div className="flex flex-col">
//         <p className="text-sm font-medium text-white/80">{title}</p>
//         <span className="text-4xl font-bold tracking-tight mt-1">{value}</span>
//       </div>
//       <div className="opacity-70">{React.cloneElement(icon, { size: 24 })}</div>
//     </div>
//     {subText && <p className="text-xs text-white/70 mt-2">{subText}</p>}
//   </div>
// );

// export default CampaignSummaryBar;

// import React from "react";
// import {
//   PieChart,
//   Pie,
//   Cell,
//   ResponsiveContainer,
//   Legend,
//   Tooltip,
// } from "recharts";

// function CampaignSummaryBar({ summary }) {
//   if (!summary) {
//     return (
//       <div className="bg-white border rounded-md shadow p-4 mb-4">
//         <p className="text-gray-500">Loading summary...</p>
//       </div>
//     );
//   }

//   const chartData = [
//     { name: "Read", value: summary.read || 0 },
//     {
//       name: "Delivered (Not Read)",
//       value: (summary.delivered || 0) - (summary.read || 0),
//     },
//     { name: "Failed", value: summary.failedCount || 0 },
//   ];
//   const COLORS = ["#00C49F", "#0088FE", "#FF8042"];

//   const formatDate = datetime =>
//     datetime ? new Date(datetime).toLocaleString() : "-";

//   return (
//     <div className="bg-white border rounded-md shadow p-4 mb-4">
//       <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-7 gap-4">
//         {/* KPI Section */}
//         <div className="lg:col-span-5 grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4 text-sm text-gray-800">
//           <div>
//             <p className="font-semibold text-purple-700">📬 Total Sent</p>
//             <p className="text-2xl font-bold">{summary.totalSent || 0}</p>
//           </div>
//           <div>
//             <p className="font-semibold text-blue-600">🚚 Delivered</p>
//             <p className="text-2xl font-bold">{summary.delivered || 0}</p>
//           </div>
//           <div>
//             <p className="font-semibold text-teal-600">👀 Read</p>
//             <p className="text-2xl font-bold">{summary.read || 0}</p>
//           </div>
//           <div>
//             <p className="font-semibold text-red-600">❌ Failed</p>
//             <p className="text-2xl font-bold">{summary.failedCount || 0}</p>
//           </div>
//           <div>
//             <p className="font-semibold text-green-700">✅ Clicked</p>
//             <p className="text-2xl font-bold">{summary.clickedCount || 0}</p>
//           </div>
//         </div>
//         {/* Chart Section */}
//         <div className="col-span-2 h-48">
//           <ResponsiveContainer width="100%" height="100%">
//             <PieChart>
//               <Pie
//                 data={chartData}
//                 dataKey="value"
//                 nameKey="name"
//                 cx="50%"
//                 cy="50%"
//                 innerRadius={40}
//                 outerRadius={60}
//                 fill="#8884d8"
//               >
//                 {chartData.map((entry, index) => (
//                   <Cell
//                     key={`cell-${index}`}
//                     fill={COLORS[index % COLORS.length]}
//                   />
//                 ))}
//               </Pie>
//               <Tooltip />
//               <Legend iconSize={10} />
//             </PieChart>
//           </ResponsiveContainer>
//         </div>
//       </div>
//     </div>
//   );
// }

// export default CampaignSummaryBar;
// import React from "react";

// function CampaignSummaryBar({ summary }) {
//   if (!summary) return null;

//   const formatDate = datetime =>
//     datetime ? new Date(datetime).toLocaleString() : "-";

//   return (
//     <div className="bg-white border rounded-md shadow p-4 mb-4 grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-800">
//       <div>
//         <p className="font-semibold text-purple-700">📬 Total Sent</p>
//         <p>{summary.totalSent}</p>
//       </div>
//       <div>
//         <p className="font-semibold text-red-600">❌ Failed</p>
//         <p>{summary.failedCount}</p>
//       </div>
//       <div>
//         <p className="font-semibold text-green-700">✅ Clicked</p>
//         <p>{summary.clickedCount}</p>
//       </div>
//       <div>
//         <p className="font-semibold text-blue-600">🕒 Last Sent</p>
//         <p>{formatDate(summary.lastSentAt)}</p>
//       </div>
//     </div>
//   );
// }

// export default CampaignSummaryBar;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\ContactJourneyModal.jsx 
====================================================== 
 
// import React, { useEffect, useState, Fragment } from "react";
// import { Dialog, Transition } from "@headlessui/react";
// import axiosClient from "../../../api/axiosClient";
// import { Send, MousePointerClick, Hourglass } from "lucide-react";

// // Helper function to format dates
// const formatDate = dt => (dt ? new Date(dt).toLocaleString() : "N/A");

// // The main modal component
// function ContactJourneyModal({ isOpen, onClose, log }) {
//   const [journey, setJourney] = useState([]);
//   const [loading, setLoading] = useState(false);

//   useEffect(() => {
//     if (isOpen && log?.id) {
//       const fetchJourney = async () => {
//         setLoading(true);
//         try {
//           const res = await axiosClient.get(`/tracking/journeys/${log.id}`);
//           setJourney(res.data || []);
//         } catch (error) {
//           console.error("Failed to fetch contact journey", error);
//         } finally {
//           setLoading(false);
//         }
//       };
//       fetchJourney();
//     }
//   }, [isOpen, log]);

//   if (!log) return null;

//   return (
//     <Transition appear show={isOpen} as={Fragment}>
//       <Dialog as="div" className="relative z-50" onClose={onClose}>
//         <Transition.Child
//           as={Fragment}
//           enter="ease-out duration-300"
//           enterFrom="opacity-0"
//           enterTo="opacity-100"
//           leave="ease-in duration-200"
//           leaveFrom="opacity-100"
//           leaveTo="opacity-0"
//         >
//           <div className="fixed inset-0 bg-black bg-opacity-40" />
//         </Transition.Child>

//         <div className="fixed inset-0 overflow-y-hidden">
//           <div className="flex items-center justify-center min-h-full p-4">
//             <Transition.Child
//               as={Fragment}
//               enter="ease-out duration-300"
//               enterFrom="opacity-0 scale-95"
//               enterTo="opacity-100 scale-100"
//               leave="ease-in duration-200"
//               leaveFrom="opacity-100 scale-100"
//               leaveTo="opacity-0 scale-95"
//             >
//               {/* FIX: Panel is now a flex column with a max height */}
//               <Dialog.Panel className="w-full max-w-2xl flex flex-col max-h-[85vh] transform overflow-hidden rounded-xl bg-white shadow-xl transition-all">
//                 {/* Header: Now a static flex item */}
//                 <Dialog.Title className="flex-shrink-0 px-6 pt-6 pb-4 text-xl font-bold text-gray-800 flex items-center gap-2 border-b border-gray-200">
//                   <span className="text-purple-600">🧭</span> Contact Journey
//                   for {log.contactName}
//                 </Dialog.Title>

//                 {/* Content: This area is now scrollable */}
//                 <div className="flex-grow overflow-y-auto px-6">
//                   {loading ? (
//                     <p className="text-center text-gray-500 py-8">
//                       Loading journey...
//                     </p>
//                   ) : journey.length > 0 ? (
//                     <div className="border-l-2 border-slate-200 ml-3 py-8 space-y-8">
//                       {journey.map((event, idx) => (
//                         <JourneyEvent key={idx} event={event} />
//                       ))}
//                     </div>
//                   ) : (
//                     <p className="text-center text-gray-500 py-8">
//                       No journey events found for this message.
//                     </p>
//                   )}
//                 </div>

//                 {/* Footer: Now a static flex item */}
//                 <div className="flex-shrink-0 px-6 pt-4 pb-6 flex justify-end gap-3 border-t border-gray-200">
//                   <button
//                     onClick={onClose}
//                     className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm font-semibold"
//                   >
//                     Close
//                   </button>
//                 </div>
//               </Dialog.Panel>
//             </Transition.Child>
//           </div>
//         </div>
//       </Dialog>
//     </Transition>
//   );
// }

// // A sub-component to render each event in the timeline (no changes needed here)
// const JourneyEvent = ({ event }) => {
//   const ICONS = {
//     MessageSent: <Send size={16} className="text-white" />,
//     ButtonClicked: <MousePointerClick size={16} className="text-white" />,
//   };

//   const COLORS = {
//     MessageSent: "bg-blue-500",
//     ButtonClicked: "bg-green-500",
//   };

//   return (
//     <div className="relative pl-10">
//       <div
//         className={`absolute -left-4 top-0.5 w-8 h-8 rounded-full flex items-center justify-center ring-4 ring-white ${
//           COLORS[event.eventType] || "bg-gray-400"
//         }`}
//       >
//         {ICONS[event.eventType] || (
//           <Hourglass size={16} className="text-white" />
//         )}
//       </div>
//       <p className="font-semibold text-gray-800">{event.title}</p>
//       <p className="text-sm text-gray-500 truncate">{event.details}</p>
//       <p className="text-xs text-gray-400 mt-1">
//         {formatDate(event.timestamp)}
//       </p>
//     </div>
//   );
// };

// export default ContactJourneyModal;

// import React, { useEffect, useState, Fragment } from "react";
// import { Dialog, Transition } from "@headlessui/react";
// import axiosClient from "../../../api/axiosClient";
// import {
//   Send,
//   MousePointerClick,
//   Hourglass,
//   CheckCircle2,
//   Eye,
//   Share2,
// } from "lucide-react";

// const formatDate = dt => (dt ? new Date(dt).toLocaleString() : "N/A");

// function ContactJourneyModal({ isOpen, onClose, log }) {
//   const [journey, setJourney] = useState({ events: [] });
//   const [loading, setLoading] = useState(false);

//   useEffect(() => {
//     if (isOpen && log?.id) {
//       (async () => {
//         setLoading(true);
//         try {
//           const res = await axiosClient.get(`/tracking/journeys/${log.id}`);
//           const data = res.data;
//           // Back-compat: if server returns an array, wrap it
//           if (Array.isArray(data)) setJourney({ events: data });
//           else setJourney(data || { events: [] });
//         } catch (e) {
//           console.error("Failed to fetch contact journey", e);
//           setJourney({ events: [] });
//         } finally {
//           setLoading(false);
//         }
//       })();
//     }
//   }, [isOpen, log]);

//   if (!log) return null;

//   const typeBadge =
//     journey.campaignType === "flow" ? (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-emerald-100 text-emerald-700 text-xs font-semibold">
//         Flow
//       </span>
//     ) : (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-blue-100 text-blue-700 text-xs font-semibold">
//         Dynamic URL
//       </span>
//     );

//   return (
//     <Transition appear show={isOpen} as={Fragment}>
//       <Dialog as="div" className="relative z-50" onClose={onClose}>
//         <Transition.Child
//           as={Fragment}
//           enter="ease-out duration-300"
//           enterFrom="opacity-0"
//           enterTo="opacity-100"
//           leave="ease-in duration-200"
//           leaveFrom="opacity-100"
//           leaveTo="opacity-0"
//         >
//           <div className="fixed inset-0 bg-black/40" />
//         </Transition.Child>

//         <div className="fixed inset-0 overflow-y-hidden">
//           <div className="flex items-center justify-center min-h-full p-4">
//             <Transition.Child
//               as={Fragment}
//               enter="ease-out duration-300"
//               enterFrom="opacity-0 scale-95"
//               enterTo="opacity-100 scale-100"
//               leave="ease-in duration-200"
//               leaveFrom="opacity-100 scale-100"
//               leaveTo="opacity-0 scale-95"
//             >
//               <Dialog.Panel className="w-full max-w-2xl flex flex-col max-h-[85vh] transform overflow-hidden rounded-xl bg-white shadow-xl transition-all">
//                 <Dialog.Title className="flex-shrink-0 px-6 pt-6 pb-4 text-xl font-bold text-gray-800 flex items-center gap-2 border-b border-gray-200">
//                   <span className="text-purple-600">🧭</span>
//                   Contact Journey for {log.contactName}
//                   {typeBadge}
//                 </Dialog.Title>

//                 <div className="flex-grow overflow-y-auto px-6">
//                   {loading ? (
//                     <p className="text-center text-gray-500 py-8">
//                       Loading journey...
//                     </p>
//                   ) : (journey?.events?.length || 0) > 0 ? (
//                     <>
//                       {journey?.leftOffAt && (
//                         <div className="mt-4 mb-2 text-xs text-gray-500">
//                           Left off at:{" "}
//                           <span className="font-semibold">
//                             {journey.leftOffAt}
//                           </span>
//                           {journey.flowName ? (
//                             <span>
//                               {" "}
//                               in{" "}
//                               <span className="font-semibold">
//                                 {journey.flowName}
//                               </span>
//                             </span>
//                           ) : null}
//                         </div>
//                       )}
//                       <div className="border-l-2 border-slate-200 ml-3 py-8 space-y-8">
//                         {journey.events.map((event, idx) => (
//                           <JourneyEvent key={idx} event={event} />
//                         ))}
//                       </div>
//                     </>
//                   ) : (
//                     <p className="text-center text-gray-500 py-8">
//                       No journey events found for this message.
//                     </p>
//                   )}
//                 </div>

//                 <div className="flex-shrink-0 px-6 pt-4 pb-6 flex justify-end gap-3 border-t border-gray-200">
//                   <button
//                     onClick={onClose}
//                     className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm font-semibold"
//                   >
//                     Close
//                   </button>
//                 </div>
//               </Dialog.Panel>
//             </Transition.Child>
//           </div>
//         </div>
//       </Dialog>
//     </Transition>
//   );
// }

// const ICONS = {
//   MessageSent: <Send size={16} className="text-white" />,
//   Delivered: <CheckCircle2 size={16} className="text-white" />,
//   Read: <Eye size={16} className="text-white" />,
//   ButtonClicked: <MousePointerClick size={16} className="text-white" />,
//   FlowSend: <Send size={16} className="text-white" />,
//   Redirect: <Share2 size={16} className="text-white" />,
// };

// const COLORS = {
//   MessageSent: "bg-blue-500",
//   Delivered: "bg-emerald-500",
//   Read: "bg-cyan-500",
//   ButtonClicked: "bg-green-500",
//   FlowSend: "bg-indigo-500",
//   Redirect: "bg-amber-500",
// };

// const JourneyEvent = ({ event }) => {
//   const icon = ICONS[event.eventType] || (
//     <Hourglass size={16} className="text-white" />
//   );
//   const color = COLORS[event.eventType] || "bg-gray-400";

//   return (
//     <div className="relative pl-10">
//       <div
//         className={`absolute -left-4 top-0.5 w-8 h-8 rounded-full flex items-center justify-center ring-4 ring-white ${color}`}
//       >
//         {icon}
//       </div>
//       <p className="font-semibold text-gray-800">{event.title}</p>
//       <p className="text-sm text-gray-500 break-words">
//         {event.details}
//         {event.url ? (
//           <>
//             <br />
//             <a
//               className="text-blue-600 underline"
//               href={event.url}
//               target="_blank"
//               rel="noreferrer"
//             >
//               {event.url}
//             </a>
//           </>
//         ) : null}
//       </p>
//       <p className="text-xs text-gray-400 mt-1">
//         {formatDate(event.timestamp)}
//       </p>
//     </div>
//   );
// };

// export default ContactJourneyModal;
// 📄 src/pages/campaigns/components/ContactJourneyModal.jsx
// import React, { useEffect, useMemo, useState, Fragment } from "react";
// import { Dialog, Transition } from "@headlessui/react";
// import axiosClient from "../../../api/axiosClient";
// import {
//   Send,
//   MousePointerClick,
//   Hourglass,
//   CheckCircle2,
//   Eye,
//   Share2,
//   Link2,
//   Copy,
//   Filter,
//   X,
// } from "lucide-react";

// const formatDate = dt => (dt ? new Date(dt).toLocaleString() : "N/A");

// // ---- helpers ----
// const relTime = iso => {
//   if (!iso) return "";
//   const diff = Date.now() - new Date(iso).getTime();
//   const abs = Math.abs(diff);
//   const mins = Math.floor(abs / (60 * 1000));
//   if (mins < 1) return "just now";
//   if (mins < 60) return `${mins}m ${diff < 0 ? "from now" : "ago"}`;
//   const hrs = Math.floor(mins / 60);
//   if (hrs < 24) return `${hrs}h ${diff < 0 ? "from now" : "ago"}`;
//   const days = Math.floor(hrs / 24);
//   return `${days}d ${diff < 0 ? "from now" : "ago"}`;
// };

// const displayUrl = raw => {
//   try {
//     const u = new URL(raw);
//     const tail =
//       u.pathname.length > 1 ? u.pathname.split("/").slice(-1)[0] : "";
//     return `${u.hostname}${tail ? `/${tail}` : ""}`;
//   } catch {
//     return raw?.slice(0, 60) || "";
//   }
// };

// const ICONS = {
//   MessageSent: <Send size={16} className="text-white" />,
//   Delivered: <CheckCircle2 size={16} className="text-white" />,
//   Read: <Eye size={16} className="text-white" />,
//   ButtonClicked: <MousePointerClick size={16} className="text-white" />,
//   FlowSend: <Send size={16} className="text-white" />,
//   Redirect: <Share2 size={16} className="text-white" />,
// };

// const COLORS = {
//   MessageSent: "bg-blue-500",
//   Delivered: "bg-emerald-500",
//   Read: "bg-cyan-500",
//   ButtonClicked: "bg-green-500",
//   FlowSend: "bg-indigo-500",
//   Redirect: "bg-amber-500",
// };

// const isClickEvent = t => t === "ButtonClicked" || t === "Redirect";
// const isMessageEvent = t =>
//   t === "MessageSent" || t === "Delivered" || t === "Read" || t === "FlowSend";

// function ContactJourneyModal({ isOpen, onClose, log }) {
//   const [journey, setJourney] = useState({ events: [] });
//   const [loading, setLoading] = useState(false);
//   const [filter, setFilter] = useState("all"); // all | messages | clicks
//   const [expanded, setExpanded] = useState(false);

//   // ✅ safe fallback to avoid conditional return before hooks
//   const safeLog = log || { contactName: "Unknown" };

//   useEffect(() => {
//     if (isOpen && log?.id) {
//       (async () => {
//         setLoading(true);
//         try {
//           const res = await axiosClient.get(`/tracking/journeys/${log.id}`);
//           const data = res.data;
//           if (Array.isArray(data)) setJourney({ events: data });
//           else setJourney(data || { events: [] });
//         } catch (e) {
//           console.error("Failed to fetch contact journey", e);
//           setJourney({ events: [] });
//         } finally {
//           setLoading(false);
//         }
//       })();
//     }
//   }, [isOpen, log]);

//   useEffect(() => {
//     if (isOpen) setExpanded(false);
//   }, [isOpen]);

//   const typeBadge =
//     journey.campaignType === "flow" ? (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-emerald-100 text-emerald-700 text-xs font-semibold">
//         Flow
//       </span>
//     ) : (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-blue-100 text-blue-700 text-xs font-semibold">
//         Dynamic URL
//       </span>
//     );

//   // filter view
//   const eventsFiltered = useMemo(() => {
//     const all = journey?.events || [];
//     if (filter === "messages")
//       return all.filter(e => isMessageEvent(e.eventType));
//     if (filter === "clicks") return all.filter(e => isClickEvent(e.eventType));
//     return all;
//   }, [journey, filter]);

//   // collapse logic
//   const COLLAPSE_AFTER = 6;
//   const eventsVisible =
//     expanded || eventsFiltered.length <= COLLAPSE_AFTER
//       ? eventsFiltered
//       : eventsFiltered.slice(0, COLLAPSE_AFTER);

//   const leftOff = journey?.leftOffAt;

//   return (
//     <Transition appear show={isOpen} as={Fragment}>
//       <Dialog as="div" className="relative z-50" onClose={onClose}>
//         <Transition.Child
//           as={Fragment}
//           enter="ease-out duration-300"
//           enterFrom="opacity-0"
//           enterTo="opacity-100"
//           leave="ease-in duration-200"
//           leaveFrom="opacity-100"
//           leaveTo="opacity-0"
//         >
//           <div className="fixed inset-0 bg-black/40" />
//         </Transition.Child>

//         <div className="fixed inset-0 overflow-y-hidden">
//           <div className="flex items-center justify-center min-h-full p-4">
//             <Transition.Child
//               as={Fragment}
//               enter="ease-out duration-300"
//               enterFrom="opacity-0 scale-95"
//               enterTo="opacity-100 scale-100"
//               leave="ease-in duration-200"
//               leaveFrom="opacity-100 scale-100"
//               leaveTo="opacity-0 scale-95"
//             >
//               <Dialog.Panel className="w-full max-w-2xl flex flex-col max-h-[85vh] transform overflow-hidden rounded-xl bg-white shadow-xl transition-all">
//                 {/* Header */}
//                 <Dialog.Title className="sticky top-0 z-10 bg-white/70 backdrop-blur px-6 pt-6 pb-3 text-xl font-bold text-gray-800 flex items-center gap-2 border-b border-gray-200">
//                   <span className="text-purple-600">🧭</span>
//                   Contact Journey for {safeLog.contactName}
//                   {typeBadge}
//                   <div className="ml-auto flex items-center gap-2">
//                     <Filter size={16} className="text-gray-400" />
//                     <div className="inline-flex rounded-lg border overflow-hidden">
//                       <button
//                         className={`px-2 py-1 text-xs ${
//                           filter === "all"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("all")}
//                       >
//                         All
//                       </button>
//                       <button
//                         className={`px-2 py-1 text-xs border-l ${
//                           filter === "messages"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("messages")}
//                       >
//                         Messages
//                       </button>
//                       <button
//                         className={`px-2 py-1 text-xs border-l ${
//                           filter === "clicks"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("clicks")}
//                       >
//                         Clicks
//                       </button>
//                     </div>
//                     <button
//                       onClick={onClose}
//                       className="ml-2 inline-flex items-center justify-center rounded-lg p-2 hover:bg-gray-100"
//                       aria-label="Close"
//                     >
//                       <X size={16} />
//                     </button>
//                   </div>
//                 </Dialog.Title>

//                 {/* Body */}
//                 <div className="flex-grow overflow-y-auto px-6">
//                   {loading ? (
//                     <p className="text-center text-gray-500 py-8">
//                       Loading journey...
//                     </p>
//                   ) : (eventsFiltered.length || 0) > 0 ? (
//                     <>
//                       {leftOff && (
//                         <div className="mt-4 mb-2 text-xs text-gray-600">
//                           <span className="inline-flex items-center gap-1 rounded-full bg-amber-50 text-amber-700 px-2 py-1 font-semibold">
//                             Left off at:
//                             <span className="text-amber-900">{leftOff}</span>
//                             {journey.flowName ? (
//                               <span className="text-amber-700">
//                                 &nbsp;in{" "}
//                                 <span className="font-bold">
//                                   {journey.flowName}
//                                 </span>
//                               </span>
//                             ) : null}
//                           </span>
//                         </div>
//                       )}

//                       <div className="relative ml-4 py-6">
//                         {/* vertical line */}
//                         <div className="absolute left-0 top-0 bottom-0 w-px bg-slate-200" />
//                         <div className="space-y-6">
//                           {eventsVisible.map((event, idx) => (
//                             <JourneyEvent
//                               key={idx}
//                               isCurrent={
//                                 leftOff && event?.title?.includes(leftOff)
//                               }
//                               event={event}
//                             />
//                           ))}
//                         </div>
//                       </div>

//                       {eventsFiltered.length > COLLAPSE_AFTER && (
//                         <div className="flex justify-center pt-2 pb-6">
//                           <button
//                             onClick={() => setExpanded(v => !v)}
//                             className="text-sm font-semibold text-purple-700 hover:text-purple-800"
//                           >
//                             {expanded
//                               ? "Show less"
//                               : `Show ${
//                                   eventsFiltered.length - COLLAPSE_AFTER
//                                 } more events`}
//                           </button>
//                         </div>
//                       )}
//                     </>
//                   ) : (
//                     <p className="text-center text-gray-500 py-8">
//                       No journey events found for this message.
//                     </p>
//                   )}
//                 </div>

//                 {/* Footer */}
//                 <div className="flex-shrink-0 px-6 pt-3 pb-5 flex justify-end gap-3 border-t border-gray-200">
//                   <button
//                     onClick={onClose}
//                     className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm font-semibold"
//                   >
//                     Close
//                   </button>
//                 </div>
//               </Dialog.Panel>
//             </Transition.Child>
//           </div>
//         </div>
//       </Dialog>
//     </Transition>
//   );
// }

// // const JourneyEvent = ({ event, isCurrent }) => {
// //   const icon = ICONS[event.eventType] || (
// //     <Hourglass size={16} className="text-white" />
// //   );
// //   const color = COLORS[event.eventType] || "bg-gray-400";

// //   const handleCopy = () => {
// //     if (event.url) {
// //       navigator.clipboard?.writeText(event.url);
// //     }
// //   };

// //   const isClickable = Boolean(event.url);

// //   return (
// //     <div className="relative pl-8">
// //       {/* node */}
// //       <div
// //         className={`absolute -left-3 top-1 w-6 h-6 rounded-full flex items-center justify-center ring-4 ring-white ${color} ${
// //           isCurrent ? "scale-110 shadow-lg" : ""
// //         }`}
// //       >
// //         {icon}
// //       </div>

// //       <div
// //         className={`rounded-lg p-3 ${
// //           isCurrent ? "bg-amber-50 border border-amber-200" : "bg-white"
// //         }`}
// //       >
// //         <p className="font-semibold text-gray-800">{event.title}</p>

// //         <p className="text-sm text-gray-600 break-words">
// //           {event.details}
// //           {isClickable && (
// //             <>
// //               <br />
// //               <a
// //                 className="inline-flex items-center gap-1 text-blue-700 underline underline-offset-2"
// //                 href={event.url}
// //                 target="_blank"
// //                 rel="noreferrer"
// //                 title={event.url}
// //               >
// //                 <Link2 size={14} />
// //                 {displayUrl(event.url)}
// //               </a>
// //               <button
// //                 onClick={handleCopy}
// //                 className="ml-2 inline-flex items-center gap-1 text-gray-500 hover:text-gray-700"
// //                 title="Copy URL"
// //               >
// //                 <Copy size={14} />
// //                 <span className="text-xs">Copy</span>
// //               </button>
// //             </>
// //           )}
// //         </p>

// //         <p className="text-xs text-gray-400 mt-2">
// //           {formatDate(event.timestamp)} • {relTime(event.timestamp)}
// //         </p>
// //       </div>
// //     </div>
// //   );
// // };
// const JourneyEvent = ({ event, isCurrent }) => {
//   const icon = ICONS[event.eventType] || (
//     <Hourglass size={16} className="text-white" />
//   );
//   const color = COLORS[event.eventType] || "bg-gray-400";

//   const handleCopy = () => {
//     if (event.url) {
//       navigator.clipboard?.writeText(event.url);
//     }
//   };

//   const isClickable = Boolean(event.url);

//   // ✅ hide "details" for click-type events (Quick Reply / URL button)
//   const shouldShowDetails = !(
//     event.eventType === "ButtonClicked" || event.eventType === "Redirect"
//   );

//   return (
//     <div className="relative pl-8">
//       {/* node */}
//       <div
//         className={`absolute -left-3 top-1 w-6 h-6 rounded-full flex items-center justify-center ring-4 ring-white ${color} ${
//           isCurrent ? "scale-110 shadow-lg" : ""
//         }`}
//       >
//         {icon}
//       </div>

//       <div
//         className={`rounded-lg p-3 ${
//           isCurrent ? "bg-amber-50 border border-amber-200" : "bg-white"
//         }`}
//       >
//         <p className="font-semibold text-gray-800">{event.title}</p>

//         {shouldShowDetails && event.details && (
//           <p className="text-sm text-gray-600 break-words">{event.details}</p>
//         )}

//         {isClickable && (
//           <p className="mt-1">
//             <a
//               className="inline-flex items-center gap-1 text-blue-700 underline underline-offset-2"
//               href={event.url}
//               target="_blank"
//               rel="noreferrer"
//               title={event.url}
//             >
//               <Link2 size={14} />
//               {displayUrl(event.url)}
//             </a>
//             <button
//               onClick={handleCopy}
//               className="ml-2 inline-flex items-center gap-1 text-gray-500 hover:text-gray-700"
//               title="Copy URL"
//             >
//               <Copy size={14} />
//               <span className="text-xs">Copy</span>
//             </button>
//           </p>
//         )}

//         <p className="text-xs text-gray-400 mt-2">
//           {formatDate(event.timestamp)} • {relTime(event.timestamp)}
//         </p>
//       </div>
//     </div>
//   );
// };

// export default ContactJourneyModal;
// 📄 src/pages/campaigns/components/ContactJourneyModal.jsx
// import React, { useEffect, useMemo, useState, Fragment } from "react";
// import { Dialog, Transition } from "@headlessui/react";
// import axiosClient from "../../../api/axiosClient";
// import {
//   Send,
//   MousePointerClick,
//   Hourglass,
//   CheckCircle2,
//   Eye,
//   Share2,
//   Link2,
//   Copy,
//   Filter,
//   X,
// } from "lucide-react";

// const formatDate = dt => (dt ? new Date(dt).toLocaleString() : "N/A");

// // ---- helpers ----
// const relTime = iso => {
//   if (!iso) return "";
//   const diff = Date.now() - new Date(iso).getTime();
//   const abs = Math.abs(diff);
//   const mins = Math.floor(abs / (60 * 1000));
//   if (mins < 1) return "just now";
//   if (mins < 60) return `${mins}m ${diff < 0 ? "from now" : "ago"}`;
//   const hrs = Math.floor(mins / 60);
//   if (hrs < 24) return `${hrs}h ${diff < 0 ? "from now" : "ago"}`;
//   const days = Math.floor(hrs / 24);
//   return `${days}d ${diff < 0 ? "from now" : "ago"}`;
// };

// const displayUrl = raw => {
//   try {
//     const u = new URL(raw);
//     const tail =
//       u.pathname.length > 1 ? u.pathname.split("/").slice(-1)[0] : "";
//     return `${u.hostname}${tail ? `/${tail}` : ""}`;
//   } catch {
//     return raw?.slice(0, 60) || "";
//   }
// };

// // 👉 extract a phone number from any string like "WhatsApp User (+91897…)"
// const extractNumber = val => {
//   if (!val) return null;
//   const m = String(val).match(/(\+?\d[\d\s-]{5,}\d)/);
//   return m ? m[1].replace(/[\s-]/g, "") : null;
// };

// const ICONS = {
//   MessageSent: <Send size={16} className="text-white" />,
//   Delivered: <CheckCircle2 size={16} className="text-white" />,
//   Read: <Eye size={16} className="text-white" />,
//   ButtonClicked: <MousePointerClick size={16} className="text-white" />,
//   FlowSend: <Send size={16} className="text-white" />,
//   Redirect: <Share2 size={16} className="text-white" />,
// };

// const COLORS = {
//   MessageSent: "bg-blue-500",
//   Delivered: "bg-emerald-500",
//   Read: "bg-cyan-500",
//   ButtonClicked: "bg-green-500",
//   FlowSend: "bg-indigo-500",
//   Redirect: "bg-amber-500",
// };

// const isClickEvent = t => t === "ButtonClicked" || t === "Redirect";
// const isMessageEvent = t =>
//   t === "MessageSent" || t === "Delivered" || t === "Read" || t === "FlowSend";

// function ContactJourneyModal({ isOpen, onClose, log }) {
//   const [journey, setJourney] = useState({ events: [] });
//   const [loading, setLoading] = useState(false);
//   const [filter, setFilter] = useState("all"); // all | messages | clicks
//   const [expanded, setExpanded] = useState(false);

//   // ✅ safe fallback to avoid conditional return before hooks
//   const safeLog = log || { contactName: "Unknown" };

//   // Prefer explicit phone fields, then try to pull from contactName like "WhatsApp User (+91…)"
//   const displayPhone =
//     log?.recipientNumber ||
//     log?.contactPhone ||
//     log?.to ||
//     extractNumber(log?.contactName) ||
//     "Unknown";

//   useEffect(() => {
//     if (isOpen && log?.id) {
//       (async () => {
//         setLoading(true);
//         try {
//           const res = await axiosClient.get(`/tracking/journeys/${log.id}`);
//           const data = res.data;
//           if (Array.isArray(data)) setJourney({ events: data });
//           else setJourney(data || { events: [] });
//         } catch (e) {
//           console.error("Failed to fetch contact journey", e);
//           setJourney({ events: [] });
//         } finally {
//           setLoading(false);
//         }
//       })();
//     }
//   }, [isOpen, log]);

//   useEffect(() => {
//     if (isOpen) setExpanded(false);
//   }, [isOpen]);

//   const typeBadge =
//     journey.campaignType === "flow" ? (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-emerald-100 text-emerald-700 text-xs font-semibold">
//         Flow
//       </span>
//     ) : (
//       <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-blue-100 text-blue-700 text-xs font-semibold">
//         Dynamic URL
//       </span>
//     );

//   // filter view
//   const eventsFiltered = useMemo(() => {
//     const all = journey?.events || [];
//     if (filter === "messages")
//       return all.filter(e => isMessageEvent(e.eventType));
//     if (filter === "clicks") return all.filter(e => isClickEvent(e.eventType));
//     return all;
//   }, [journey, filter]);

//   // collapse logic
//   const COLLAPSE_AFTER = 6;
//   const eventsVisible =
//     expanded || eventsFiltered.length <= COLLAPSE_AFTER
//       ? eventsFiltered
//       : eventsFiltered.slice(0, COLLAPSE_AFTER);

//   const leftOff = journey?.leftOffAt;

//   return (
//     <Transition appear show={isOpen} as={Fragment}>
//       <Dialog as="div" className="relative z-50" onClose={onClose}>
//         <Transition.Child
//           as={Fragment}
//           enter="ease-out duration-300"
//           enterFrom="opacity-0"
//           enterTo="opacity-100"
//           leave="ease-in duration-200"
//           leaveFrom="opacity-100"
//           leaveTo="opacity-0"
//         >
//           <div className="fixed inset-0 bg-black/40" />
//         </Transition.Child>

//         <div className="fixed inset-0 overflow-y-hidden">
//           <div className="flex items-center justify-center min-h-full p-4">
//             <Transition.Child
//               as={Fragment}
//               enter="ease-out duration-300"
//               enterFrom="opacity-0 scale-95"
//               enterTo="opacity-100 scale-100"
//               leave="ease-in duration-200"
//               leaveFrom="opacity-100 scale-100"
//               leaveTo="opacity-0 scale-95"
//             >
//               <Dialog.Panel className="w-full max-w-2xl flex flex-col max-h-[85vh] transform overflow-hidden rounded-xl bg-white shadow-xl transition-all">
//                 {/* Header */}
//                 <Dialog.Title className="sticky top-0 z-10 bg-white/70 backdrop-blur px-6 pt-6 pb-3 text-lg font-semibold text-gray-800 flex items-center gap-2 border-b border-gray-200">
//                   <span className="text-purple-600">🧭</span>
//                   {/* 🔁 Show only the phone number here */}
//                   Contact Journey for {displayPhone}
//                   {typeBadge}
//                   <div className="ml-auto flex items-center gap-2">
//                     <Filter size={16} className="text-gray-400" />
//                     <div className="inline-flex rounded-lg border overflow-hidden">
//                       <button
//                         className={`px-2 py-1 text-xs ${
//                           filter === "all"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("all")}
//                       >
//                         All
//                       </button>
//                       <button
//                         className={`px-2 py-1 text-xs border-l ${
//                           filter === "messages"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("messages")}
//                       >
//                         Messages
//                       </button>
//                       <button
//                         className={`px-2 py-1 text-xs border-l ${
//                           filter === "clicks"
//                             ? "bg-gray-900 text-white"
//                             : "bg-white"
//                         }`}
//                         onClick={() => setFilter("clicks")}
//                       >
//                         Clicks
//                       </button>
//                     </div>
//                     <button
//                       onClick={onClose}
//                       className="ml-2 inline-flex items-center justify-center rounded-lg p-2 hover:bg-gray-100"
//                       aria-label="Close"
//                     >
//                       <X size={16} />
//                     </button>
//                   </div>
//                 </Dialog.Title>

//                 {/* Body */}
//                 <div className="flex-grow overflow-y-auto px-6">
//                   {loading ? (
//                     <p className="text-center text-gray-500 py-8">
//                       Loading journey...
//                     </p>
//                   ) : (eventsFiltered.length || 0) > 0 ? (
//                     <>
//                       {leftOff && (
//                         <div className="mt-4 mb-2 text-xs text-gray-600">
//                           <span className="inline-flex items-center gap-1 rounded-full bg-amber-50 text-amber-700 px-2 py-1 font-semibold">
//                             Left off at:
//                             <span className="text-amber-900">{leftOff}</span>
//                             {journey.flowName ? (
//                               <span className="text-amber-700">
//                                 &nbsp;in{" "}
//                                 <span className="font-bold">
//                                   {journey.flowName}
//                                 </span>
//                               </span>
//                             ) : null}
//                           </span>
//                         </div>
//                       )}

//                       <div className="relative ml-4 py-6">
//                         <div className="absolute left-0 top-0 bottom-0 w-px bg-slate-200" />
//                         <div className="space-y-6">
//                           {eventsVisible.map((event, idx) => (
//                             <JourneyEvent
//                               key={idx}
//                               isCurrent={
//                                 leftOff && event?.title?.includes(leftOff)
//                               }
//                               event={event}
//                             />
//                           ))}
//                         </div>
//                       </div>

//                       {eventsFiltered.length > COLLAPSE_AFTER && (
//                         <div className="flex justify-center pt-2 pb-6">
//                           <button
//                             onClick={() => setExpanded(v => !v)}
//                             className="text-sm font-semibold text-purple-700 hover:text-purple-800"
//                           >
//                             {expanded
//                               ? "Show less"
//                               : `Show ${
//                                   eventsFiltered.length - COLLAPSE_AFTER
//                                 } more events`}
//                           </button>
//                         </div>
//                       )}
//                     </>
//                   ) : (
//                     <p className="text-center text-gray-500 py-8">
//                       No journey events found for this message.
//                     </p>
//                   )}
//                 </div>

//                 {/* Footer */}
//                 <div className="flex-shrink-0 px-6 pt-3 pb-5 flex justify-end gap-3 border-t border-gray-200">
//                   <button
//                     onClick={onClose}
//                     className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm font-semibold"
//                   >
//                     Close
//                   </button>
//                 </div>
//               </Dialog.Panel>
//             </Transition.Child>
//           </div>
//         </div>
//       </Dialog>
//     </Transition>
//   );
// }

// const JourneyEvent = ({ event, isCurrent }) => {
//   const icon = ICONS[event.eventType] || (
//     <Hourglass size={16} className="text-white" />
//   );
//   const color = COLORS[event.eventType] || "bg-gray-400";

//   const handleCopy = () => {
//     if (event.url) {
//       navigator.clipboard?.writeText(event.url);
//     }
//   };

//   const isClickable = Boolean(event.url);

//   // Hide details for click-type events; keep for statuses/errors
//   const shouldShowDetails = !(
//     event.eventType === "ButtonClicked" || event.eventType === "Redirect"
//   );

//   return (
//     <div className="relative pl-8">
//       <div
//         className={`absolute -left-3 top-1 w-6 h-6 rounded-full flex items-center justify-center ring-4 ring-white ${color} ${
//           isCurrent ? "scale-110 shadow-lg" : ""
//         }`}
//       >
//         {icon}
//       </div>

//       <div
//         className={`rounded-lg p-2 ${
//           isCurrent ? "bg-amber-50 border border-amber-200" : "bg-white"
//         }`}
//       >
//         <p className="font-semibold text-gray-800">{event.title}</p>

//         {shouldShowDetails && event.details && (
//           <p className="text-sm text-gray-600 break-words">{event.details}</p>
//         )}

//         {isClickable && (
//           <p className="mt-1">
//             <a
//               className="inline-flex items-center gap-1 text-blue-700 underline underline-offset-2"
//               href={event.url}
//               target="_blank"
//               rel="noreferrer"
//               title={event.url}
//             >
//               <Link2 size={14} />
//               {displayUrl(event.url)}
//             </a>
//             <button
//               onClick={handleCopy}
//               className="ml-2 inline-flex items-center gap-1 text-gray-500 hover:text-gray-700"
//               title="Copy URL"
//             >
//               <Copy size={14} />
//               <span className="text-xs">Copy</span>
//             </button>
//           </p>
//         )}

//         <p className="text-xs text-gray-400 mt-2">
//           {formatDate(event.timestamp)} • {relTime(event.timestamp)}
//         </p>
//       </div>
//     </div>
//   );
// };

// export default ContactJourneyModal;

import React, { useEffect, useMemo, useState, Fragment } from "react";
import { Dialog, Transition } from "@headlessui/react";
import axiosClient from "../../../api/axiosClient";
import {
  Send,
  MousePointerClick,
  Hourglass,
  CheckCircle2,
  Eye,
  Share2,
  Link2,
  Copy,
  Filter,
  X,
} from "lucide-react";

const formatDate = dt => (dt ? new Date(dt).toLocaleString() : "N/A");

const relTime = iso => {
  if (!iso) return "";
  const diff = Date.now() - new Date(iso).getTime();
  const abs = Math.abs(diff);
  const mins = Math.floor(abs / (60 * 1000));
  if (mins < 1) return "just now";
  if (mins < 60) return `${mins}m ${diff < 0 ? "from now" : "ago"}`;
  const hrs = Math.floor(mins / 60);
  if (hrs < 24) return `${hrs}h ${diff < 0 ? "from now" : "ago"}`;
  const days = Math.floor(hrs / 24);
  return `${days}d ${diff < 0 ? "from now" : "ago"}`;
};

const displayUrl = raw => {
  try {
    const u = new URL(raw);
    const tail =
      u.pathname.length > 1 ? u.pathname.split("/").slice(-1)[0] : "";
    return `${u.hostname}${tail ? `/${tail}` : ""}`;
  } catch {
    return raw?.slice(0, 60) || "";
  }
};

const extractNumber = val => {
  if (!val) return null;
  const m = String(val).match(/(\+?\d[\d\s-]{5,}\d)/);
  return m ? m[1].replace(/[\s-]/g, "") : null;
};

const ICONS = {
  MessageSent: <Send size={16} className="text-white" />,
  Delivered: <CheckCircle2 size={16} className="text-white" />,
  Read: <Eye size={16} className="text-white" />,
  ButtonClicked: <MousePointerClick size={16} className="text-white" />,
  FlowSend: <Send size={16} className="text-white" />,
  Redirect: <Share2 size={16} className="text-white" />,
};

const COLORS = {
  MessageSent: "bg-blue-500",
  Delivered: "bg-emerald-500",
  Read: "bg-cyan-500",
  ButtonClicked: "bg-green-500",
  FlowSend: "bg-indigo-500",
  Redirect: "bg-amber-500",
};

const isClickEvent = t => t === "ButtonClicked" || t === "Redirect";
const isMessageEvent = t =>
  t === "MessageSent" || t === "Delivered" || t === "Read" || t === "FlowSend";

function ContactJourneyModal({ isOpen, onClose, log }) {
  const [journey, setJourney] = useState({ events: [] });
  const [loading, setLoading] = useState(false);
  const [filter, setFilter] = useState("all");
  const [expanded, setExpanded] = useState(false);

  const displayPhone =
    log?.recipientNumber ||
    log?.contactPhone ||
    log?.to ||
    extractNumber(log?.contactName) ||
    "Unknown";

  useEffect(() => {
    if (isOpen && log?.id) {
      (async () => {
        setLoading(true);
        try {
          const res = await axiosClient.get(`/tracking/journeys/${log.id}`);
          const data = res.data;
          if (Array.isArray(data)) setJourney({ events: data });
          else setJourney(data || { events: [] });
        } catch (e) {
          console.error("Failed to fetch contact journey", e);
          setJourney({ events: [] });
        } finally {
          setLoading(false);
        }
      })();
    }
  }, [isOpen, log]);

  useEffect(() => {
    if (isOpen) setExpanded(false);
  }, [isOpen]);

  const typeBadge =
    journey.campaignType === "flow" ? (
      <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-emerald-100 text-emerald-700 text-xs font-semibold">
        Flow
      </span>
    ) : (
      <span className="ml-2 inline-flex items-center px-2 py-0.5 rounded bg-blue-100 text-blue-700 text-xs font-semibold">
        Dynamic URL
      </span>
    );

  const eventsFiltered = useMemo(() => {
    const all = journey?.events || [];
    if (filter === "messages")
      return all.filter(e => isMessageEvent(e.eventType));
    if (filter === "clicks") return all.filter(e => isClickEvent(e.eventType));
    return all;
  }, [journey, filter]);

  const COLLAPSE_AFTER = 6;
  const eventsVisible =
    expanded || eventsFiltered.length <= COLLAPSE_AFTER
      ? eventsFiltered
      : eventsFiltered.slice(0, COLLAPSE_AFTER);

  const leftOff = journey?.leftOffAt;

  return (
    <Transition appear show={isOpen} as={Fragment}>
      <Dialog as="div" className="relative z-50" onClose={onClose}>
        <Transition.Child
          as={Fragment}
          enter="ease-out duration-300"
          enterFrom="opacity-0"
          enterTo="opacity-100"
          leave="ease-in duration-200"
          leaveFrom="opacity-100"
          leaveTo="opacity-0"
        >
          <div className="fixed inset-0 bg-black/40" />
        </Transition.Child>

        <div className="fixed inset-0 overflow-y-hidden">
          <div className="flex items-center justify-center min-h-full p-4">
            <Transition.Child
              as={Fragment}
              enter="ease-out duration-300"
              enterFrom="opacity-0 scale-95"
              enterTo="opacity-100 scale-100"
              leave="ease-in duration-200"
              leaveFrom="opacity-100 scale-100"
              leaveTo="opacity-0 scale-95"
            >
              <Dialog.Panel className="w-full max-w-2xl flex flex-col max-h-[85vh] transform overflow-hidden rounded-xl bg-white shadow-xl transition-all">
                {/* Header */}
                <Dialog.Title className="sticky top-0 z-10 bg-white/70 backdrop-blur px-6 pt-6 pb-2 text-base font-semibold text-gray-800 flex items-center gap-2 border-b border-gray-200">
                  <span className="text-purple-600">🧭</span>
                  Contact Journey for {displayPhone}
                  {typeBadge}
                  <div className="ml-auto flex items-center gap-2">
                    <Filter size={16} className="text-gray-400" />
                    <div className="inline-flex rounded-lg border overflow-hidden">
                      <button
                        className={`px-2 py-1 text-xs ${
                          filter === "all"
                            ? "bg-gray-900 text-white"
                            : "bg-white"
                        }`}
                        onClick={() => setFilter("all")}
                      >
                        All
                      </button>
                      <button
                        className={`px-2 py-1 text-xs border-l ${
                          filter === "messages"
                            ? "bg-gray-900 text-white"
                            : "bg-white"
                        }`}
                        onClick={() => setFilter("messages")}
                      >
                        Messages
                      </button>
                      <button
                        className={`px-2 py-1 text-xs border-l ${
                          filter === "clicks"
                            ? "bg-gray-900 text-white"
                            : "bg-white"
                        }`}
                        onClick={() => setFilter("clicks")}
                      >
                        Clicks
                      </button>
                    </div>
                    <button
                      onClick={onClose}
                      className="ml-2 inline-flex items-center justify-center rounded-lg p-2 hover:bg-gray-100"
                      aria-label="Close"
                    >
                      <X size={16} />
                    </button>
                  </div>
                </Dialog.Title>

                {/* Body */}
                <div className="flex-grow overflow-y-auto px-6">
                  {loading ? (
                    <p className="text-center text-gray-500 py-8">
                      Loading journey...
                    </p>
                  ) : (eventsFiltered.length || 0) > 0 ? (
                    <>
                      {leftOff && (
                        <div className="mt-3 mb-2 text-xs text-gray-600">
                          <span className="inline-flex items-center gap-1 rounded-full bg-amber-50 text-amber-700 px-2 py-1 font-semibold">
                            Left off at:
                            <span className="text-amber-900">{leftOff}</span>
                            {journey.flowName ? (
                              <span className="text-amber-700">
                                &nbsp;in{" "}
                                <span className="font-bold">
                                  {journey.flowName}
                                </span>
                              </span>
                            ) : null}
                          </span>
                        </div>
                      )}

                      <div className="relative ml-3 py-3">
                        <div className="absolute left-0 top-0 bottom-0 w-px bg-slate-200" />
                        <div className="space-y-3">
                          {eventsVisible.map((event, idx) => (
                            <JourneyEvent
                              key={idx}
                              isCurrent={
                                leftOff && event?.title?.includes(leftOff)
                              }
                              event={event}
                            />
                          ))}
                        </div>
                      </div>

                      {eventsFiltered.length > COLLAPSE_AFTER && (
                        <div className="flex justify-center pt-2 pb-4">
                          <button
                            onClick={() => setExpanded(v => !v)}
                            className="text-sm font-semibold text-purple-700 hover:text-purple-800"
                          >
                            {expanded
                              ? "Show less"
                              : `Show ${
                                  eventsFiltered.length - COLLAPSE_AFTER
                                } more events`}
                          </button>
                        </div>
                      )}
                    </>
                  ) : (
                    <p className="text-center text-gray-500 py-8">
                      No journey events found for this message.
                    </p>
                  )}
                </div>

                {/* Footer */}
                <div className="flex-shrink-0 px-6 pt-2 pb-4 flex justify-end gap-3 border-t border-gray-200">
                  <button
                    onClick={onClose}
                    className="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 text-sm font-semibold"
                  >
                    Close
                  </button>
                </div>
              </Dialog.Panel>
            </Transition.Child>
          </div>
        </div>
      </Dialog>
    </Transition>
  );
}

const JourneyEvent = ({ event, isCurrent }) => {
  const icon = ICONS[event.eventType] || (
    <Hourglass size={16} className="text-white" />
  );
  const color = COLORS[event.eventType] || "bg-gray-400";

  const handleCopy = () => {
    if (event.url) {
      navigator.clipboard?.writeText(event.url);
    }
  };

  const isClickable = Boolean(event.url);
  const shouldShowDetails = !(
    event.eventType === "ButtonClicked" || event.eventType === "Redirect"
  );

  return (
    <div className="relative pl-6">
      <div
        className={`absolute -left-3 top-1 w-6 h-6 rounded-full flex items-center justify-center ring-4 ring-white ${color} ${
          isCurrent ? "scale-110 shadow-lg" : ""
        }`}
      >
        {icon}
      </div>

      <div
        className={`rounded-lg p-1.5 ${
          isCurrent ? "bg-amber-50 border border-amber-200" : "bg-white"
        }`}
      >
        <p className="font-semibold text-gray-800">{event.title}</p>

        {shouldShowDetails && event.details && (
          <p className="text-sm text-gray-600 break-words">{event.details}</p>
        )}

        {isClickable && (
          <p className="mt-1">
            <a
              className="inline-flex items-center gap-1 text-blue-700 underline underline-offset-2"
              href={event.url}
              target="_blank"
              rel="noreferrer"
              title={event.url}
            >
              <Link2 size={14} />
              {displayUrl(event.url)}
            </a>
            <button
              onClick={handleCopy}
              className="ml-2 inline-flex items-center gap-1 text-gray-500 hover:text-gray-700"
              title="Copy URL"
            >
              <Copy size={14} />
              <span className="text-xs">Copy</span>
            </button>
          </p>
        )}

        <p className="text-xs text-gray-400 mt-1">
          {formatDate(event.timestamp)} • {relTime(event.timestamp)}
        </p>
      </div>
    </div>
  );
};

export default ContactJourneyModal;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\ContactSelector.jsx 
====================================================== 
 
import React, { useEffect, useState, useCallback } from "react";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";
import Papa from "papaparse";
import TagFilterDropdown from "./TagFilterDropdown";

function ContactSelector({ selectedIds, onChange }) {
  const [contacts, setContacts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [tagFilter, setTagFilter] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [importedContacts, setImportedContacts] = useState([]);
  const [showImportModal, setShowImportModal] = useState(false);

  // 1. Wrap loadContacts in useCallback so its reference is stable
  const loadContacts = useCallback(async () => {
    setLoading(true);
    try {
      let res;
      if (tagFilter.length > 0) {
        res = await axiosClient.post("/contacts/filter-by-tags", tagFilter);
        setContacts(res.data?.data || []);
      } else {
        res = await axiosClient.get("/contacts", {
          params: {
            tab: "all",
            page: 1,
            pageSize: 1000,
          },
        });
        setContacts(res.data?.data?.items || []);
      }
    } catch (err) {
      toast.error("Failed to load contacts");
    } finally {
      setLoading(false);
    }
  }, [tagFilter]); // Add tagFilter as dependency (it's used inside)

  // 2. Add loadContacts to dependency array
  useEffect(() => {
    loadContacts();
  }, [loadContacts]);

  const handleToggle = id => {
    const newSelected = selectedIds.includes(id)
      ? selectedIds.filter(cid => cid !== id)
      : [...selectedIds, id];
    onChange(newSelected);
  };

  const handleFileUpload = e => {
    const file = e.target.files[0];
    if (!file) return;

    Papa.parse(file, {
      header: true,
      skipEmptyLines: true,
      complete: function (results) {
        const parsed = results.data.map(row => ({
          id: crypto.randomUUID(),
          name: row.name || "Unnamed",
          phone: row.phone || "",
        }));
        setImportedContacts(parsed);
        setShowImportModal(true);
      },
      error: function () {
        toast.error("CSV Parsing Failed");
      },
    });
  };

  const confirmImport = () => {
    setContacts(prev => [...prev, ...importedContacts]);
    const allIds = importedContacts.map(c => c.id);
    onChange([...selectedIds, ...allIds]);
    setShowImportModal(false);
    toast.success("Contacts imported successfully");
  };

  const filteredContacts = contacts.filter(
    c =>
      c.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      c.phone?.includes(searchTerm)
  );

  if (loading) return <p>⏳ Loading contacts...</p>;

  return (
    <div className="space-y-4">
      {/* 🔍 Search + Tag Filter + CSV Import */}
      <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
        <input
          type="text"
          placeholder="Search by name or phone"
          value={searchTerm}
          onChange={e => setSearchTerm(e.target.value)}
          className="w-full sm:w-1/2 px-3 py-2 rounded-md border"
        />

        <TagFilterDropdown
          selectedTags={tagFilter}
          onChange={setTagFilter}
          category="Interest"
        />

        <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-4">
          Import CSV
          <input
            type="file"
            accept=".csv"
            onChange={handleFileUpload}
            className="hidden"
          />
        </label>
      </div>

      {/* 🔘 Contact List */}
      {filteredContacts.length === 0 ? (
        <p className="text-gray-500">⚠️ No matching contacts found.</p>
      ) : (
        filteredContacts.map(contact => (
          <label
            key={contact.id}
            className="flex flex-col sm:flex-row items-start sm:items-center gap-1 sm:gap-2 text-sm text-gray-700 border-b py-1"
          >
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                checked={selectedIds.includes(contact.id)}
                onChange={() => handleToggle(contact.id)}
              />
              <span>
                {contact.name} —{" "}
                <span className="text-gray-500">
                  {contact.phoneNumber || contact.phone || "—"}
                </span>
              </span>
            </div>
            {/* 🎨 Tag Chips */}
            <div className="flex flex-wrap gap-1 ml-6">
              {contact.tags?.map(tag => (
                <span
                  key={tag.tagId}
                  className="text-xs px-2 py-0.5 rounded-full"
                  style={{
                    backgroundColor: tag.colorHex || "#E5E7EB",
                    color: "#000",
                  }}
                >
                  {tag.tagName}
                </span>
              ))}
            </div>
          </label>
        ))
      )}

      {/* 📦 Preview Import Modal */}
      {showImportModal && (
        <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
            <h2 className="text-lg font-bold mb-4">
              Preview Imported Contacts
            </h2>
            <div className="max-h-60 overflow-auto space-y-2">
              {importedContacts.map((c, idx) => (
                <div key={idx} className="text-sm border-b py-1">
                  <strong>{c.name}</strong> — {c.phone}
                </div>
              ))}
            </div>
            <div className="flex justify-end mt-4 gap-4">
              <button
                className="text-gray-600 hover:underline"
                onClick={() => setShowImportModal(false)}
              >
                Cancel
              </button>
              <button
                className="bg-purple-600 text-white px-4 py-2 rounded-md"
                onClick={confirmImport}
              >
                Import & Select
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default ContactSelector;

// import React, { useEffect, useState } from "react";
// import axiosClient from "../../../api/axiosClient";
// import { toast } from "react-toastify";
// import Papa from "papaparse";
// import TagFilterDropdown from "./TagFilterDropdown";

// function ContactSelector({ selectedIds, onChange }) {
//   const [contacts, setContacts] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [tagFilter, setTagFilter] = useState([]);
//   const [searchTerm, setSearchTerm] = useState("");
//   const [importedContacts, setImportedContacts] = useState([]);
//   const [showImportModal, setShowImportModal] = useState(false);

//   useEffect(() => {
//     loadContacts();
//   }, [tagFilter]);

//   const loadContacts = async () => {
//     setLoading(true);
//     try {
//       let res;
//       if (tagFilter.length > 0) {
//         res = await axiosClient.post("/contacts/filter-by-tags", tagFilter);
//         setContacts(res.data?.data || []);
//       } else {
//         res = await axiosClient.get("/contacts", {
//           params: {
//             tab: "all",
//             page: 1,
//             pageSize: 1000,
//           },
//         });
//         setContacts(res.data?.data?.items || []);
//       }
//     } catch (err) {
//       toast.error("Failed to load contacts");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const handleToggle = id => {
//     const newSelected = selectedIds.includes(id)
//       ? selectedIds.filter(cid => cid !== id)
//       : [...selectedIds, id];
//     onChange(newSelected);
//   };

//   const handleFileUpload = e => {
//     const file = e.target.files[0];
//     if (!file) return;

//     Papa.parse(file, {
//       header: true,
//       skipEmptyLines: true,
//       complete: function (results) {
//         const parsed = results.data.map(row => ({
//           id: crypto.randomUUID(),
//           name: row.name || "Unnamed",
//           phone: row.phone || "",
//         }));
//         setImportedContacts(parsed);
//         setShowImportModal(true);
//       },
//       error: function () {
//         toast.error("CSV Parsing Failed");
//       },
//     });
//   };

//   const confirmImport = () => {
//     setContacts(prev => [...prev, ...importedContacts]);
//     const allIds = importedContacts.map(c => c.id);
//     onChange([...selectedIds, ...allIds]);
//     setShowImportModal(false);
//     toast.success("Contacts imported successfully");
//   };

//   const filteredContacts = contacts.filter(
//     c =>
//       c.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
//       c.phone?.includes(searchTerm)
//   );

//   if (loading) return <p>⏳ Loading contacts...</p>;

//   return (
//     <div className="space-y-4">
//       {/* 🔍 Search + Tag Filter + CSV Import */}
//       <div className="flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between">
//         <input
//           type="text"
//           placeholder="Search by name or phone"
//           value={searchTerm}
//           onChange={e => setSearchTerm(e.target.value)}
//           className="w-full sm:w-1/2 px-3 py-2 rounded-md border"
//         />

//         <TagFilterDropdown
//           selectedTags={tagFilter}
//           onChange={setTagFilter}
//           category="Interest"
//         />

//         <label className="cursor-pointer text-purple-600 hover:underline text-sm sm:ml-4">
//           Import CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={handleFileUpload}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* 🔘 Contact List */}
//       {filteredContacts.length === 0 ? (
//         <p className="text-gray-500">⚠️ No matching contacts found.</p>
//       ) : (
//         filteredContacts.map(contact => (
//           <label
//             key={contact.id}
//             className="flex flex-col sm:flex-row items-start sm:items-center gap-1 sm:gap-2 text-sm text-gray-700 border-b py-1"
//           >
//             <div className="flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={selectedIds.includes(contact.id)}
//                 onChange={() => handleToggle(contact.id)}
//               />
//               <span>
//                 {contact.name} —{" "}
//                 <span className="text-gray-500">
//                   {contact.phoneNumber || contact.phone || "—"}
//                 </span>
//               </span>
//             </div>
//             {/* 🎨 Tag Chips */}
//             <div className="flex flex-wrap gap-1 ml-6">
//               {contact.tags?.map(tag => (
//                 <span
//                   key={tag.tagId}
//                   className="text-xs px-2 py-0.5 rounded-full"
//                   style={{
//                     backgroundColor: tag.colorHex || "#E5E7EB",
//                     color: "#000",
//                   }}
//                 >
//                   {tag.tagName}
//                 </span>
//               ))}
//             </div>
//           </label>
//         ))
//       )}

//       {/* 📦 Preview Import Modal */}
//       {showImportModal && (
//         <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
//           <div className="bg-white rounded-lg shadow-xl p-6 w-full max-w-md">
//             <h2 className="text-lg font-bold mb-4">
//               Preview Imported Contacts
//             </h2>
//             <div className="max-h-60 overflow-auto space-y-2">
//               {importedContacts.map((c, idx) => (
//                 <div key={idx} className="text-sm border-b py-1">
//                   <strong>{c.name}</strong> — {c.phone}
//                 </div>
//               ))}
//             </div>
//             <div className="flex justify-end mt-4 gap-4">
//               <button
//                 className="text-gray-600 hover:underline"
//                 onClick={() => setShowImportModal(false)}
//               >
//                 Cancel
//               </button>
//               <button
//                 className="bg-purple-600 text-white px-4 py-2 rounded-md"
//                 onClick={confirmImport}
//               >
//                 Import & Select
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }

// export default ContactSelector;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\CsvAudienceSection.jsx 
====================================================== 
 
// src/pages/Campaigns/components/CsvAudienceSection.jsx
import React, { useEffect, useMemo, useRef, useState } from "react";
import { toast } from "react-toastify";
import {
  fetchCsvSchema,
  downloadCsvSampleBlob,
  uploadCsvBatch,
  getBatchSample,
  validateBatch,
  suggestMappings,
  saveMappings,
  materialize,
} from "../api/csvApi";

/* ---------------- Utilities ---------------- */

function saveBlob(blob, filename) {
  const url = window.URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename;
  a.click();
  window.URL.revokeObjectURL(url);
}

const norm = s =>
  String(s || "")
    .toLowerCase()
    .replace(/[\s._-]+/g, "")
    .replace(/[^a-z0-9]/g, "");

const PHONE_ALIASES = ["phone", "mobile", "whatsapp", "number", "phonee164"];

// Aliases to help auto-map
const ALIASES = {
  // parameterN
  parameter1: ["param1", "body1"],
  parameter2: ["param2", "body2"],
  parameter3: ["param3", "body3"],
  parameter4: ["param4", "body4"],
  parameter5: ["param5", "body5"],
  // header text
  headerpara1: ["header1", "headerparam1"],
  headerpara2: ["header2", "headerparam2"],
  headerpara3: ["header3", "headerparam3"],
  // buttons
  buttonpara1: ["btn1", "button1", "url1", "buttonparam1"],
  buttonpara2: ["btn2", "button2", "url2", "buttonparam2"],
  buttonpara3: ["btn3", "button3", "url3", "buttonparam3"],
};

// Auto-pick CSV columns for expected keys.
function autoPick(headers, wants) {
  const map = {};
  const used = new Set();
  const H = headers.map(h => ({ raw: h, k: norm(h) }));

  // 1) exact (case-insensitive)
  for (const key of wants) {
    const hit = headers.find(h => norm(h) === norm(key));
    if (hit) {
      map[key] = hit;
      used.add(hit);
    }
  }

  // 2) aliases
  for (const key of wants) {
    if (map[key]) continue;
    const aliases = ALIASES[key] || [];
    const hit = H.find(
      h => aliases.some(a => h.k === norm(a)) && !used.has(h.raw)
    );
    if (hit) {
      map[key] = hit.raw;
      used.add(hit.raw);
    }
  }

  // 3) parameterN convenience (match "paramN" or "bodyN")
  for (const key of wants) {
    if (map[key]) continue;
    const m = key.match(/^parameter(\d+)$/i);
    if (!m) continue;
    const n = m[1];
    const hit = H.find(
      h => (h.k === `param${n}` || h.k === `body${n}`) && !used.has(h.raw)
    );
    if (hit) {
      map[key] = hit.raw;
      used.add(hit.raw);
    }
  }

  return map;
}

/* ---------------- Component ---------------- */

export default function CsvAudienceSection({ campaignId }) {
  const [loading, setLoading] = useState(true);
  const [schema, setSchema] = useState(null);

  const [batch, setBatch] = useState(null);
  const [sample, setSample] = useState(null);
  const [valReq, setValReq] = useState({
    normalizePhone: true,
    checkDuplicates: true,
  });
  const [valRes, setValRes] = useState(null);

  // {{n}} mapping UI (body placeholders)
  const [paramMappings, setParamMappings] = useState([]);
  // Explicit mapping for headerparaN / buttonparaN
  const [expectedKeys, setExpectedKeys] = useState([]); // EXACTLY as backend returns
  const [keyToColumn, setKeyToColumn] = useState({});

  const [phoneHeader, setPhoneHeader] = useState("");
  const [audienceName, setAudienceName] = useState(() => {
    const d = new Date();
    const yyyy = d.getFullYear();
    const mm = String(d.getMonth() + 1).padStart(2, "0");
    const dd = String(d.getDate()).padStart(2, "0");
    return `Audience ${yyyy}-${mm}-${dd}`;
  });

  const [dryPreview, setDryPreview] = useState(null);
  const [persisting, setPersisting] = useState(false);

  const [showMapping, setShowMapping] = useState(false);
  const topRef = useRef(null);

  // Load schema (columns come straight from backend)
  useEffect(() => {
    let alive = true;
    (async () => {
      try {
        setLoading(true);
        const sc = await fetchCsvSchema(campaignId);
        if (!alive) return;
        setSchema(sc);

        // Columns exactly as BE will generate in CSV:
        // e.g. ["parameter1","headerpara1","buttonpara1"]
        const keys = Array.isArray(sc?.headers) ? sc.headers : [];
        setExpectedKeys(keys);

        // Setup legacy {{n}} slots based on placeholderCount for body values
        const N = Number(sc?.placeholderCount || 0);
        setParamMappings(
          Array.from({ length: N }, (_, i) => ({
            index: i + 1,
            sourceType: "csv",
            sourceName: "",
            constValue: "",
          }))
        );
      } catch {
        toast.error("Failed to load CSV schema.");
      } finally {
        if (alive) setLoading(false);
      }
    })();
    return () => {
      alive = false;
    };
  }, [campaignId]);

  const csvHeaders = useMemo(
    () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
    [schema, batch, sample]
  );

  const updateMapping = (idx, patch) =>
    setParamMappings(prev => {
      const next = [...prev];
      next[idx] = { ...next[idx], ...patch };
      return next;
    });

  const handleDownloadSample = async () => {
    try {
      const blob = await downloadCsvSampleBlob(campaignId);
      saveBlob(blob, `campaign-${campaignId}-sample.csv`);
    } catch {
      toast.error("Could not download sample CSV.");
    }
  };

  const handleFile = async f => {
    if (!f) return;
    try {
      const up = await uploadCsvBatch(f, null);
      setBatch(up);
      toast.success("CSV uploaded.");

      const s = await getBatchSample(up?.batchId, 10);
      setSample(s);

      const hdrs = Array.isArray(s?.headers) ? s.headers : [];

      // Auto-pick phone column
      const lower = hdrs.map(h => String(h).toLowerCase());
      const guessIdx = lower.findIndex(h =>
        PHONE_ALIASES.some(k => h.includes(k))
      );
      setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

      // Auto-map explicit keys (parameter/headerpara/buttonpara)
      const km = autoPick(hdrs, expectedKeys);
      setKeyToColumn(km);

      // Also seed the legacy {{n}} list for body placeholders
      setParamMappings(prev =>
        prev.map(p => {
          const key = `parameter${p.index}`;
          return km[key] ? { ...p, sourceName: km[key] } : p;
        })
      );

      // Optional server suggestions for {{n}}
      try {
        const sugg = await suggestMappings(campaignId, up?.batchId);
        if (Array.isArray(sugg?.items)) {
          setParamMappings(prev =>
            prev.map(p => {
              const m = sugg.items.find(x => x.index === p.index);
              return m ? { ...p, ...m } : p;
            })
          );
        }
      } catch {}
      setShowMapping(false);
    } catch (e) {
      toast.error(e?.message || "CSV upload failed.");
    }
  };

  const handleValidate = async () => {
    if (!batch?.batchId) return toast.warn("Upload a CSV first.");
    if (!phoneHeader) return toast.warn("Choose the phone column.");

    try {
      const req = {
        phoneHeader,
        requiredHeaders: [],
        normalizePhone: !!valReq.normalizePhone,
        checkDuplicates: !!valReq.checkDuplicates,
      };
      const res = await validateBatch(batch.batchId, req);
      setValRes(res);
      if (Array.isArray(res?.problems) && res.problems.length > 0) {
        toast.warn(`Validation found ${res.problems.length} issue(s).`);
      } else {
        toast.success("Validation passed.");
      }
    } catch {
      toast.error("Validation call failed.");
    }
  };

  // Build the mapping dictionary the backend expects.
  //  - "{{n}}" for body placeholders (legacy, required by BE)
  //  - "headerparaN"/"buttonparaN" -> CSV column names
  const buildMappingDict = () => {
    const dict = {};

    // Body placeholders -> {{n}}
    for (const m of paramMappings) {
      const key = `{{${m.index}}}`;
      if (m.sourceType === "csv") {
        dict[key] = m.sourceName || "";
      } else {
        dict[key] = `constant:${m.constValue ?? ""}`;
      }
    }

    // Header & buttons only
    for (const [k, v] of Object.entries(keyToColumn || {})) {
      if (!v) continue;
      if (/^parameter\d+$/i.test(k)) continue; // handled via {{n}}
      dict[k] = v;
    }

    return dict;
  };

  const handleDryRun = async () => {
    if (!batch?.batchId) return toast.warn("Upload a CSV first.");
    try {
      await saveMappings(campaignId, buildMappingDict());
      const body = {
        csvBatchId: batch.batchId,
        mappings: buildMappingDict(),
        phoneField: phoneHeader || undefined,
        normalizePhones: !!valReq.normalizePhone,
        deduplicate: !!valReq.checkDuplicates,
        persist: false,
      };
      const preview = await materialize(campaignId, body);
      setDryPreview(preview);
      toast.success("Dry-run ready.");
    } catch {
      toast.error("Dry-run failed.");
    }
  };

  const handlePersist = async () => {
    if (!batch?.batchId) return toast.warn("Upload a CSV first.");
    if (!audienceName?.trim()) return toast.warn("Enter an audience name.");
    setPersisting(true);
    try {
      await saveMappings(campaignId, buildMappingDict());
      const body = {
        csvBatchId: batch.batchId,
        mappings: buildMappingDict(),
        phoneField: phoneHeader || undefined,
        normalizePhones: !!valReq.normalizePhone,
        deduplicate: !!valReq.checkDuplicates,
        persist: true,
        audienceName: audienceName.trim(),
      };
      await materialize(campaignId, body);
      toast.success("Audience created and recipients materialized.");
    } catch {
      toast.error("Persist failed.");
    } finally {
      setPersisting(false);
    }
  };

  // Only count headerpara*/buttonpara* when showing mapping status UI
  const visibleKeys = useMemo(
    () => (expectedKeys || []).filter(k => !/^parameter\d+$/i.test(k)),
    [expectedKeys]
  );
  const mappingStatus = useMemo(() => {
    if (!visibleKeys.length) return { label: "No extra params", ok: true };
    const missing = visibleKeys.filter(k => !keyToColumn[k]);
    return missing.length
      ? { label: `${missing.length} missing`, ok: false }
      : { label: "All mapped", ok: true };
  }, [visibleKeys, keyToColumn]);

  if (loading) {
    return (
      <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
        Loading CSV schema…
      </div>
    );
  }

  return (
    <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
      <h2 className="mb-3 text-sm font-semibold text-gray-800">
        Audience via CSV
      </h2>

      {/* Audience name */}
      <div className="mb-3">
        <input
          className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
          placeholder="Audience name (required to persist)"
          value={audienceName}
          onChange={e => setAudienceName(e.target.value)}
        />
      </div>

      {/* Expected columns + actions */}
      <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
        <div className="text-gray-600">
          Expected columns:&nbsp;
          <code className="rounded bg-gray-100 px-1.5 py-0.5">
            {["phone", ...(schema?.headers || [])].join(", ")}
          </code>
        </div>
        <button
          type="button"
          onClick={handleDownloadSample}
          className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
        >
          Download sample CSV
        </button>
        {/* Upload CSV (indigo outline) */}
        <div className="ml-auto">
          <input
            id="csv-file-input"
            type="file"
            accept=".csv"
            onChange={e => handleFile(e.target.files?.[0])}
            className="sr-only"
          />
          <label
            htmlFor="csv-file-input"
            className="inline-flex items-center gap-2 rounded-lg border border-indigo-300 bg-white px-3 py-1.5 text-xs font-semibold text-indigo-700 shadow-sm transition hover:bg-indigo-50 focus:outline-none focus-visible:ring-2 focus-visible:ring-indigo-500"
          >
            {/* Cloud-upload icon */}
            <svg
              aria-hidden="true"
              viewBox="0 0 24 24"
              className="h-4 w-4"
              fill="none"
              stroke="currentColor"
              strokeWidth="1.8"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M16 16.5a4 4 0 0 0-1-7.9 5 5 0 0 0-9.8 1.2 3.5 3.5 0 0 0 .7 6.9h2" />
              <path d="M12 12v8" />
              <path d="m8.5 15.5 3.5-3.5 3.5 3.5" />
            </svg>
            Upload CSV
          </label>
        </div>
      </div>

      {/* Helper note */}
      <div className="mb-3 rounded-md border border-dashed border-gray-200 bg-gray-50 p-2 text-[11px] text-gray-600">
        We set any media URL once at <strong>campaign creation</strong> (not in
        CSV). Your CSV should contain <code>phone</code>, body values as{" "}
        <code>parameter1…N</code>, plus any <code>headerparaN</code> and{" "}
        <code>buttonparaN</code> columns if the template needs them.
      </div>

      {/* Phone + toggles and mapping */}
      <div className="grid gap-3 md:grid-cols-2">
        <div className="rounded-lg border p-3">
          <h3 className="mb-2 text-xs font-semibold text-gray-700">
            Phone column
          </h3>
          <select
            className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
            value={phoneHeader}
            onChange={e => setPhoneHeader(e.target.value)}
            disabled={!(csvHeaders ?? []).length}
          >
            <option value="">
              {(csvHeaders ?? []).length
                ? "-- Select column --"
                : "Upload a CSV first"}
            </option>
            {(csvHeaders ?? []).map(h => (
              <option key={h} value={h}>
                {h}
              </option>
            ))}
          </select>

          <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
            <label className="inline-flex items-center gap-2">
              <input
                type="checkbox"
                checked={valReq.normalizePhone}
                onChange={e =>
                  setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
                }
              />
              Normalize phone (E.164)
            </label>
            <label className="inline-flex items-center gap-2">
              <input
                type="checkbox"
                checked={valReq.checkDuplicates}
                onChange={e =>
                  setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
                }
              />
              Deduplicate by phone
            </label>
          </div>
        </div>

        <div className="rounded-lg border p-3">
          <div className="flex items-center justify-between">
            <h3 className="text-xs font-semibold text-gray-700">
              Mapping & Validation
            </h3>
            <span
              className={`rounded-full px-2 py-0.5 text-[11px] ${
                mappingStatus.ok
                  ? "bg-emerald-100 text-emerald-700"
                  : "bg-amber-100 text-amber-700"
              }`}
            >
              {mappingStatus.label}
            </span>
          </div>

          <button
            type="button"
            className="mt-2 text-xs text-indigo-600 hover:underline"
            onClick={() => setShowMapping(s => !s)}
            disabled={!(csvHeaders ?? []).length}
          >
            {showMapping ? "Hide mapping" : "Edit mapping"}
          </button>

          {showMapping && (
            <div className="mt-3 space-y-2">
              {/* Only show non-body keys here (headerparaN / buttonparaN) */}
              {visibleKeys.length === 0 ? (
                <p className="text-xs text-gray-500">No extra parameters.</p>
              ) : (
                visibleKeys.map(k => (
                  <div
                    key={k}
                    className="grid grid-cols-[160px,1fr] items-center gap-2"
                  >
                    <div className="text-[11px] text-gray-500">{k}</div>
                    <select
                      className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
                      value={keyToColumn[k] || ""}
                      onChange={e =>
                        setKeyToColumn(m => ({ ...m, [k]: e.target.value }))
                      }
                      disabled={!(csvHeaders ?? []).length}
                    >
                      <option value="">
                        {(csvHeaders ?? []).length
                          ? "-- Select column --"
                          : "Upload CSV"}
                      </option>
                      {(csvHeaders ?? []).map(h => (
                        <option key={h} value={h}>
                          {h}
                        </option>
                      ))}
                    </select>
                  </div>
                ))
              )}

              {/* Body placeholders ({{n}}) */}
              {paramMappings.length > 0 && (
                <div className="mt-4 border-t pt-3">
                  <div className="mb-2 text-xs font-semibold text-gray-700">
                    Body values ({"{{n}}"}) → CSV
                  </div>
                  <div className="space-y-2">
                    {paramMappings.map((m, i) => (
                      <div
                        key={m.index}
                        className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
                      >
                        <div className="text-xs text-gray-500">{`parameter${m.index}`}</div>
                        <select
                          className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
                          value={m.sourceType}
                          onChange={e =>
                            updateMapping(i, { sourceType: e.target.value })
                          }
                        >
                          <option value="csv">CSV column</option>
                          <option value="const">Constant</option>
                        </select>

                        {m.sourceType === "csv" ? (
                          <select
                            className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
                            value={m.sourceName || ""}
                            onChange={e =>
                              updateMapping(i, { sourceName: e.target.value })
                            }
                            disabled={!(csvHeaders ?? []).length}
                          >
                            <option value="">
                              {(csvHeaders ?? []).length
                                ? "-- Select column --"
                                : "Upload CSV"}
                            </option>
                            {(csvHeaders ?? []).map(h => (
                              <option key={h} value={h}>
                                {h}
                              </option>
                            ))}
                          </select>
                        ) : (
                          <input
                            className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
                            placeholder="Constant value"
                            value={m.constValue || ""}
                            onChange={e =>
                              updateMapping(i, { constValue: e.target.value })
                            }
                          />
                        )}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </div>

      {/* Sample table */}
      <div className="mt-4 overflow-x-auto rounded-lg border">
        <table className="min-w-full text-xs">
          <thead className="bg-gray-100 text-gray-700">
            <tr>
              {(sample?.headers ?? csvHeaders ?? []).map(h => (
                <th key={h} className="px-3 py-2 text-left">
                  {h}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
              sample.rows.map((row, idx) => (
                <tr key={idx} className="border-t">
                  {(sample?.headers ?? csvHeaders ?? []).map(h => (
                    <td key={h} className="px-3 py-1.5">
                      {row?.[h] ?? ""}
                    </td>
                  ))}
                </tr>
              ))
            ) : (
              <tr>
                <td
                  className="px-3 py-2 text-gray-400"
                  colSpan={(csvHeaders ?? []).length || 1}
                >
                  No rows yet
                </td>
              </tr>
            )}
          </tbody>
        </table>
      </div>

      {/* Actions */}
      <div className="mt-4 flex flex-wrap items-center gap-2">
        <button
          type="button"
          onClick={handleValidate}
          disabled={!batch?.batchId}
          className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
        >
          Validate
        </button>
        <button
          type="button"
          onClick={handleDryRun}
          disabled={!batch?.batchId}
          className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
        >
          (Preview) Dry-run materialize
        </button>
        <button
          type="button"
          onClick={handlePersist}
          disabled={!batch?.batchId || persisting || !audienceName?.trim()}
          className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
        >
          {persisting
            ? "Persisting…"
            : "Persist (create audience + recipients)"}
        </button>
      </div>

      {/* Validation result */}
      {valRes && (
        <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
          <div className="font-semibold">Validation</div>
          {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
            <ul className="mt-1 list-disc pl-5">
              {valRes.problems.map((p, i) => (
                <li key={i}>{p}</li>
              ))}
            </ul>
          ) : (
            <div className="mt-1 text-green-700">No problems found.</div>
          )}
        </div>
      )}

      {/* Dry-run preview */}
      {dryPreview && (
        <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
          <div className="font-semibold">Dry-run preview</div>
          <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
            {JSON.stringify(dryPreview, null, 2)}
          </pre>
        </div>
      )}
    </section>
  );
}

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// /* ---------------- Utilities ---------------- */

// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// const norm = s =>
//   String(s || "")
//     .toLowerCase()
//     .replace(/[\s._-]+/g, "")
//     .replace(/[^a-z0-9]/g, "");

// const PHONE_ALIASES = ["phone", "mobile", "whatsapp", "number", "phonee164"];

// // Canonical keys we want to map in CSV (beyond {{n}})
// // 👇 Header media is campaign-level now, so ONLY button URL params stay here.
// const CANONICAL_KEYS = [
//   "button1.url_param",
//   "button2.url_param",
//   "button3.url_param",
// ];

// // Aliases for canonical keys
// const ALIASES = {
//   "button1.url_param": ["btn1", "button1", "url1"],
//   "button2.url_param": ["btn2", "button2", "url2"],
//   "button3.url_param": ["btn3", "button3", "url3"],
// };

// // Auto-pick CSV columns for expected canonical keys.
// function autoPick(headers, wants, fallbackGreedyBody = false) {
//   const map = {};
//   const used = new Set();
//   const H = headers.map(h => ({ raw: h, k: norm(h) }));

//   // 1) exact (case-insensitive)
//   for (const key of wants) {
//     const hit = headers.find(h => h.toLowerCase() === key.toLowerCase());
//     if (hit) {
//       map[key] = hit;
//       used.add(hit);
//     }
//   }

//   // 2) alias match
//   for (const key of wants) {
//     if (map[key]) continue;
//     const aliases = ALIASES[key] || [];
//     const hit = H.find(
//       h => aliases.some(a => h.k === norm(a)) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 3) “paramN” / “body.N” convenience for body.* only
//   for (const key of wants) {
//     if (map[key]) continue;
//     const m = key.match(/^body\.(\d+)$/);
//     if (!m) continue;
//     const n = m[1];
//     const hit = H.find(
//       h => (h.k === `param${n}` || h.k === `body${n}`) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 4) greedy fill for remaining body.* only
//   if (fallbackGreedyBody) {
//     const remaining = headers.filter(h => !used.has(h));
//     for (const key of wants) {
//       if (!map[key] && key.startsWith("body.")) {
//         const pick = remaining.shift();
//         if (pick) {
//           map[key] = pick;
//           used.add(pick);
//         }
//       }
//     }
//   }

//   return map;
// }

// /* ---------------- Component ---------------- */

// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null);

//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   // Legacy {{n}} param UI (kept for now)
//   const [paramMappings, setParamMappings] = useState([]);
//   // New: canonical key -> CSV column mapping (buttons only)
//   const [expectedKeys, setExpectedKeys] = useState([]); // ['body.1', …, 'button1.url_param', …]
//   const [keyToColumn, setKeyToColumn] = useState({});

//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [audienceName, setAudienceName] = useState(() => {
//     const d = new Date();
//     const yyyy = d.getFullYear();
//     const mm = String(d.getMonth() + 1).padStart(2, "0");
//     const dd = String(d.getDate()).padStart(2, "0");
//     return `Audience ${yyyy}-${mm}-${dd}`;
//   });

//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   // Collapsible UX
//   const [showMapping, setShowMapping] = useState(false);

//   const topRef = useRef(null);

//   // Load schema and prime expected keys / {{n}} slots
//   useEffect(() => {
//     let alive = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!alive) return;
//         setSchema(sc);

//         // 1) Build expected keys from placeholderCount + any canonical keys present in schema.headers
//         const N = Number(sc?.placeholderCount || 0);
//         const bodyKeys = Array.from({ length: N }, (_, i) => `body.${i + 1}`);

//         const hdrs = Array.isArray(sc?.headers) ? sc.headers : [];
//         const extraKeys = CANONICAL_KEYS.filter(k =>
//           hdrs.some(h => h.toLowerCase() === k.toLowerCase())
//         );

//         const keys = [...bodyKeys, ...extraKeys];
//         setExpectedKeys(keys);

//         // 2) Init legacy {{n}} mapping slots
//         setParamMappings(
//           Array.from({ length: N }, (_, i) => ({
//             index: i + 1,
//             sourceType: "csv",
//             sourceName: "",
//             constValue: "",
//           }))
//         );
//       } catch {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (alive) setLoading(false);
//       }
//     })();
//     return () => {
//       alive = false;
//     };
//   }, [campaignId]);

//   // Available headers from sample/batch/schema
//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   // Update a single {{n}} mapping slot
//   const updateMapping = (idx, patch) =>
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idx] = { ...next[idx], ...patch };
//       return next;
//     });

//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   const handleFile = async f => {
//     if (!f) return;
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];

//       // Auto-pick phone column
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         PHONE_ALIASES.some(k => h.includes(k))
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       // Auto-map canonical keys (body + buttons)
//       const km = autoPick(hdrs, expectedKeys, /*fallbackGreedyBody*/ true);
//       setKeyToColumn(km);

//       // Also seed the legacy {{n}} list so current backend keeps working
//       setParamMappings(prev =>
//         prev.map(p => {
//           const key = `body.${p.index}`;
//           return km[key] ? { ...p, sourceName: km[key] } : p;
//         })
//       );

//       // Try server suggestions (optional; reconciled over auto map)
//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           // Expect items like { index: 1, sourceType: "csv"|"const", sourceName, constValue }
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* no-op */
//       }

//       // Keep UI minimal by default
//       setShowMapping(false);
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Build the mapping dictionary the backend expects.
//   // Keeps compatibility with your existing backend:
//   // - "{{n}}" => "CSV_COLUMN" | "constant:VALUE"
//   // - canonical keys (button*.url_param) => "CSV_COLUMN"
//   const buildMappingDict = () => {
//     const dict = {};

//     // Legacy body placeholders
//     for (const m of paramMappings) {
//       const key = `{{${m.index}}}`;
//       if (m.sourceType === "csv") {
//         dict[key] = m.sourceName || "";
//       } else {
//         dict[key] = `constant:${m.constValue ?? ""}`;
//       }
//     }

//     // Canonical keys passthrough (buttons only)
//     for (const [k, v] of Object.entries(keyToColumn || {})) {
//       if (!v) continue;
//       dict[k] = v; // column name
//     }

//     return dict;
//   };

//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");

//     try {
//       await saveMappings(campaignId, buildMappingDict()); // optional persistence

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: false, // preview only
//         audienceName: undefined,
//       };

//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!audienceName?.trim()) return toast.warn("Enter an audience name.");

//     setPersisting(true);
//     try {
//       await saveMappings(campaignId, buildMappingDict());

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: true,
//         audienceName: audienceName.trim(),
//       };

//       await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   // Mapping status chip (for the collapsed panel)
//   const mappingStatus = useMemo(() => {
//     if (!expectedKeys?.length) return { label: "No params", ok: true };
//     const missing = expectedKeys.filter(k => !keyToColumn[k]);
//     return missing.length
//       ? { label: `${missing.length} missing`, ok: false }
//       : { label: "All mapped", ok: true };
//   }, [expectedKeys, keyToColumn]);

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Audience name */}
//       <div className="mb-3">
//         <input
//           className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//           placeholder="Audience name (required to persist)"
//           value={audienceName}
//           onChange={e => setAudienceName(e.target.value)}
//         />
//       </div>

//       {/* Header row: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Helper note: header media is set at Campaign creation */}
//       <div className="mb-3 rounded-md border border-dashed border-gray-200 bg-gray-50 p-2 text-[11px] text-gray-600">
//         Header media URL (image/video/document) is configured once on the{" "}
//         <strong>Campaign</strong>. CSV should include only <code>phone</code>,
//         body placeholders (<code>{`{{n}}`}</code> → columns <code>body.n</code>)
//         and any dynamic button URL params (<code>button1.url_param</code>,{" "}
//         <code>button2.url_param</code>, <code>button3.url_param</code>).
//       </div>

//       {/* Phone + toggles and collapsible mapping */}
//       <div className="grid gap-3 md:grid-cols-2">
//         {/* Phone + toggles */}
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             <option value="">
//               {(csvHeaders ?? []).length
//                 ? "-- Select column --"
//                 : "Upload a CSV first"}
//             </option>
//             {(csvHeaders ?? []).map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         {/* Collapsible mapping & validation */}
//         <div className="rounded-lg border p-3">
//           <div className="flex items-center justify-between">
//             <h3 className="text-xs font-semibold text-gray-700">
//               Mapping & Validation
//             </h3>
//             <span
//               className={`rounded-full px-2 py-0.5 text-[11px] ${
//                 mappingStatus.ok
//                   ? "bg-emerald-100 text-emerald-700"
//                   : "bg-amber-100 text-amber-700"
//               }`}
//             >
//               {mappingStatus.label}
//             </span>
//           </div>

//           <button
//             type="button"
//             className="mt-2 text-xs text-indigo-600 hover:underline"
//             onClick={() => setShowMapping(s => !s)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             {showMapping ? "Hide mapping" : "Edit mapping"}
//           </button>

//           {showMapping && (
//             <div className="mt-3 space-y-2">
//               {/* Canonical keys (buttons) + body.* */}
//               {expectedKeys.length === 0 ? (
//                 <p className="text-xs text-gray-500">No parameters required.</p>
//               ) : (
//                 expectedKeys.map(k => (
//                   <div
//                     key={k}
//                     className="grid grid-cols-[160px,1fr] items-center gap-2"
//                   >
//                     <div className="text-[11px] text-gray-500">{k}</div>
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={keyToColumn[k] || ""}
//                       onChange={e =>
//                         setKeyToColumn(m => ({ ...m, [k]: e.target.value }))
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   </div>
//                 ))
//               )}

//               {/* Legacy {{n}} UI (kept for now) */}
//               {paramMappings.length > 0 && (
//                 <div className="mt-4 border-t pt-3">
//                   <div className="mb-2 text-xs font-semibold text-gray-700">
//                     Body placeholders (legacy)
//                   </div>
//                   <div className="space-y-2">
//                     {paramMappings.map((m, i) => (
//                       <div
//                         key={m.index}
//                         className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                       >
//                         <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                         <select
//                           className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                           value={m.sourceType}
//                           onChange={e =>
//                             updateMapping(i, { sourceType: e.target.value })
//                           }
//                         >
//                           <option value="csv">CSV column</option>
//                           <option value="const">Constant</option>
//                         </select>

//                         {m.sourceType === "csv" ? (
//                           <select
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             value={m.sourceName || ""}
//                             onChange={e =>
//                               updateMapping(i, { sourceName: e.target.value })
//                             }
//                             disabled={!(csvHeaders ?? []).length}
//                           >
//                             <option value="">
//                               {(csvHeaders ?? []).length
//                                 ? "-- Select column --"
//                                 : "Upload CSV"}
//                             </option>
//                             {(csvHeaders ?? []).map(h => (
//                               <option key={h} value={h}>
//                                 {h}
//                               </option>
//                             ))}
//                           </select>
//                         ) : (
//                           <input
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             placeholder="Constant value"
//                             value={m.constValue || ""}
//                             onChange={e =>
//                               updateMapping(i, { constValue: e.target.value })
//                             }
//                           />
//                         )}
//                       </div>
//                     ))}
//                   </div>
//                 </div>
//               )}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Preview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting || !audienceName?.trim()}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// /* ---------------- Utilities ---------------- */

// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// const norm = s =>
//   String(s || "")
//     .toLowerCase()
//     .replace(/[\s._-]+/g, "")
//     .replace(/[^a-z0-9]/g, "");

// const PHONE_ALIASES = ["phone", "mobile", "whatsapp", "number", "phonee164"];

// /**
//  * ONLY keep aliases for dynamic URL buttons.
//  * Media header URLs are CONSTANT (single field), so no header.*_url aliases here.
//  */
// const ALIASES = {
//   "button1.url_param": ["btn1", "button1", "url1"],
//   "button2.url_param": ["btn2", "button2", "url2"],
//   "button3.url_param": ["btn3", "button3", "url3"],
// };

// // Auto-pick CSV columns for expected keys (body.*, header.* (text), button*.url_param)
// function autoPick(headers, wants, fallbackGreedyBody = false) {
//   const map = {};
//   const used = new Set();
//   const H = headers.map(h => ({ raw: h, k: norm(h) }));

//   // 1) exact (case-insensitive)
//   for (const key of wants) {
//     const hit = headers.find(h => h.toLowerCase() === key.toLowerCase());
//     if (hit) {
//       map[key] = hit;
//       used.add(hit);
//     }
//   }

//   // 2) alias match (only for button*.url_param)
//   for (const key of wants) {
//     if (map[key]) continue;
//     const aliases = ALIASES[key] || [];
//     const hit = H.find(
//       h => aliases.some(a => h.k === norm(a)) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 3) “paramN” / “bodyN” convenience for body.*
//   for (const key of wants) {
//     if (map[key]) continue;
//     const m = key.match(/^body\.(\d+)$/);
//     if (!m) continue;
//     const n = m[1];
//     const hit = H.find(
//       h => (h.k === `param${n}` || h.k === `body${n}`) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 4) greedy fill for remaining body.* only
//   if (fallbackGreedyBody) {
//     const remaining = headers.filter(h => !used.has(h));
//     for (const key of wants) {
//       if (!map[key] && key.startsWith("body.")) {
//         const pick = remaining.shift();
//         if (pick) {
//           map[key] = pick;
//           used.add(pick);
//         }
//       }
//     }
//   }

//   return map;
// }

// /* ---------------- Component ---------------- */

// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);

//   // server schema
//   const [schema, setSchema] = useState(null); // { headers:[], placeholderCount, header:{type,needsUrl} }

//   // batch + preview
//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }

//   // phone & validation
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);
//   const [phoneHeader, setPhoneHeader] = useState("");

//   // legacy {{n}} mapping for BODY only (count = schema.placeholderCount)
//   const [paramMappings, setParamMappings] = useState([]);

//   // dynamic per-row mapping for keys in schema.headers
//   const [expectedKeys, setExpectedKeys] = useState([]); // exactly schema.headers from backend
//   const [keyToColumn, setKeyToColumn] = useState({});

//   // single constant header media URL (only when schema.header.needsUrl === true)
//   const [headerMediaUrl, setHeaderMediaUrl] = useState("");
//   const [headerMediaError, setHeaderMediaError] = useState("");

//   // audience persist
//   const [audienceName, setAudienceName] = useState(() => {
//     const d = new Date();
//     const yyyy = d.getFullYear();
//     const mm = String(d.getMonth() + 1).padStart(2, "0");
//     const dd = String(d.getDate()).padStart(2, "0");
//     return `Audience ${yyyy}-${mm}-${dd}`;
//   });
//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   // Collapsible UX
//   const [showMapping, setShowMapping] = useState(false);

//   const topRef = useRef(null);

//   /* ----------- helpers ----------- */

//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   const updateMapping = (idx, patch) =>
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idx] = { ...next[idx], ...patch };
//       return next;
//     });

//   // Strict-ish URL validation for header media by type
//   function validateHeaderUrl(url, type) {
//     if (!schema?.header?.needsUrl) return "";
//     if (!url?.trim()) return "Required";
//     try {
//       // just to ensure it's a URL
//       const u = new URL(url);
//       const path = (u.pathname || "").toLowerCase();

//       switch (type) {
//         case "video":
//           if (!path.endsWith(".mp4")) return "Video URL must end with .mp4";
//           break;
//         case "document":
//           // optional: restrict to pdf; relax if you allow general docs
//           if (!path.endsWith(".pdf")) return "Document URL must be a .pdf";
//           break;
//         case "image":
//           // common image extensions
//           if (
//             !(
//               path.endsWith(".jpg") ||
//               path.endsWith(".jpeg") ||
//               path.endsWith(".png") ||
//               path.endsWith(".webp")
//             )
//           ) {
//             return "Image URL should be .jpg/.jpeg/.png/.webp";
//           }
//           break;
//         default:
//           break;
//       }
//       return "";
//     } catch {
//       return "Invalid URL";
//     }
//   }

//   /* ----------- effects ----------- */

//   // Load schema and prime mapping state
//   useEffect(() => {
//     let alive = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!alive) return;

//         // sc = { headers, placeholderCount, header: { type, needsUrl } }
//         setSchema(sc);

//         // expected per-row keys are EXACTLY what backend returned
//         setExpectedKeys(Array.isArray(sc?.headers) ? sc.headers : []);

//         // init {{n}} slots only for BODY placeholders
//         const N = Number(sc?.placeholderCount || 0);
//         setParamMappings(
//           Array.from({ length: N }, (_, i) => ({
//             index: i + 1,
//             sourceType: "csv",
//             sourceName: "",
//             constValue: "",
//           }))
//         );

//         // reset header media URL field
//         setHeaderMediaUrl("");
//         setHeaderMediaError("");
//       } catch {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (alive) setLoading(false);
//       }
//     })();
//     return () => {
//       alive = false;
//     };
//   }, [campaignId]);

//   /* ----------- handlers ----------- */

//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   const handleFile = async f => {
//     if (!f) return;
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];

//       // Auto-pick phone column
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         PHONE_ALIASES.some(k => h.includes(k))
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       // Auto-map keys for body/header(text)/buttons
//       const km = autoPick(hdrs, expectedKeys, /*fallbackGreedyBody*/ true);
//       setKeyToColumn(km);

//       // Seed legacy {{n}} from auto pick (BODY only)
//       setParamMappings(prev =>
//         prev.map(p => {
//           const key = `body.${p.index}`;
//           return km[key] ? { ...p, sourceName: km[key] } : p;
//         })
//       );

//       // Try server suggestions (optional)
//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* no-op */
//       }

//       setShowMapping(false);
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     // header media URL guard (only when required)
//     if (schema?.header?.needsUrl) {
//       const err = validateHeaderUrl(headerMediaUrl, schema?.header?.type);
//       setHeaderMediaError(err);
//       if (err) return toast.warn(`Header media URL: ${err}`);
//     }

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Build the mapping dictionary the backend expects.
//   // - "{{n}}" => "CSV_COLUMN" | "constant:VALUE"
//   // - keys from expectedKeys (body.*, header.* (text), button*.url_param) => "CSV_COLUMN"
//   const buildMappingDict = () => {
//     const dict = {};

//     // BODY placeholders → legacy mapping
//     for (const m of paramMappings) {
//       const key = `{{${m.index}}}`;
//       if (m.sourceType === "csv") {
//         dict[key] = m.sourceName || "";
//       } else {
//         dict[key] = `constant:${m.constValue ?? ""}`;
//       }
//     }

//     // All other expected keys (header.* (text), button*.url_param)
//     for (const [k, v] of Object.entries(keyToColumn || {})) {
//       if (!v) continue;
//       dict[k] = v; // column name
//     }

//     return dict;
//   };

//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");

//     // header media URL guard (only when required)
//     if (schema?.header?.needsUrl) {
//       const err = validateHeaderUrl(headerMediaUrl, schema?.header?.type);
//       setHeaderMediaError(err);
//       if (err) return toast.warn(`Header media URL: ${err}`);
//     }

//     try {
//       await saveMappings(campaignId, buildMappingDict()); // optional persistence

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: false, // preview only
//         audienceName: undefined,

//         // NEW: single constant media for all recipients (backend will read this)
//         header: schema?.header?.needsUrl
//           ? { type: schema?.header?.type, mediaUrl: headerMediaUrl.trim() }
//           : { type: schema?.header?.type, mediaUrl: null },
//       };

//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//     } catch (e) {
//       toast.error(e?.message || "Dry-run failed.");
//     }
//   };

//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!audienceName?.trim()) return toast.warn("Enter an audience name.");

//     // header media URL guard (only when required)
//     if (schema?.header?.needsUrl) {
//       const err = validateHeaderUrl(headerMediaUrl, schema?.header?.type);
//       setHeaderMediaError(err);
//       if (err) return toast.warn(`Header media URL: ${err}`);
//     }

//     setPersisting(true);
//     try {
//       await saveMappings(campaignId, buildMappingDict());

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: true,
//         audienceName: audienceName.trim(),

//         // NEW: constant header media details
//         header: schema?.header?.needsUrl
//           ? { type: schema?.header?.type, mediaUrl: headerMediaUrl.trim() }
//           : { type: schema?.header?.type, mediaUrl: null },
//       };

//       await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//     } catch (e) {
//       toast.error(e?.message || "Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   // Mapping status chip (for the collapsed panel)
//   const mappingStatus = useMemo(() => {
//     if (!expectedKeys?.length) return { label: "No params", ok: true };
//     const missing = expectedKeys.filter(k => !keyToColumn[k]);
//     return missing.length
//       ? { label: `${missing.length} missing`, ok: false }
//       : { label: "All mapped", ok: true };
//   }, [expectedKeys, keyToColumn]);

//   /* ----------- render ----------- */

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   const headerInfo = schema?.header ?? { type: "none", needsUrl: false };
//   const showHeaderUrl = !!headerInfo.needsUrl;

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Audience name */}
//       <div className="mb-3">
//         <input
//           className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//           placeholder="Audience name (required to persist)"
//           value={audienceName}
//           onChange={e => setAudienceName(e.target.value)}
//         />
//       </div>

//       {/* Header row: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) && schema.headers.length > 0
//               ? schema.headers.join(", ")
//               : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles + (optional) constant header media */}
//       <div className="grid gap-3 md:grid-cols-2">
//         {/* Phone + toggles + header media */}
//         <div className="rounded-lg border p-3 space-y-3">
//           <div>
//             <h3 className="mb-2 text-xs font-semibold text-gray-700">
//               Phone column
//             </h3>
//             <select
//               className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//               value={phoneHeader}
//               onChange={e => setPhoneHeader(e.target.value)}
//               disabled={!(csvHeaders ?? []).length}
//             >
//               <option value="">
//                 {(csvHeaders ?? []).length
//                   ? "-- Select column --"
//                   : "Upload a CSV first"}
//               </option>
//               {(csvHeaders ?? []).map(h => (
//                 <option key={h} value={h}>
//                   {h}
//                 </option>
//               ))}
//             </select>
//           </div>

//           <div className="flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>

//           {showHeaderUrl && (
//             <div className="pt-2 border-t">
//               <div className="mb-1 text-xs font-semibold text-gray-700">
//                 Header media URL (constant for all)
//                 {headerInfo.type === "video" && (
//                   <span className="ml-1 text-[11px] text-gray-500">
//                     — must end with .mp4
//                   </span>
//                 )}
//                 {headerInfo.type === "document" && (
//                   <span className="ml-1 text-[11px] text-gray-500">
//                     — must be a .pdf
//                   </span>
//                 )}
//               </div>
//               <input
//                 className={`w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500 ${
//                   headerMediaError ? "border-red-400" : ""
//                 }`}
//                 placeholder={
//                   headerInfo.type === "video"
//                     ? "https://.../file.mp4"
//                     : headerInfo.type === "document"
//                     ? "https://.../file.pdf"
//                     : "https://.../image.jpg"
//                 }
//                 value={headerMediaUrl}
//                 onChange={e => {
//                   setHeaderMediaUrl(e.target.value);
//                   if (headerMediaError) {
//                     setHeaderMediaError(
//                       validateHeaderUrl(e.target.value, headerInfo.type)
//                     );
//                   }
//                 }}
//                 onBlur={e =>
//                   setHeaderMediaError(
//                     validateHeaderUrl(e.target.value, headerInfo.type)
//                   )
//                 }
//               />
//               {headerMediaError && (
//                 <div className="mt-1 text-[11px] text-red-600">
//                   {headerMediaError}
//                 </div>
//               )}
//             </div>
//           )}
//         </div>

//         {/* Collapsible mapping & validation */}
//         <div className="rounded-lg border p-3">
//           <div className="flex items-center justify-between">
//             <h3 className="text-xs font-semibold text-gray-700">
//               Mapping & Validation
//             </h3>
//             <span
//               className={`rounded-full px-2 py-0.5 text-[11px] ${
//                 mappingStatus.ok
//                   ? "bg-emerald-100 text-emerald-700"
//                   : "bg-amber-100 text-amber-700"
//               }`}
//             >
//               {mappingStatus.label}
//             </span>
//           </div>

//           <button
//             type="button"
//             className="mt-2 text-xs text-indigo-600 hover:underline"
//             onClick={() => setShowMapping(s => !s)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             {showMapping ? "Hide mapping" : "Edit mapping"}
//           </button>

//           {showMapping && (
//             <div className="mt-3 space-y-2">
//               {/* Expected per-row keys (from backend): body.*, header.* (text), button*.url_param */}
//               {expectedKeys.length === 0 ? (
//                 <p className="text-xs text-gray-500">No parameters required.</p>
//               ) : (
//                 expectedKeys.map(k => (
//                   <div
//                     key={k}
//                     className="grid grid-cols-[160px,1fr] items-center gap-2"
//                   >
//                     <div className="text-[11px] text-gray-500">{k}</div>
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={keyToColumn[k] || ""}
//                       onChange={e =>
//                         setKeyToColumn(m => ({ ...m, [k]: e.target.value }))
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   </div>
//                 ))
//               )}

//               {/* Legacy {{n}} UI (BODY only) */}
//               {paramMappings.length > 0 && (
//                 <div className="mt-4 border-t pt-3">
//                   <div className="mb-2 text-xs font-semibold text-gray-700">
//                     Body placeholders (legacy)
//                   </div>
//                   <div className="space-y-2">
//                     {paramMappings.map((m, i) => (
//                       <div
//                         key={m.index}
//                         className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                       >
//                         <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                         <select
//                           className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                           value={m.sourceType}
//                           onChange={e =>
//                             updateMapping(i, { sourceType: e.target.value })
//                           }
//                         >
//                           <option value="csv">CSV column</option>
//                           <option value="const">Constant</option>
//                         </select>

//                         {m.sourceType === "csv" ? (
//                           <select
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             value={m.sourceName || ""}
//                             onChange={e =>
//                               updateMapping(i, { sourceName: e.target.value })
//                             }
//                             disabled={!(csvHeaders ?? []).length}
//                           >
//                             <option value="">
//                               {(csvHeaders ?? []).length
//                                 ? "-- Select column --"
//                                 : "Upload CSV"}
//                             </option>
//                             {(csvHeaders ?? []).map(h => (
//                               <option key={h} value={h}>
//                                 {h}
//                               </option>
//                             ))}
//                           </select>
//                         ) : (
//                           <input
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             placeholder="Constant value"
//                             value={m.constValue || ""}
//                             onChange={e =>
//                               updateMapping(i, { constValue: e.target.value })
//                             }
//                           />
//                         )}
//                       </div>
//                     ))}
//                   </div>
//                 </div>
//               )}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Preview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting || !audienceName?.trim()}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// /* ---------------- Utilities ---------------- */

// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// const norm = s =>
//   String(s || "")
//     .toLowerCase()
//     .replace(/[\s._-]+/g, "")
//     .replace(/[^a-z0-9]/g, "");

// const PHONE_ALIASES = ["phone", "mobile", "whatsapp", "number", "phonee164"];

// // Canonical keys we want to map in CSV (beyond {{n}})
// const CANONICAL_KEYS = [
//   "header.image_url",
//   "header.video_url",
//   "header.document_url",
//   "button1.url_param",
//   "button2.url_param",
//   "button3.url_param",
// ];

// // Aliases for non-{{n}} canonical keys
// const ALIASES = {
//   "header.image_url": ["image", "imageurl", "headerimage"],
//   "header.video_url": ["video", "videourl", "headervideo"],
//   "header.document_url": ["document", "doc", "pdf", "documenturl", "pdfurl"],
//   "button1.url_param": ["btn1", "button1", "url1"],
//   "button2.url_param": ["btn2", "button2", "url2"],
//   "button3.url_param": ["btn3", "button3", "url3"],
// };

// // Auto-pick CSV columns for expected canonical keys.
// function autoPick(headers, wants, fallbackGreedyBody = false) {
//   const map = {};
//   const used = new Set();
//   const H = headers.map(h => ({ raw: h, k: norm(h) }));

//   // 1) exact (case-insensitive)
//   for (const key of wants) {
//     const hit = headers.find(h => h.toLowerCase() === key.toLowerCase());
//     if (hit) {
//       map[key] = hit;
//       used.add(hit);
//     }
//   }

//   // 2) alias match
//   for (const key of wants) {
//     if (map[key]) continue;
//     const aliases = ALIASES[key] || [];
//     const hit = H.find(
//       h => aliases.some(a => h.k === norm(a)) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 3) “paramN” / “body.N” convenience for body.*
//   for (const key of wants) {
//     if (map[key]) continue;
//     const m = key.match(/^body\.(\d+)$/);
//     if (!m) continue;
//     const n = m[1];
//     const hit = H.find(
//       h => (h.k === `param${n}` || h.k === `body${n}`) && !used.has(h.raw)
//     );
//     if (hit) {
//       map[key] = hit.raw;
//       used.add(hit.raw);
//     }
//   }

//   // 4) greedy fill for remaining body.* only
//   if (fallbackGreedyBody) {
//     const remaining = headers.filter(h => !used.has(h));
//     for (const key of wants) {
//       if (!map[key] && key.startsWith("body.")) {
//         const pick = remaining.shift();
//         if (pick) {
//           map[key] = pick;
//           used.add(pick);
//         }
//       }
//     }
//   }

//   return map;
// }

// /* ---------------- Component ---------------- */

// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null);

//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   // Legacy {{n}} param UI (kept for now)
//   const [paramMappings, setParamMappings] = useState([]);
//   // New: canonical key -> CSV column mapping (header/video/document/buttons)
//   const [expectedKeys, setExpectedKeys] = useState([]); // e.g. ['body.1','header.video_url','button1.url_param',...]
//   const [keyToColumn, setKeyToColumn] = useState({});

//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [audienceName, setAudienceName] = useState(() => {
//     const d = new Date();
//     const yyyy = d.getFullYear();
//     const mm = String(d.getMonth() + 1).padStart(2, "0");
//     const dd = String(d.getDate()).padStart(2, "0");
//     return `Audience ${yyyy}-${mm}-${dd}`;
//   });

//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   // Collapsible UX
//   const [showMapping, setShowMapping] = useState(false);

//   const topRef = useRef(null);

//   // Load schema and prime expected keys / {{n}} slots
//   useEffect(() => {
//     let alive = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!alive) return;
//         setSchema(sc);

//         // 1) Build expected keys from placeholderCount + any canonical keys present in schema.headers
//         const N = Number(sc?.placeholderCount || 0);
//         const bodyKeys = Array.from({ length: N }, (_, i) => `body.${i + 1}`);

//         const hdrs = Array.isArray(sc?.headers) ? sc.headers : [];
//         const extraKeys = CANONICAL_KEYS.filter(k => hdrs.includes(k));

//         const keys = [...bodyKeys, ...extraKeys];
//         setExpectedKeys(keys);

//         // 2) Init legacy {{n}} mapping slots
//         setParamMappings(
//           Array.from({ length: N }, (_, i) => ({
//             index: i + 1,
//             sourceType: "csv",
//             sourceName: "",
//             constValue: "",
//           }))
//         );
//       } catch {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (alive) setLoading(false);
//       }
//     })();
//     return () => {
//       alive = false;
//     };
//   }, [campaignId]);

//   // Available headers from sample/batch/schema
//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   // Update a single {{n}} mapping slot
//   const updateMapping = (idx, patch) =>
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idx] = { ...next[idx], ...patch };
//       return next;
//     });

//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   const handleFile = async f => {
//     if (!f) return;
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];

//       // Auto-pick phone column
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         PHONE_ALIASES.some(k => h.includes(k))
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       // Auto-map canonical keys (body/header/buttons)
//       const km = autoPick(hdrs, expectedKeys, /*fallbackGreedyBody*/ true);
//       setKeyToColumn(km);

//       // Also seed the legacy {{n}} list so current backend keeps working
//       setParamMappings(prev =>
//         prev.map(p => {
//           const key = `body.${p.index}`;
//           return km[key] ? { ...p, sourceName: km[key] } : p;
//         })
//       );

//       // Try server suggestions (optional; reconciled over auto map)
//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           // Expect items like { index: 1, sourceType: "csv"|"const", sourceName, constValue }
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* no-op */
//       }

//       // Keep UI minimal by default
//       setShowMapping(false);
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Build the mapping dictionary the backend expects.
//   // Keeps compatibility with your existing backend:
//   // - "{{n}}" => "CSV_COLUMN" | "constant:VALUE"
//   // - canonical keys (header.*, button*.url_param) => "CSV_COLUMN"
//   const buildMappingDict = () => {
//     const dict = {};

//     // Legacy body placeholders
//     for (const m of paramMappings) {
//       const key = `{{${m.index}}}`;
//       if (m.sourceType === "csv") {
//         dict[key] = m.sourceName || "";
//       } else {
//         dict[key] = `constant:${m.constValue ?? ""}`;
//       }
//     }

//     // Canonical keys passthrough
//     for (const [k, v] of Object.entries(keyToColumn || {})) {
//       if (!v) continue;
//       dict[k] = v; // column name
//     }

//     return dict;
//   };

//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");

//     try {
//       await saveMappings(campaignId, buildMappingDict()); // optional persistence

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: false, // preview only
//         audienceName: undefined,
//       };

//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!audienceName?.trim()) return toast.warn("Enter an audience name.");

//     setPersisting(true);
//     try {
//       await saveMappings(campaignId, buildMappingDict());

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: true,
//         audienceName: audienceName.trim(),
//       };

//       await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   // Mapping status chip (for the collapsed panel)
//   const mappingStatus = useMemo(() => {
//     if (!expectedKeys?.length) return { label: "No params", ok: true };
//     const missing = expectedKeys.filter(k => !keyToColumn[k]);
//     return missing.length
//       ? { label: `${missing.length} missing`, ok: false }
//       : { label: "All mapped", ok: true };
//   }, [expectedKeys, keyToColumn]);

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Audience name */}
//       <div className="mb-3">
//         <input
//           className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//           placeholder="Audience name (required to persist)"
//           value={audienceName}
//           onChange={e => setAudienceName(e.target.value)}
//         />
//       </div>

//       {/* Header row: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles and collapsible mapping */}
//       <div className="grid gap-3 md:grid-cols-2">
//         {/* Phone + toggles */}
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             <option value="">
//               {(csvHeaders ?? []).length
//                 ? "-- Select column --"
//                 : "Upload a CSV first"}
//             </option>
//             {(csvHeaders ?? []).map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         {/* Collapsible mapping & validation */}
//         <div className="rounded-lg border p-3">
//           <div className="flex items-center justify-between">
//             <h3 className="text-xs font-semibold text-gray-700">
//               Mapping & Validation
//             </h3>
//             <span
//               className={`rounded-full px-2 py-0.5 text-[11px] ${
//                 mappingStatus.ok
//                   ? "bg-emerald-100 text-emerald-700"
//                   : "bg-amber-100 text-amber-700"
//               }`}
//             >
//               {mappingStatus.label}
//             </span>
//           </div>

//           <button
//             type="button"
//             className="mt-2 text-xs text-indigo-600 hover:underline"
//             onClick={() => setShowMapping(s => !s)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             {showMapping ? "Hide mapping" : "Edit mapping"}
//           </button>

//           {showMapping && (
//             <div className="mt-3 space-y-2">
//               {/* Canonical keys (header/video/document/buttons) + body.* */}
//               {expectedKeys.length === 0 ? (
//                 <p className="text-xs text-gray-500">No parameters required.</p>
//               ) : (
//                 expectedKeys.map(k => (
//                   <div
//                     key={k}
//                     className="grid grid-cols-[160px,1fr] items-center gap-2"
//                   >
//                     <div className="text-[11px] text-gray-500">{k}</div>
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={keyToColumn[k] || ""}
//                       onChange={e =>
//                         setKeyToColumn(m => ({ ...m, [k]: e.target.value }))
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   </div>
//                 ))
//               )}

//               {/* Legacy {{n}} UI (kept for now) */}
//               {paramMappings.length > 0 && (
//                 <div className="mt-4 border-t pt-3">
//                   <div className="mb-2 text-xs font-semibold text-gray-700">
//                     Body placeholders (legacy)
//                   </div>
//                   <div className="space-y-2">
//                     {paramMappings.map((m, i) => (
//                       <div
//                         key={m.index}
//                         className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                       >
//                         <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                         <select
//                           className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                           value={m.sourceType}
//                           onChange={e =>
//                             updateMapping(i, { sourceType: e.target.value })
//                           }
//                         >
//                           <option value="csv">CSV column</option>
//                           <option value="const">Constant</option>
//                         </select>

//                         {m.sourceType === "csv" ? (
//                           <select
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             value={m.sourceName || ""}
//                             onChange={e =>
//                               updateMapping(i, { sourceName: e.target.value })
//                             }
//                             disabled={!(csvHeaders ?? []).length}
//                           >
//                             <option value="">
//                               {(csvHeaders ?? []).length
//                                 ? "-- Select column --"
//                                 : "Upload CSV"}
//                             </option>
//                             {(csvHeaders ?? []).map(h => (
//                               <option key={h} value={h}>
//                                 {h}
//                               </option>
//                             ))}
//                           </select>
//                         ) : (
//                           <input
//                             className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                             placeholder="Constant value"
//                             value={m.constValue || ""}
//                             onChange={e =>
//                               updateMapping(i, { constValue: e.target.value })
//                             }
//                           />
//                         )}
//                       </div>
//                     ))}
//                   </div>
//                 </div>
//               )}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Preview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting || !audienceName?.trim()}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null);

//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   const [paramMappings, setParamMappings] = useState([]);
//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [audienceName, setAudienceName] = useState(() => {
//     const d = new Date();
//     const yyyy = d.getFullYear();
//     const mm = String(d.getMonth() + 1).padStart(2, "0");
//     const dd = String(d.getDate()).padStart(2, "0");
//     return `Audience ${yyyy}-${mm}-${dd}`;
//   });

//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   const topRef = useRef(null);

//   useEffect(() => {
//     let alive = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!alive) return;
//         setSchema(sc);

//         const N = Number(sc?.placeholderCount || 0);
//         setParamMappings(
//           Array.from({ length: N }, (_, i) => ({
//             index: i + 1,
//             sourceType: "csv",
//             sourceName: "",
//             constValue: "",
//           }))
//         );
//       } catch {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (alive) setLoading(false);
//       }
//     })();
//     return () => {
//       alive = false;
//     };
//   }, [campaignId]);

//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   const updateMapping = (idx, patch) =>
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idx] = { ...next[idx], ...patch };
//       return next;
//     });

//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   const handleFile = async f => {
//     if (!f) return;
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         ["phone", "mobile", "whatsapp", "number", "phonee164"].some(k =>
//           h.includes(k)
//         )
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* optional */
//       }
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Dictionary the backend expects for mappings (eg { "{{1}}": "Nicolus", "{{2}}": "Email" }).
//   const buildMappingDict = () => {
//     const dict = {};
//     for (const m of paramMappings) {
//       const key = `{{${m.index}}}`;
//       if (m.sourceType === "csv") {
//         dict[key] = m.sourceName || "";
//       } else {
//         // IMPORTANT: backend expects "constant:" prefix
//         dict[key] = `constant:${m.constValue ?? ""}`;
//       }
//     }
//     return dict;
//   };
//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");

//     try {
//       await saveMappings(campaignId, buildMappingDict()); // optional

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: false, // <-- preview only
//         audienceName: undefined, // <-- not needed for preview
//       };

//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!audienceName?.trim()) return toast.warn("Enter an audience name.");

//     setPersisting(true);
//     try {
//       await saveMappings(campaignId, buildMappingDict()); // optional

//       const body = {
//         csvBatchId: batch.batchId,
//         mappings: buildMappingDict(),
//         phoneField: phoneHeader || undefined,
//         normalizePhones: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         persist: true, // <-- REQUIRED
//         audienceName: audienceName.trim(),
//       };

//       const result = await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//       // result.audienceId will be set on success
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Audience name */}
//       <div className="mb-3">
//         <input
//           className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//           placeholder="Audience name (required to persist)"
//           value={audienceName}
//           onChange={e => setAudienceName(e.target.value)}
//         />
//       </div>

//       {/* Header row: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles and parameter mapping */}
//       <div className="grid gap-3 md:grid-cols-2">
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             <option value="">
//               {(csvHeaders ?? []).length
//                 ? "-- Select column --"
//                 : "Upload a CSV first"}
//             </option>
//             {(csvHeaders ?? []).map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Template parameters
//           </h3>
//           {paramMappings.length === 0 ? (
//             <p className="text-sm text-gray-500">
//               No parameters required for this template.
//             </p>
//           ) : (
//             <div className="space-y-2">
//               {paramMappings.map((m, i) => (
//                 <div
//                   key={m.index}
//                   className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                 >
//                   <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                   <select
//                     className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                     value={m.sourceType}
//                     onChange={e =>
//                       updateMapping(i, { sourceType: e.target.value })
//                     }
//                   >
//                     <option value="csv">CSV column</option>
//                     <option value="const">Constant</option>
//                   </select>

//                   {m.sourceType === "csv" ? (
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={m.sourceName || ""}
//                       onChange={e =>
//                         updateMapping(i, { sourceName: e.target.value })
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   ) : (
//                     <input
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       placeholder="Constant value"
//                       value={m.constValue || ""}
//                       onChange={e =>
//                         updateMapping(i, { constValue: e.target.value })
//                       }
//                     />
//                   )}
//                 </div>
//               ))}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Preview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting || !audienceName?.trim()}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// // Small helper to download a Blob as a file
// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// /**
//  * CsvAudienceSection
//  * Drives the end-to-end bulk personalization flow for a campaign.
//  */
// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null); // { headers, placeholderCount, parameterNames? }

//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   // { index:1, sourceType:"csv"|"const", sourceName:"", constValue:"" }
//   const [paramMappings, setParamMappings] = useState([]);
//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   const topRef = useRef(null);

//   // Load schema
//   useEffect(() => {
//     let isMounted = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!isMounted) return;
//         setSchema(sc);

//         const N = Number(sc?.placeholderCount || 0);
//         const initial = Array.from({ length: N }, (_, i) => ({
//           index: i + 1,
//           sourceType: "csv",
//           sourceName: "",
//           constValue: "",
//         }));
//         setParamMappings(initial);
//       } catch {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (isMounted) setLoading(false);
//       }
//     })();
//     return () => {
//       isMounted = false;
//     };
//   }, [campaignId]);

//   // Prefer most concrete headers: sample.headers -> batch.headerJson -> schema.headers
//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   // Update mapping helper
//   const updateMapping = (idxZero, patch) => {
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idxZero] = { ...next[idxZero], ...patch };
//       return next;
//     });
//   };

//   // Download one-line sample (server builds correct headers)
//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   // Upload CSV -> create CsvBatch -> load first rows -> try mapping suggestions
//   const handleFile = async f => {
//     if (!f) return;
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       // Guess phone column by common names (guard headers)
//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         ["phone", "mobile", "whatsapp", "number", "phonee164"].some(k =>
//           h.includes(k)
//         )
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       // Optional: backend suggestions to pre-fill param mappings
//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* suggestions are optional */
//       }
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   // Validate phones & duplicates
//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // ---- NEW: build backend-friendly dictionary for mappings ----
//   // /mappings endpoint expects Dictionary<string,string> like:
//   // { "{{1}}": "Nicolus", "{{2}}": "Email" }
//   // For constants, we encode as "const:<value>" so backend can distinguish.
//   const buildMappingDict = () => {
//     const dict = {};
//     for (const m of paramMappings) {
//       const key = `{{${m.index}}}`;
//       if (m.sourceType === "csv") {
//         dict[key] = m.sourceName || "";
//       } else {
//         dict[key] = `const:${m.constValue ?? ""}`;
//       }
//     }
//     return dict;
//   };

//   // Dry-run (no DB writes)
//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       // Persist mapping config (Dictionary<string,string>)
//       await saveMappings(campaignId, buildMappingDict());

//       const body = {
//         mode: "dryRun",
//         //batchId: batch.batchId,
//         csvBatchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         // Use the same dictionary shape for materialize
//         mappings: buildMappingDict(),
//       };
//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//       topRef.current?.scrollIntoView({ behavior: "smooth" });
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   // Commit (creates Audience + AudienceMembers + CampaignRecipients)
//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     setPersisting(true);
//     try {
//       // Keep mappings in sync
//       await saveMappings(campaignId, buildMappingDict());

//       const body = {
//         mode: "commit",
//         csvBatchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         mappings: buildMappingDict(),
//       };
//       await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Header: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles */}
//       <div className="grid gap-3 md:grid-cols-2">
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             <option value="">
//               {(csvHeaders ?? []).length
//                 ? "-- Select column --"
//                 : "Upload a CSV first"}
//             </option>
//             {(csvHeaders ?? []).map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         {/* Param mappings */}
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Template parameters
//           </h3>
//           {paramMappings.length === 0 ? (
//             <p className="text-sm text-gray-500">
//               No parameters required for this template.
//             </p>
//           ) : (
//             <div className="space-y-2">
//               {paramMappings.map((m, i) => (
//                 <div
//                   key={m.index}
//                   className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                 >
//                   <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                   <select
//                     className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                     value={m.sourceType}
//                     onChange={e =>
//                       updateMapping(i, { sourceType: e.target.value })
//                     }
//                   >
//                     <option value="csv">CSV column</option>
//                     <option value="const">Constant</option>
//                   </select>

//                   {m.sourceType === "csv" ? (
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={m.sourceName || ""}
//                       onChange={e =>
//                         updateMapping(i, { sourceName: e.target.value })
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   ) : (
//                     <input
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       placeholder="Constant value"
//                       value={m.constValue || ""}
//                       onChange={e =>
//                         updateMapping(i, { constValue: e.target.value })
//                       }
//                     />
//                   )}
//                 </div>
//               ))}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//         </table>

//         {/* simple body for preview */}
//         <table className="min-w-full text-xs">
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Preview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// // Small helper to download a Blob as a file
// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// /**
//  * CsvAudienceSection
//  * Drives the end-to-end bulk personalization flow for a campaign.
//  */
// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null); // { headers, placeholderCount, parameterNames? }

//   const [file, setFile] = useState(null);
//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   // { index:1, sourceType:"csv"|"const", sourceName:"", constValue:"" }
//   const [paramMappings, setParamMappings] = useState([]);
//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   const topRef = useRef(null);

//   // Load schema
//   useEffect(() => {
//     let isMounted = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!isMounted) return;
//         setSchema(sc);

//         const N = Number(sc?.placeholderCount || 0);
//         const initial = Array.from({ length: N }, (_, i) => ({
//           index: i + 1,
//           sourceType: "csv",
//           sourceName: "",
//           constValue: "",
//         }));
//         setParamMappings(initial);
//       } catch (e) {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (isMounted) setLoading(false);
//       }
//     })();
//     return () => {
//       isMounted = false;
//     };
//   }, [campaignId]);

//   // Prefer most concrete headers: sample.headers -> batch.headerJson -> schema.headers
//   const csvHeaders = useMemo(
//     () => sample?.headers ?? batch?.headerJson ?? schema?.headers ?? [],
//     [schema, batch, sample]
//   );

//   // Update mapping helper
//   const updateMapping = (idxZero, patch) => {
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idxZero] = { ...next[idxZero], ...patch };
//       return next;
//     });
//   };

//   // Download one-line sample (server builds correct headers)
//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   // Upload CSV -> create CsvBatch -> load first rows -> try mapping suggestions
//   const handleFile = async f => {
//     if (!f) return;
//     setFile(f);
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up?.batchId, 10);
//       setSample(s);

//       // Guess phone column by common names (guard headers)
//       const hdrs = Array.isArray(s?.headers) ? s.headers : [];
//       const lower = hdrs.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         ["phone", "mobile", "whatsapp", "number", "phonee164"].some(k =>
//           h.includes(k)
//         )
//       );
//       setPhoneHeader(guessIdx >= 0 ? hdrs[guessIdx] : "");

//       // Optional: backend suggestions to pre-fill param mappings
//       try {
//         const sugg = await suggestMappings(campaignId, up?.batchId);
//         if (Array.isArray(sugg?.items)) {
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         /* suggestions are optional */
//       }
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   // Validate phones & duplicates
//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Build DTO we send to saveMappings/materialize
//   const buildMappingsDto = () => ({
//     items: paramMappings.map(m => ({
//       component: "param",
//       index: m.index,
//       sourceType: m.sourceType,
//       sourceName: m.sourceType === "csv" ? m.sourceName || null : null,
//       constValue: m.sourceType === "const" ? m.constValue ?? "" : null,
//     })),
//   });

//   // Dry-run (no DB writes)
//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       await saveMappings(campaignId, buildMappingsDto());

//       const body = {
//         mode: "dryRun",
//         batchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         mappings: buildMappingsDto().items,
//       };
//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//       topRef.current?.scrollIntoView({ behavior: "smooth" });
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   // Commit (creates Audience + AudienceMembers + CampaignRecipients)
//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     setPersisting(true);
//     try {
//       const body = {
//         mode: "commit",
//         batchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         mappings: buildMappingsDto().items,
//       };
//       await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Header: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles */}
//       <div className="grid gap-3 md:grid-cols-2">
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!(csvHeaders ?? []).length}
//           >
//             <option value="">
//               {(csvHeaders ?? []).length
//                 ? "-- Select column --"
//                 : "Upload a CSV first"}
//             </option>
//             {(csvHeaders ?? []).map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         {/* Param mappings */}
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Template parameters
//           </h3>
//           {paramMappings.length === 0 ? (
//             <p className="text-sm text-gray-500">
//               No parameters required for this template.
//             </p>
//           ) : (
//             <div className="space-y-2">
//               {paramMappings.map((m, i) => (
//                 <div
//                   key={m.index}
//                   className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                 >
//                   <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                   <select
//                     className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                     value={m.sourceType}
//                     onChange={e =>
//                       updateMapping(i, { sourceType: e.target.value })
//                     }
//                   >
//                     <option value="csv">CSV column</option>
//                     <option value="const">Constant</option>
//                   </select>

//                   {m.sourceType === "csv" ? (
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={m.sourceName || ""}
//                       onChange={e =>
//                         updateMapping(i, { sourceName: e.target.value })
//                       }
//                       disabled={!(csvHeaders ?? []).length}
//                     >
//                       <option value="">
//                         {(csvHeaders ?? []).length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {(csvHeaders ?? []).map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   ) : (
//                     <input
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       placeholder="Constant value"
//                       value={m.constValue || ""}
//                       onChange={e =>
//                         updateMapping(i, { constValue: e.target.value })
//                       }
//                     />
//                   )}
//                 </div>
//               ))}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample?.headers ?? csvHeaders ?? []).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row?.[h] ?? ""}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders ?? []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           (Perview) Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }

// // src/pages/Campaigns/components/CsvAudienceSection.jsx
// import React, { useEffect, useMemo, useRef, useState } from "react";
// import { toast } from "react-toastify";
// import {
//   fetchCsvSchema,
//   downloadCsvSampleBlob,
//   uploadCsvBatch,
//   getBatchSample,
//   validateBatch,
//   suggestMappings,
//   saveMappings,
//   materialize,
// } from "../api/csvApi";

// // Small helper to download a Blob as a file
// function saveBlob(blob, filename) {
//   const url = window.URL.createObjectURL(blob);
//   const a = document.createElement("a");
//   a.href = url;
//   a.download = filename;
//   a.click();
//   window.URL.revokeObjectURL(url);
// }

// /**
//  * CsvAudienceSection
//  * Drives the end-to-end bulk personalization flow for a campaign:
//  * 1) GET /campaigns/{id}/csv-sample/schema   -> learn required headers + param count
//  * 2) Download sample (optional)
//  * 3) Upload CSV (multipart)                   -> POST /csv/batch
//  * 4) Preview first rows                       -> GET /csv/batch/{batchId}/sample
//  * 5) Map phone + params (CSV column or constant)
//  * 6) Validate                                 -> POST /csv/batch/{batchId}/validate
//  * 7) Dry-run                                  -> POST /campaigns/{id}/materialize { mode: "dryRun" }
//  * 8) Persist                                  -> POST /campaigns/{id}/materialize { mode: "commit" }
//  */
// export default function CsvAudienceSection({ campaignId }) {
//   const [loading, setLoading] = useState(true);
//   const [schema, setSchema] = useState(null); // { headers, placeholderCount, parameterNames? }

//   const [file, setFile] = useState(null);
//   const [batch, setBatch] = useState(null); // { batchId, headerJson, ... }
//   const [sample, setSample] = useState(null); // { headers, rows }
//   const [valReq, setValReq] = useState({
//     normalizePhone: true,
//     checkDuplicates: true,
//   });
//   const [valRes, setValRes] = useState(null);

//   // For each template param {{1}}..{{N}}:
//   // { index:1, sourceType:"csv"|"const", sourceName:"", constValue:"" }
//   const [paramMappings, setParamMappings] = useState([]);
//   const [phoneHeader, setPhoneHeader] = useState("");
//   const [dryPreview, setDryPreview] = useState(null);
//   const [persisting, setPersisting] = useState(false);

//   const topRef = useRef(null);

//   // Load schema (single source of truth for how many params are needed)
//   useEffect(() => {
//     let isMounted = true;
//     (async () => {
//       try {
//         setLoading(true);
//         const sc = await fetchCsvSchema(campaignId);
//         if (!isMounted) return;
//         setSchema(sc);

//         const N = Number(sc?.placeholderCount || 0);
//         const initial = Array.from({ length: N }, (_, i) => ({
//           index: i + 1,
//           sourceType: "csv",
//           sourceName: "",
//           constValue: "",
//         }));
//         setParamMappings(initial);
//       } catch (e) {
//         toast.error("Failed to load CSV schema.");
//       } finally {
//         if (isMounted) setLoading(false);
//       }
//     })();
//     return () => {
//       isMounted = false;
//     };
//   }, [campaignId]);

//   // Prefer most concrete headers: sample.headers -> batch.headerJson -> schema.headers
//   const csvHeaders = useMemo(
//     () => sample?.headers || batch?.headerJson || schema?.headers || [],
//     [schema, batch, sample]
//   );

//   // Update mapping helper
//   const updateMapping = (idxZero, patch) => {
//     setParamMappings(prev => {
//       const next = [...prev];
//       next[idxZero] = { ...next[idxZero], ...patch };
//       return next;
//     });
//   };

//   // Download one-line sample (server builds correct headers)
//   const handleDownloadSample = async () => {
//     try {
//       const blob = await downloadCsvSampleBlob(campaignId);
//       saveBlob(blob, `campaign-${campaignId}-sample.csv`);
//     } catch {
//       toast.error("Could not download sample CSV.");
//     }
//   };

//   // Upload CSV -> create CsvBatch -> load first rows -> try mapping suggestions
//   const handleFile = async f => {
//     if (!f) return;
//     setFile(f);
//     try {
//       const up = await uploadCsvBatch(f, null);
//       setBatch(up);
//       toast.success("CSV uploaded.");

//       const s = await getBatchSample(up.batchId, 10);
//       setSample(s);

//       // Guess phone column by common names
//       const lower = s.headers.map(h => String(h).toLowerCase());
//       const guessIdx = lower.findIndex(h =>
//         ["phone", "mobile", "whatsapp", "number", "phonee164"].some(k =>
//           h.includes(k)
//         )
//       );
//       setPhoneHeader(guessIdx >= 0 ? s.headers[guessIdx] : "");

//       // Optional: backend suggestions to pre-fill param mappings
//       try {
//         const sugg = await suggestMappings(campaignId, up.batchId);
//         if (Array.isArray(sugg?.items)) {
//           setParamMappings(prev =>
//             prev.map(p => {
//               const m = sugg.items.find(x => x.index === p.index);
//               return m ? { ...p, ...m } : p;
//             })
//           );
//         }
//       } catch {
//         // suggestions are optional
//       }
//     } catch (e) {
//       toast.error(e?.message || "CSV upload failed.");
//     }
//   };

//   // Validate phones & duplicates
//   const handleValidate = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       const req = {
//         phoneHeader,
//         requiredHeaders: [], // params may be constants; we don't force CSV headers
//         normalizePhone: !!valReq.normalizePhone,
//         checkDuplicates: !!valReq.checkDuplicates,
//       };
//       const res = await validateBatch(batch.batchId, req);
//       setValRes(res);
//       if (Array.isArray(res?.problems) && res.problems.length > 0) {
//         toast.warn(`Validation found ${res.problems.length} issue(s).`);
//       } else {
//         toast.success("Validation passed.");
//       }
//     } catch {
//       toast.error("Validation call failed.");
//     }
//   };

//   // Build DTO we send to saveMappings/materialize
//   const buildMappingsDto = () => ({
//     items: paramMappings.map(m => ({
//       component: "param",
//       index: m.index,
//       sourceType: m.sourceType,
//       sourceName: m.sourceType === "csv" ? m.sourceName || null : null,
//       constValue: m.sourceType === "const" ? m.constValue ?? "" : null,
//     })),
//   });

//   // Dry-run (no DB writes)
//   const handleDryRun = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     if (!phoneHeader) return toast.warn("Choose the phone column.");

//     try {
//       // Keep backend in sync with what user chose
//       await saveMappings(campaignId, buildMappingsDto());

//       const body = {
//         mode: "dryRun",
//         batchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         mappings: buildMappingsDto().items, // sent inline as well
//       };
//       const preview = await materialize(campaignId, body);
//       setDryPreview(preview);
//       toast.success("Dry-run ready.");
//       topRef.current?.scrollIntoView({ behavior: "smooth" });
//     } catch {
//       toast.error("Dry-run failed.");
//     }
//   };

//   // Commit (creates Audience + AudienceMembers + CampaignRecipients)
//   const handlePersist = async () => {
//     if (!batch?.batchId) return toast.warn("Upload a CSV first.");
//     setPersisting(true);
//     try {
//       const body = {
//         mode: "commit",
//         batchId: batch.batchId,
//         normalizePhone: !!valReq.normalizePhone,
//         deduplicate: !!valReq.checkDuplicates,
//         phoneHeader,
//         mappings: buildMappingsDto().items,
//       };
//       const result = await materialize(campaignId, body);
//       toast.success("Audience created and recipients materialized.");
//       // You can surface counts from `result` if your API returns them
//       // console.log(result);
//     } catch {
//       toast.error("Persist failed.");
//     } finally {
//       setPersisting(false);
//     }
//   };

//   if (loading) {
//     return (
//       <div className="rounded-lg border bg-white p-4 text-sm text-gray-500">
//         Loading CSV schema…
//       </div>
//     );
//   }

//   return (
//     <section ref={topRef} className="rounded-xl border bg-white p-4 shadow-sm">
//       <h2 className="mb-3 text-sm font-semibold text-gray-800">
//         Audience via CSV
//       </h2>

//       {/* Header: expected columns + actions */}
//       <div className="mb-4 flex flex-wrap items-center gap-3 text-sm">
//         <div className="text-gray-600">
//           Expected columns:&nbsp;
//           <code className="rounded bg-gray-100 px-1.5 py-0.5">
//             {Array.isArray(schema?.headers) ? schema.headers.join(", ") : "—"}
//           </code>
//         </div>
//         <button
//           type="button"
//           onClick={handleDownloadSample}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700"
//         >
//           Download sample CSV
//         </button>
//         <label className="ml-auto cursor-pointer text-indigo-600 hover:underline">
//           Upload CSV
//           <input
//             type="file"
//             accept=".csv"
//             onChange={e => handleFile(e.target.files?.[0])}
//             className="hidden"
//           />
//         </label>
//       </div>

//       {/* Phone + toggles */}
//       <div className="grid gap-3 md:grid-cols-2">
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Phone column
//           </h3>
//           <select
//             className="w-full rounded-lg border px-3 py-2 text-sm outline-none focus:border-purple-500"
//             value={phoneHeader}
//             onChange={e => setPhoneHeader(e.target.value)}
//             disabled={!csvHeaders.length}
//           >
//             <option value="">
//               {csvHeaders.length ? "-- Select column --" : "Upload a CSV first"}
//             </option>
//             {csvHeaders.map(h => (
//               <option key={h} value={h}>
//                 {h}
//               </option>
//             ))}
//           </select>

//           <div className="mt-3 flex items-center gap-4 text-xs text-gray-700">
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.normalizePhone}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, normalizePhone: e.target.checked }))
//                 }
//               />
//               Normalize phone (E.164)
//             </label>
//             <label className="inline-flex items-center gap-2">
//               <input
//                 type="checkbox"
//                 checked={valReq.checkDuplicates}
//                 onChange={e =>
//                   setValReq(v => ({ ...v, checkDuplicates: e.target.checked }))
//                 }
//               />
//               Deduplicate by phone
//             </label>
//           </div>
//         </div>

//         {/* Param mappings */}
//         <div className="rounded-lg border p-3">
//           <h3 className="mb-2 text-xs font-semibold text-gray-700">
//             Template parameters
//           </h3>
//           {paramMappings.length === 0 ? (
//             <p className="text-sm text-gray-500">
//               No parameters required for this template.
//             </p>
//           ) : (
//             <div className="space-y-2">
//               {paramMappings.map((m, i) => (
//                 <div
//                   key={m.index}
//                   className="grid grid-cols-[80px,100px,1fr] items-center gap-2"
//                 >
//                   <div className="text-xs text-gray-500">{`{{${m.index}}}`}</div>
//                   <select
//                     className="rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                     value={m.sourceType}
//                     onChange={e =>
//                       updateMapping(i, { sourceType: e.target.value })
//                     }
//                   >
//                     <option value="csv">CSV column</option>
//                     <option value="const">Constant</option>
//                   </select>

//                   {m.sourceType === "csv" ? (
//                     <select
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       value={m.sourceName || ""}
//                       onChange={e =>
//                         updateMapping(i, { sourceName: e.target.value })
//                       }
//                       disabled={!csvHeaders.length}
//                     >
//                       <option value="">
//                         {csvHeaders.length
//                           ? "-- Select column --"
//                           : "Upload CSV"}
//                       </option>
//                       {csvHeaders.map(h => (
//                         <option key={h} value={h}>
//                           {h}
//                         </option>
//                       ))}
//                     </select>
//                   ) : (
//                     <input
//                       className="w-full rounded-lg border px-2 py-1.5 text-xs outline-none focus:border-purple-500"
//                       placeholder="Constant value"
//                       value={m.constValue || ""}
//                       onChange={e =>
//                         updateMapping(i, { constValue: e.target.value })
//                       }
//                     />
//                   )}
//                 </div>
//               ))}
//             </div>
//           )}
//         </div>
//       </div>

//       {/* Sample table */}
//       <div className="mt-4 overflow-x-auto rounded-lg border">
//         <table className="min-w-full text-xs">
//           <thead className="bg-gray-100 text-gray-700">
//             <tr>
//               {(sample?.headers || csvHeaders).map(h => (
//                 <th key={h} className="px-3 py-2 text-left">
//                   {h}
//                 </th>
//               ))}
//             </tr>
//           </thead>
//           <tbody>
//             {Array.isArray(sample?.rows) && sample.rows.length > 0 ? (
//               sample.rows.map((row, idx) => (
//                 <tr key={idx} className="border-t">
//                   {(sample.headers || csvHeaders).map(h => (
//                     <td key={h} className="px-3 py-1.5">
//                       {row[h]}
//                     </td>
//                   ))}
//                 </tr>
//               ))
//             ) : (
//               <tr>
//                 <td
//                   className="px-3 py-2 text-gray-400"
//                   colSpan={(csvHeaders || []).length || 1}
//                 >
//                   No rows yet
//                 </td>
//               </tr>
//             )}
//           </tbody>
//         </table>
//       </div>

//       {/* Actions */}
//       <div className="mt-4 flex flex-wrap items-center gap-2">
//         <button
//           type="button"
//           onClick={handleValidate}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-gray-700 px-3 py-1.5 text-xs font-semibold text-white hover:bg-gray-800 disabled:opacity-50"
//         >
//           Validate
//         </button>
//         <button
//           type="button"
//           onClick={handleDryRun}
//           disabled={!batch?.batchId}
//           className="rounded-md bg-indigo-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-indigo-700 disabled:opacity-50"
//         >
//           Dry-run materialize
//         </button>
//         <button
//           type="button"
//           onClick={handlePersist}
//           disabled={!batch?.batchId || persisting}
//           className="rounded-md bg-green-600 px-3 py-1.5 text-xs font-semibold text-white hover:bg-green-700 disabled:opacity-50"
//         >
//           {persisting
//             ? "Persisting…"
//             : "Persist (create audience + recipients)"}
//         </button>
//       </div>

//       {/* Validation result */}
//       {valRes && (
//         <div className="mt-3 rounded-lg border border-amber-200 bg-amber-50 p-3 text-xs text-amber-900">
//           <div className="font-semibold">Validation</div>
//           {Array.isArray(valRes.problems) && valRes.problems.length > 0 ? (
//             <ul className="mt-1 list-disc pl-5">
//               {valRes.problems.map((p, i) => (
//                 <li key={i}>{p}</li>
//               ))}
//             </ul>
//           ) : (
//             <div className="mt-1 text-green-700">No problems found.</div>
//           )}
//         </div>
//       )}

//       {/* Dry-run preview (render raw JSON to stay service-agnostic) */}
//       {dryPreview && (
//         <div className="mt-3 rounded-lg border border-sky-200 bg-sky-50 p-3 text-xs text-sky-900">
//           <div className="font-semibold">Dry-run preview</div>
//           <pre className="mt-1 overflow-x-auto rounded bg-white p-2 text-[11px] text-gray-800">
//             {JSON.stringify(dryPreview, null, 2)}
//           </pre>
//         </div>
//       )}
//     </section>
//   );
// }
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\ExistingContactsList.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import { toast } from "react-toastify";
import axiosClient from "../../../api/axiosClient";
import TagFilterDropdown from "./TagFilterDropdown";

export default function ExistingContactsList({
  contacts,
  setContacts,
  selectedIds,
  setSelectedIds,
}) {
  const [filteredContacts, setFilteredContacts] = useState([]);
  const [search, setSearch] = useState("");
  const [filterTags, setFilterTags] = useState([]);

  useEffect(() => {
    const loadContacts = async () => {
      try {
        const res =
          filterTags.length > 0
            ? await axiosClient.post("/contacts/filter-by-tags", {
                tagIds: filterTags,
              })
            : await axiosClient.get("/contacts/all");
        setContacts(res.data?.data || []);
      } catch {
        toast.error("Failed to load contacts");
      }
    };
    loadContacts();
  }, [filterTags, setContacts]);

  useEffect(() => {
    const result = contacts.filter(
      c =>
        c.name?.toLowerCase().includes(search.toLowerCase()) ||
        (c.phoneNumber || c.phone || "").includes(search)
    );
    setFilteredContacts(result);
  }, [contacts, search]);

  const toggleContact = id => {
    setSelectedIds(prev =>
      prev.includes(id) ? prev.filter(x => x !== id) : [...prev, id]
    );
  };

  return (
    <div>
      <div className="flex flex-col sm:flex-row gap-4 mb-4">
        <input
          className="border p-2 rounded-md w-full sm:w-1/3"
          type="text"
          placeholder="Search by name or phone..."
          value={search}
          onChange={e => setSearch(e.target.value)}
        />
        <TagFilterDropdown
          selectedTags={filterTags}
          onChange={setFilterTags}
          category="All"
        />
      </div>

      <div className="bg-white rounded-xl shadow-sm overflow-x-auto">
        <table className="min-w-full text-sm">
          {/* ... Your Table Head JSX ... */}
          <tbody>
            {filteredContacts.map(contact => (
              <tr key={contact.id} className="border-t hover:bg-gray-50">
                <td className="px-4 py-2 text-center">
                  <input
                    type="checkbox"
                    checked={selectedIds.includes(contact.id)}
                    onChange={() => toggleContact(contact.id)}
                  />
                </td>
                <td className="px-4 py-2">{contact.name || "Unnamed"}</td>
                <td className="px-4 py-2">
                  {contact.phoneNumber || contact.phone || "—"}
                </td>
                {/* ... Other table cells ... */}
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\MessagePreviewModal.jsx 
====================================================== 
 
import React from "react";
import { Dialog } from "@headlessui/react";

const MessagePreviewModal = ({ isOpen, onClose, messageLog }) => {
  if (!messageLog) return null;

  return (
    <Dialog open={isOpen} onClose={onClose} className="relative z-50">
      <div
        className="fixed inset-0 bg-black bg-opacity-30"
        aria-hidden="true"
      />

      <div className="fixed inset-0 flex items-center justify-center p-4">
        <Dialog.Panel className="w-full max-w-lg rounded-lg bg-white p-6 shadow-xl border border-gray-200">
          <Dialog.Title className="text-lg font-semibold text-purple-700 mb-3">
            📨 Sent Message Preview
          </Dialog.Title>

          <div className="text-sm bg-gray-50 p-4 border rounded-md whitespace-pre-wrap text-gray-800 mb-4">
            {messageLog.finalMessage || "No message available"}
          </div>

          <div className="text-xs text-gray-500 space-y-1">
            <p>
              <strong>Channel:</strong> {messageLog.sourceChannel || "-"}
            </p>
            <p>
              <strong>Sent At:</strong>{" "}
              {messageLog.sentAt
                ? new Date(messageLog.sentAt).toLocaleString()
                : "-"}
            </p>
            {messageLog.clickType && (
              <p>
                <strong>Click Type:</strong> {messageLog.clickType}
              </p>
            )}
          </div>

          <div className="mt-5 text-right">
            <button
              onClick={onClose}
              className="px-4 py-2 text-sm bg-purple-600 text-white rounded hover:bg-purple-700"
            >
              Close
            </button>
          </div>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
};

export default MessagePreviewModal;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\RecipientsListPage.jsx 
====================================================== 
 
// ✅ File: src/pages/Campaigns/RecipientsListPage.jsx
import React, { useCallback, useEffect, useMemo, useState } from "react";
import { useParams, useNavigate } from "react-router-dom";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";

function RecipientsListPage() {
  const { id } = useParams(); // campaignId
  const navigate = useNavigate();

  const [recipients, setRecipients] = useState([]);
  const [loading, setLoading] = useState(true);
  const [removingId, setRemovingId] = useState(null);

  const [q, setQ] = useState("");
  const [sort, setSort] = useState("name");
  const [selected, setSelected] = useState(new Set());

  const [page, setPage] = useState(1);
  const pageSize = 12;

  const fetchRecipients = useCallback(async () => {
    setLoading(true);
    try {
      const res = await axiosClient.get(`/campaign/recipients/${id}`);
      setRecipients(res.data || []);
    } catch (err) {
      console.error("❌ Load recipients failed:", err);
      toast.error("Failed to load assigned recipients");
    } finally {
      setLoading(false);
    }
  }, [id]);

  useEffect(() => {
    fetchRecipients();
  }, [fetchRecipients]);

  const filtered = useMemo(() => {
    let list = recipients;
    if (q.trim()) {
      const needle = q.toLowerCase();
      list = list.filter(
        r =>
          r.name?.toLowerCase().includes(needle) ||
          r.phoneNumber?.toLowerCase?.().includes(needle) ||
          r.email?.toLowerCase?.().includes(needle)
      );
    }
    list = [...list].sort((a, b) => {
      if (sort === "name") return (a.name || "").localeCompare(b.name || "");
      if (sort === "phone")
        return (a.phoneNumber || "").localeCompare(b.phoneNumber || "");
      if (sort === "source")
        return (a.leadSource || "").localeCompare(b.leadSource || "");
      return 0;
    });
    return list;
  }, [recipients, q, sort]);

  const totalPages = Math.max(1, Math.ceil(filtered.length / pageSize));
  const pageData = filtered.slice((page - 1) * pageSize, page * pageSize);

  useEffect(() => {
    setPage(1);
  }, [q, sort]);

  const allChecked =
    pageData.length > 0 && pageData.every(r => selected.has(r.id));
  const indeterminate = !allChecked && pageData.some(r => selected.has(r.id));

  const toggleAll = checked => {
    setSelected(prev => {
      const copy = new Set(prev);
      pageData.forEach(r => (checked ? copy.add(r.id) : copy.delete(r.id)));
      return copy;
    });
  };
  const toggleOne = (checked, id) => {
    setSelected(prev => {
      const copy = new Set(prev);
      if (checked) copy.add(id);
      else copy.delete(id);
      return copy;
    });
  };

  const handleRemove = async contactId => {
    if (!window.confirm("Remove this contact from the campaign?")) return;
    setRemovingId(contactId);
    try {
      await axiosClient.delete(`/campaigns/${id}/recipients/${contactId}`);
      setRecipients(prev => prev.filter(r => r.id !== contactId));
      setSelected(prev => {
        const copy = new Set(prev);
        copy.delete(contactId);
        return copy;
      });
      toast.success("Contact removed");
    } catch {
      toast.error("Failed to remove contact");
    } finally {
      setRemovingId(null);
    }
  };

  const handleBulkRemove = async () => {
    if (selected.size === 0) return;
    if (!window.confirm(`Remove ${selected.size} selected contact(s)?`)) return;
    try {
      await Promise.all(
        [...selected].map(cid =>
          axiosClient.delete(`/campaigns/${id}/recipients/${cid}`)
        )
      );
      setRecipients(prev => prev.filter(r => !selected.has(r.id)));
      setSelected(new Set());
      toast.success("Selected contacts removed");
    } catch {
      toast.error("Failed to remove some contacts");
    }
  };

  const handleExport = () => {
    const rows = [
      ["Name", "Phone", "Email", "Lead Source"],
      ...filtered.map(r => [
        r.name || "",
        r.phoneNumber || "",
        r.email || "",
        r.leadSource || "",
      ]),
    ];
    const csv = rows.map(r => r.join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `Campaign-${id}-Recipients.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="mx-auto max-w-7xl px-4 py-6">
      {/* Page Header */}
      <div className="mb-6">
        <button
          onClick={() => navigate("/app/campaigns/template-campaigns-list")}
          className="inline-flex items-center gap-2 text-sm text-gray-600 hover:text-gray-900"
        >
          <svg
            width="18"
            height="18"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              d="M15 19l-7-7 7-7"
            />
          </svg>
          Back
        </button>
        <h1 className="mt-2 text-2xl font-bold text-gray-900">
          Assigned Recipients
          <span className="ml-2 rounded-full bg-gray-100 px-2 py-0.5 text-xs text-gray-600">
            {recipients.length}
          </span>
        </h1>
      </div>

      {/* Toolbar */}
      <div className="mb-4 flex flex-wrap items-center gap-2 justify-between">
        <div className="flex flex-wrap items-center gap-2">
          <input
            value={q}
            onChange={e => setQ(e.target.value)}
            placeholder="Search name, phone, email…"
            className="w-64 rounded-lg border px-3 py-1.5 text-sm focus:ring-2 focus:ring-purple-200 outline-none"
          />
          <select
            value={sort}
            onChange={e => setSort(e.target.value)}
            className="rounded-lg border px-3 py-1.5 text-sm focus:ring-2 focus:ring-purple-200 outline-none"
          >
            <option value="name">Sort: Name</option>
            <option value="phone">Sort: Phone</option>
            <option value="source">Sort: Lead Source</option>
          </select>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={handleExport}
            className="rounded-lg border px-3 py-1.5 text-sm text-gray-700 hover:bg-gray-50"
          >
            Export CSV
          </button>
          <button
            onClick={() =>
              navigate(`/app/campaigns/image-campaigns/assign-contacts/${id}`)
            }
            className="rounded-lg bg-purple-600 px-3 py-1.5 text-sm font-semibold text-white hover:bg-purple-700"
          >
            Assign Contacts
          </button>
          <button
            disabled={selected.size === 0}
            onClick={handleBulkRemove}
            className={`rounded-lg px-3 py-1.5 text-sm font-semibold ${
              selected.size === 0
                ? "bg-gray-200 text-gray-400 cursor-not-allowed"
                : "bg-red-600 text-white hover:bg-red-700"
            }`}
          >
            Remove Selected
          </button>
        </div>
      </div>

      {/* Table */}
      <div className="overflow-hidden rounded-xl border bg-white shadow-sm">
        {loading ? (
          <div className="p-6 grid gap-3 animate-pulse">
            {[...Array(6)].map((_, i) => (
              <div key={i} className="h-10 rounded bg-gray-100" />
            ))}
          </div>
        ) : filtered.length === 0 ? (
          <div className="p-10 text-center text-gray-500">
            <div className="text-lg font-medium">No recipients</div>
            <p className="mt-1">Assign contacts to start sending campaigns.</p>
          </div>
        ) : (
          <div className="max-h-[70vh] overflow-auto">
            <table className="w-full text-sm table-fixed">
              {/* Fix column widths so header & rows align perfectly */}
              <colgroup>
                <col style={{ width: 44 }} /> {/* checkbox */}
                <col style={{ width: 64 }} /> {/* # */}
                <col /> {/* Name (flex) */}
                <col style={{ width: 160 }} /> {/* Phone */}
                <col style={{ width: 220 }} /> {/* Email */}
                <col style={{ width: 160 }} /> {/* Lead Source */}
                <col style={{ width: 160 }} /> {/* Actions */}
              </colgroup>

              <thead className="sticky top-0 border-b bg-gray-50 text-gray-700">
                <tr className="text-left">
                  <th className="px-3 py-2 align-middle">
                    <input
                      type="checkbox"
                      checked={allChecked}
                      ref={el => el && (el.indeterminate = indeterminate)}
                      onChange={e => toggleAll(e.target.checked)}
                    />
                  </th>
                  <th className="px-3 py-2 align-middle">#</th>
                  <th className="px-3 py-2 align-middle">Name</th>
                  <th className="px-3 py-2 align-middle">Phone</th>
                  <th className="px-3 py-2 align-middle">Email</th>
                  <th className="px-3 py-2 align-middle">Lead Source</th>
                  <th className="px-3 py-2 align-middle text-right">Actions</th>
                </tr>
              </thead>

              <tbody>
                {pageData.map((c, idx) => (
                  <tr key={c.id} className="border-t hover:bg-gray-50">
                    <td className="px-3 py-2 align-middle">
                      <input
                        type="checkbox"
                        checked={selected.has(c.id)}
                        onChange={e => toggleOne(e.target.checked, c.id)}
                      />
                    </td>

                    <td className="px-3 py-2 align-middle whitespace-nowrap">
                      {(page - 1) * pageSize + idx + 1}
                    </td>

                    {/* Truncate long text so it doesn't push columns */}
                    <td className="px-3 py-2 align-middle">
                      <div className="truncate">{c.name || "—"}</div>
                    </td>
                    <td className="px-3 py-2 align-middle whitespace-nowrap">
                      {c.phoneNumber || "—"}
                    </td>
                    <td className="px-3 py-2 align-middle">
                      <div className="truncate">{c.email || "—"}</div>
                    </td>
                    <td className="px-3 py-2 align-middle">
                      <div className="truncate">{c.leadSource || "—"}</div>
                    </td>

                    <td className="px-3 py-2 align-middle text-right">
                      <button
                        onClick={() => handleRemove(c.id)}
                        disabled={removingId === c.id}
                        className={`rounded px-2 py-1 text-xs ${
                          removingId === c.id
                            ? "bg-red-200 text-red-700 cursor-not-allowed"
                            : "bg-red-50 text-red-700 hover:bg-red-100"
                        }`}
                      >
                        {removingId === c.id ? "Removing…" : "Remove"}
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {/* Pagination */}
      {filtered.length > pageSize && (
        <div className="mt-4 flex justify-between items-center text-sm text-gray-600">
          <span>
            Showing {(page - 1) * pageSize + 1}–
            {Math.min(page * pageSize, filtered.length)} of {filtered.length}
          </span>
          <div className="flex items-center gap-2">
            <button
              disabled={page === 1}
              onClick={() => setPage(p => Math.max(1, p - 1))}
              className="px-2 py-1 border rounded disabled:opacity-40"
            >
              ← Prev
            </button>
            <span>
              Page {page} of {totalPages}
            </span>
            <button
              disabled={page === totalPages}
              onClick={() => setPage(p => Math.min(totalPages, p + 1))}
              className="px-2 py-1 border rounded disabled:opacity-40"
            >
              Next →
            </button>
          </div>
        </div>
      )}
    </div>
  );
}

export default RecipientsListPage;

// // ✅ File: src/pages/Campaigns/RecipientsListPage.jsx
// import React, { useEffect, useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axiosClient from "../../../api/axiosClient";
// import { toast } from "react-toastify";

// function RecipientsListPage() {
//   const { id } = useParams(); // campaignId
//   const navigate = useNavigate();

//   const [recipients, setRecipients] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [removingId, setRemovingId] = useState(null);

//   // 🔁 Load recipients on mount
//   useEffect(() => {
//     const fetchRecipients = async () => {
//       try {
//         const res = await axiosClient.get(`/campaign/recipients/${id}`);
//         setRecipients(res.data || []);
//       } catch (err) {
//         console.error("❌ Failed to load recipients:", err);
//         toast.error("Failed to load assigned recipients");
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchRecipients();
//   }, [id]);

//   // ❌ Handle contact removal
//   const handleRemove = async contactId => {
//     const confirm = window.confirm(
//       "Are you sure you want to remove this contact?"
//     );
//     if (!confirm) return;

//     setRemovingId(contactId);
//     try {
//       await axiosClient.delete(`/campaigns/${id}/recipients/${contactId}`);
//       setRecipients(prev => prev.filter(r => r.id !== contactId));
//       toast.success("Contact removed successfully");
//     } catch (err) {
//       console.error("❌ Remove contact failed:", err);
//       toast.error("Failed to remove contact");
//     } finally {
//       setRemovingId(null);
//     }
//   };

//   return (
//     <div className="max-w-5xl mx-auto p-6 bg-white rounded-xl shadow-xl">
//       {/* 🔙 Back button */}
//       <button
//         onClick={() => navigate("/app/campaigns/template-campaigns-list")}
//         className="inline-flex items-center gap-2 px-4 py-2 rounded-lg bg-white border border-purple-100 text-purple-700 font-medium shadow-sm hover:bg-purple-50 hover:text-purple-900 transition-all group"
//       >
//         {/* Left Arrow Icon (Lucide or Heroicons, inline SVG for copy-paste) */}
//         <svg
//           className="w-5 h-5 text-purple-500 group-hover:text-purple-700 transition"
//           fill="none"
//           stroke="currentColor"
//           strokeWidth={2.5}
//           viewBox="0 0 24 24"
//           aria-hidden="true"
//         >
//           <path
//             strokeLinecap="round"
//             strokeLinejoin="round"
//             d="M15.25 19l-7-7 7-7"
//           />
//         </svg>
//         <span>Back</span>
//       </button>

//       <h2 className="text-2xl font-bold text-purple-700 mb-4">
//         📋 Assigned Recipients
//       </h2>

//       {loading ? (
//         <p>Loading...</p>
//       ) : recipients.length === 0 ? (
//         <div className="text-gray-500">
//           <p>No contacts have been assigned to this campaign.</p>
//           <button
//             onClick={() =>
//               navigate(`/app/campaigns/image-campaigns/assign-contacts/${id}`)
//             }
//             className="mt-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition"
//           >
//             ➕ Assign Contacts
//           </button>
//         </div>
//       ) : (
//         <div className="overflow-x-auto">
//           <table className="min-w-full border border-gray-200 text-sm">
//             <thead>
//               <tr className="bg-gray-100 text-left">
//                 <th className="p-2">#</th>
//                 <th className="p-2">Name</th>
//                 <th className="p-2">Phone</th>
//                 <th className="p-2">Email</th>
//                 <th className="p-2">Lead Source</th>
//                 <th className="p-2 text-right">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {recipients.map((contact, idx) => (
//                 <tr
//                   key={contact.id}
//                   className={`border-t ${
//                     idx % 2 === 0 ? "bg-white" : "bg-gray-50"
//                   }`}
//                 >
//                   <td className="p-2">{idx + 1}</td>
//                   <td className="p-2">{contact.name}</td>
//                   <td className="p-2">{contact.phoneNumber}</td>
//                   <td className="p-2">{contact.email || "-"}</td>
//                   <td className="p-2">{contact.leadSource || "-"}</td>
//                   <td className="p-2 text-right">
//                     <button
//                       onClick={() => handleRemove(contact.id)}
//                       disabled={removingId === contact.id}
//                       className={`text-red-600 hover:underline ${
//                         removingId === contact.id
//                           ? "opacity-50 cursor-not-allowed"
//                           : ""
//                       }`}
//                     >
//                       {removingId === contact.id ? "Removing..." : "❌ Remove"}
//                     </button>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       )}
//     </div>
//   );
// }

// export default RecipientsListPage;

// // ✅ File: src/pages/Campaigns/RecipientsListPage.jsx
// import React, { useEffect, useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axiosClient from "../../../api/axiosClient";
// import { toast } from "react-toastify";

// function RecipientsListPage() {
//   const { id } = useParams(); // campaignId
//   const navigate = useNavigate();

//   const [recipients, setRecipients] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [removingId, setRemovingId] = useState(null);

//   // 🔁 Load recipients on mount
//   useEffect(() => {
//     const fetchRecipients = async () => {
//       try {
//         const res = await axiosClient.get(`/campaign/recipients/${id}`);
//         setRecipients(res.data || []);
//       } catch (err) {
//         console.error("❌ Failed to load recipients:", err);
//         toast.error("Failed to load assigned recipients");
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchRecipients();
//   }, [id]);

//   // ❌ Handle contact removal
//   const handleRemove = async contactId => {
//     const confirm = window.confirm(
//       "Are you sure you want to remove this contact?"
//     );
//     if (!confirm) return;

//     setRemovingId(contactId);
//     try {
//       await axiosClient.delete(`/campaigns/${id}/recipients/${contactId}`);
//       setRecipients(prev => prev.filter(r => r.id !== contactId));
//       toast.success("Contact removed successfully");
//     } catch (err) {
//       console.error("❌ Remove contact failed:", err);
//       toast.error("Failed to remove contact");
//     } finally {
//       setRemovingId(null);
//     }
//   };

//   return (
//     <div className="max-w-5xl mx-auto p-6 bg-white rounded-xl shadow-xl">
//       {/* 🔙 Back button */}
//       <button
//         onClick={() => navigate("/app/campaigns/image-campaign-list")}
//         className="text-sm text-purple-600 hover:underline mb-4"
//       >
//         ← Back to Campaigns
//       </button>

//       <h2 className="text-2xl font-bold text-purple-700 mb-4">
//         📋 Assigned Recipients
//       </h2>

//       {loading ? (
//         <p>Loading...</p>
//       ) : recipients.length === 0 ? (
//         <div className="text-gray-500">
//           <p>No contacts have been assigned to this campaign.</p>
//           <button
//             onClick={() =>
//               navigate(`/app/campaigns/image-campaigns/assign-contacts/${id}`)
//             }
//             className="mt-4 px-4 py-2 bg-purple-600 text-white rounded hover:bg-purple-700 transition"
//           >
//             ➕ Assign Contacts
//           </button>
//         </div>
//       ) : (
//         <div className="overflow-x-auto">
//           <table className="min-w-full border border-gray-200 text-sm">
//             <thead>
//               <tr className="bg-gray-100 text-left">
//                 <th className="p-2">#</th>
//                 <th className="p-2">Name</th>
//                 <th className="p-2">Phone</th>
//                 <th className="p-2">Email</th>
//                 <th className="p-2">Lead Source</th>
//                 <th className="p-2 text-right">Actions</th>
//               </tr>
//             </thead>
//             <tbody>
//               {recipients.map((contact, idx) => (
//                 <tr
//                   key={contact.id}
//                   className={`border-t ${
//                     idx % 2 === 0 ? "bg-white" : "bg-gray-50"
//                   }`}
//                 >
//                   <td className="p-2">{idx + 1}</td>
//                   <td className="p-2">{contact.name}</td>
//                   <td className="p-2">{contact.phoneNumber}</td>
//                   <td className="p-2">{contact.email || "-"}</td>
//                   <td className="p-2">{contact.leadSource || "-"}</td>
//                   <td className="p-2 text-right">
//                     <button
//                       onClick={() => handleRemove(contact.id)}
//                       disabled={removingId === contact.id}
//                       className={`text-red-600 hover:underline ${
//                         removingId === contact.id
//                           ? "opacity-50 cursor-not-allowed"
//                           : ""
//                       }`}
//                     >
//                       {removingId === contact.id ? "Removing..." : "❌ Remove"}
//                     </button>
//                   </td>
//                 </tr>
//               ))}
//             </tbody>
//           </table>
//         </div>
//       )}
//     </div>
//   );
// }

// export default RecipientsListPage;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\TagFilterDropdown.jsx 
====================================================== 
 
// 📄 TagFilterDropdown.jsx
import React, { useEffect, useState } from "react";
import Select from "react-select";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";

export default function TagFilterDropdown({ selectedTags, onChange }) {
  const [tagOptions, setTagOptions] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchTags = async () => {
      try {
        const res = await axiosClient.get("/tags/get-tags");
        const allTags = Array.isArray(res.data)
          ? res.data
          : res.data?.data || [];

        const options = allTags.map(tag => ({
          label: tag.name,
          value: tag.id,
        }));

        setTagOptions(options);
      } catch (err) {
        console.error("❌ Failed to fetch tags:", err);
        toast.error("Failed to load tags");
      } finally {
        setLoading(false);
      }
    };

    fetchTags();
  }, []);

  const handleChange = selected => {
    const tagIds = selected ? selected.map(tag => tag.value) : [];
    onChange(tagIds);
  };

  const selectedOptions = tagOptions.filter(opt =>
    selectedTags.includes(opt.value)
  );

  return (
    <div className="w-full max-w-md">
      <label className="block mb-1 text-sm font-medium text-gray-700">
        🏷️ Filter by Tags (All)
      </label>
      <Select
        isMulti
        options={tagOptions}
        value={selectedOptions}
        onChange={handleChange}
        isLoading={loading}
        placeholder="Select tags..."
        className="react-select-container"
        classNamePrefix="react-select"
        noOptionsMessage={() => (loading ? "Loading..." : "No tags available")}
      />
    </div>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\WhatsAppBubblePreview.jsx 
====================================================== 
 
import React, { useState } from "react";
import { FaGlobe, FaPhone, FaReply } from "react-icons/fa6";
import { buildTrackingUrl } from "../../../utils/buildTrackingUrl";

// ✅ Icon Renderer
const getIconForType = type => {
  const normalized = type?.toLowerCase();
  switch (normalized) {
    case "url":
    case "web":
      return <FaGlobe />;
    case "voice_call":
    case "phone_number":
    case "call":
      return <FaPhone />;
    case "quick_reply":
    case "reply":
      return <FaReply />;
    default:
      return <FaGlobe />;
  }
};

function WhatsAppBubblePreview({
  messageTemplate,
  cta,
  multiButtons = [],
  campaignId,
  messageId,
  contact,
  imageUrl,
  caption,
}) {
  const [imgError, setImgError] = useState(false);

  const getTrackingUrl = button => {
    return buildTrackingUrl({
      businessId: localStorage.getItem("businessId"),
      sourceType: "campaign",
      sourceId: campaignId,
      buttonText: button?.title || button?.buttonText || "Click",
      redirectUrl: button?.value || button?.targetUrl || "",
      messageId,
      contactId: contact?.id,
      contactPhone: contact?.phone,
    });
  };

  return (
    <div className="max-w-md mx-auto bg-white rounded-xl shadow-md p-4">
      <div className="relative bg-green-50 text-gray-800 rounded-lg p-4 shadow-md w-fit max-w-full">
        {/* ✅ Tail Arrow */}
        <div className="absolute -left-3 top-4 w-0 h-0 border-t-[12px] border-t-transparent border-r-[16px] border-r-green-50 border-b-[12px] border-b-transparent"></div>

        {/* 📷 Image Preview */}
        {imageUrl && !imgError ? (
          <img
            src={imageUrl}
            alt="Campaign"
            onError={() => setImgError(true)}
            className="rounded-md mb-2 max-h-48 object-cover border"
          />
        ) : imageUrl ? (
          <div className="bg-gray-200 text-gray-500 text-xs h-32 flex items-center justify-center mb-2 rounded-md">
            Image not available
          </div>
        ) : null}

        {/* 📝 Message Text */}
        {caption && <p className="mb-1">{caption}</p>}
        <p className="whitespace-pre-line">{messageTemplate}</p>

        {/* 🔘 Multi-CTA Buttons */}
        {multiButtons?.length > 0 && (
          <div className="mt-4 space-y-2">
            {multiButtons.slice(0, 3).map((btn, idx) => (
              <a
                key={idx}
                href={getTrackingUrl(btn)}
                target="_blank"
                rel="noopener noreferrer"
                className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
              >
                {getIconForType(btn.type || btn.buttonType)}
                {btn.title || btn.buttonText || "Untitled"}
              </a>
            ))}
          </div>
        )}

        {/* 🔘 Single CTA fallback */}
        {!multiButtons?.length && cta && (
          <a
            href={getTrackingUrl({
              title: cta.buttonText,
              value: cta.targetUrl,
              type: cta.ctaType,
            })}
            target="_blank"
            rel="noopener noreferrer"
            className="mt-3 inline-flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
          >
            {getIconForType(cta.ctaType)}
            {cta.buttonText}
          </a>
        )}
      </div>
    </div>
  );
}

export default WhatsAppBubblePreview;

// import React, { useState } from "react";
// import { buildTrackingUrl } from "../../../utils/buildTrackingUrl";
// import { FaGlobe, FaPhone, FaReply } from "react-icons/fa6";

// // ✅ Icon helper
// const getIconForType = type => {
//   const normalized = type?.toLowerCase();
//   switch (normalized) {
//     case "web":
//     case "url":
//       return <FaGlobe />;
//     case "call":
//       return <FaPhone />;
//     case "reply":
//     case "quick_reply":
//       return <FaReply />;
//     default:
//       return <FaGlobe />;
//   }
// };

// function WhatsAppBubblePreview({
//   messageTemplate,
//   cta,
//   multiButtons = [],
//   campaignId,
//   messageId,
//   contact,
//   imageUrl,
//   caption,
// }) {
//   const [imgError, setImgError] = useState(false);

//   // 🧠 Build tracking URL
//   const getTrackingUrl = button => {
//     return buildTrackingUrl({
//       businessId: localStorage.getItem("businessId"),
//       sourceType: "campaign",
//       sourceId: campaignId,
//       buttonText: button.title || button.buttonText,
//       redirectUrl: button.value || button.targetUrl,
//       messageId,
//       contactId: contact?.id,
//       contactPhone: contact?.phone,
//     });
//   };

//   return (
//     <div className="max-w-md mx-auto bg-white rounded-xl shadow-md p-4">
//       <div className="relative bg-green-50 text-gray-800 rounded-lg p-4 shadow-md w-fit max-w-full">
//         {/* 🟢 Tail */}
//         <div className="absolute -left-3 top-4 w-0 h-0 border-t-[12px] border-t-transparent border-r-[16px] border-r-green-50 border-b-[12px] border-b-transparent"></div>

//         {/* 📷 Image */}
//         {imageUrl && !imgError ? (
//           <img
//             src={imageUrl}
//             alt="Campaign"
//             onError={() => setImgError(true)}
//             className="rounded-md mb-2 max-h-48 object-cover border"
//           />
//         ) : imageUrl ? (
//           <div className="bg-gray-200 text-gray-500 text-xs h-32 flex items-center justify-center mb-2 rounded-md">
//             Image not available
//           </div>
//         ) : null}

//         {/* 📝 Text */}
//         {caption && <p className="mb-1">{caption}</p>}
//         <p className="whitespace-pre-line">{messageTemplate}</p>

//         {/* 🔘 Multiple CTA Buttons */}
//         {multiButtons?.length > 0 && (
//           <div className="mt-4 space-y-2">
//             {multiButtons.slice(0, 3).map((btn, idx) => (
//               <a
//                 key={idx}
//                 href={getTrackingUrl(btn)}
//                 target="_blank"
//                 rel="noopener noreferrer"
//                 className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
//               >
//                 {getIconForType(btn.type || btn.buttonType)}
//                 {btn.title || btn.buttonText || "Untitled"}
//               </a>
//             ))}
//           </div>
//         )}

//         {/* 🔘 Fallback Single CTA */}
//         {!multiButtons?.length && cta && (
//           <a
//             href={getTrackingUrl({
//               title: cta.buttonText,
//               value: cta.targetUrl,
//               type: cta.ctaType,
//             })}
//             target="_blank"
//             rel="noopener noreferrer"
//             className="mt-3 inline-flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
//           >
//             {getIconForType(cta.ctaType)}
//             {cta.buttonText}
//           </a>
//         )}
//       </div>
//     </div>
//   );
// }

// export default WhatsAppBubblePreview;

// import React, { useState } from "react";
// import { buildTrackingUrl } from "../../../utils/buildTrackingUrl";
// import { FaGlobe, FaPhone, FaReply } from "react-icons/fa6";

// // ✅ Icon helper
// const getIconForType = type => {
//   switch (type?.toLowerCase()) {
//     case "web":
//     case "url":
//       return <FaGlobe />;
//     case "call":
//       return <FaPhone />;
//     case "reply":
//     case "quick_reply":
//       return <FaReply />;
//     default:
//       return <FaGlobe />;
//   }
// };

// function WhatsAppBubblePreview({
//   messageTemplate,
//   cta,
//   multiButtons = [], // ✅ Accepts multiple buttons
//   campaignId,
//   messageId,
//   contact,
//   imageUrl,
//   caption,
// }) {
//   const [imgError, setImgError] = useState(false);

//   // 🧠 Build tracking URL for each button
//   const getTrackingUrl = button => {
//     return buildTrackingUrl({
//       businessId: localStorage.getItem("businessId"),
//       sourceType: "campaign",
//       sourceId: campaignId,
//       buttonText: button.title,
//       redirectUrl: button.value,
//       messageId,
//       contactId: contact?.id,
//       contactPhone: contact?.phone,
//     });
//   };

//   return (
//     <div className="max-w-md mx-auto bg-white rounded-xl shadow-md p-4">
//       {/* 🧾 WhatsApp-like bubble */}
//       <div className="relative bg-green-50 text-gray-800 rounded-lg p-4 shadow-md w-fit max-w-full">
//         {/* 🟢 Tail */}
//         <div className="absolute -left-3 top-4 w-0 h-0 border-t-[12px] border-t-transparent border-r-[16px] border-r-green-50 border-b-[12px] border-b-transparent"></div>

//         {/* 📷 Image Preview */}
//         {imageUrl && !imgError ? (
//           <img
//             src={imageUrl}
//             alt="Campaign"
//             onError={() => setImgError(true)}
//             className="rounded-md mb-2 max-h-48 object-cover border"
//           />
//         ) : imageUrl ? (
//           <div className="bg-gray-200 text-gray-500 text-xs h-32 flex items-center justify-center mb-2 rounded-md">
//             Image not available
//           </div>
//         ) : null}

//         {/* 📝 Message */}
//         {caption && <p className="mb-1">{caption}</p>}
//         <p className="whitespace-pre-line">{messageTemplate}</p>

//         {/* 🔘 Multiple CTA Buttons */}
//         {multiButtons?.length > 0 && (
//           <div className="mt-4 space-y-2">
//             {multiButtons.slice(0, 3).map((btn, idx) => (
//               <a
//                 key={idx}
//                 href={getTrackingUrl(btn)}
//                 target="_blank"
//                 rel="noopener noreferrer"
//                 className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
//               >
//                 {getIconForType(btn.type)}
//                 {btn.title}
//               </a>
//             ))}
//           </div>
//         )}

//         {/* 🔘 Fallback single CTA (optional) */}
//         {!multiButtons?.length && cta && (
//           <a
//             href={getTrackingUrl({
//               title: cta.buttonText,
//               value: cta.targetUrl,
//               type: cta.ctaType,
//             })}
//             target="_blank"
//             rel="noopener noreferrer"
//             className="mt-3 inline-flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded shadow hover:bg-green-600 text-sm"
//           >
//             {getIconForType(cta.ctaType)}
//             {cta.buttonText}
//           </a>
//         )}
//       </div>
//     </div>
//   );
// }

// export default WhatsAppBubblePreview;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\Dashboard\CampaignStatsWidget.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { getCampaignStatusDashboard } from "@/api/dashboardService";
import {
  PieChart,
  Pie,
  Cell,
  ResponsiveContainer,
  Tooltip,
  Legend,
} from "recharts";
import StatCard from "@/components/StatCard";
import Spinner from "@/components/Spinner";

// A small utility to prevent labels from cluttering the chart on small slices
const RADIAN = Math.PI / 180;
const renderCustomizedLabel = ({
  cx,
  cy,
  midAngle,
  innerRadius,
  outerRadius,
  percent,
}) => {
  const radius = innerRadius + (outerRadius - innerRadius) * 0.6;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);

  // Don't render a label if the slice is less than 5%
  if (percent < 0.05) {
    return null;
  }

  return (
    <text
      x={x}
      y={y}
      fill="white"
      textAnchor={x > cx ? "start" : "end"}
      dominantBaseline="central"
      className="text-xs font-bold"
    >
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  );
};

export default function CampaignStatsWidget() {
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        setLoading(true);
        const response = await getCampaignStatusDashboard();
        setStats(response.data);
      } catch (err) {
        setError("Failed to load campaign stats.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex justify-center items-center h-60">
          <Spinner />
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex justify-center items-center h-60">
          <p className="text-red-500">{error}</p>
        </div>
      );
    }

    if (!stats || stats.totalSent === 0) {
      return (
        <div className="flex justify-center items-center h-60">
          <p className="text-gray-500">
            Send your first campaign to see stats here.
          </p>
        </div>
      );
    }

    const chartData = [
      { name: "Read", value: stats.totalRead },
      {
        name: "Delivered (Not Read)",
        value: stats.totalDelivered - stats.totalRead,
      },
    ];

    const COLORS = ["#0088FE", "#FFBB28"];

    return (
      <div>
        <div className="grid grid-cols-2 gap-4 mb-6">
          <StatCard title="Total Sent" value={stats.totalSent} />
          <StatCard
            title="Failed"
            value={stats.totalFailed}
            valueClassName="text-red-500"
          />
        </div>
        <div style={{ width: "100%", height: 200 }}>
          <ResponsiveContainer>
            <PieChart>
              <Pie
                data={chartData}
                cx="50%"
                cy="50%"
                labelLine={false}
                label={renderCustomizedLabel}
                outerRadius={90}
                fill="#8884d8"
                dataKey="value"
                stroke="none"
              >
                {chartData.map((entry, index) => (
                  <Cell
                    key={`cell-${index}`}
                    fill={COLORS[index % COLORS.length]}
                  />
                ))}
              </Pie>
              <Tooltip formatter={(value, name) => [value, name]} />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </div>
      </div>
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Campaign Performance</CardTitle>
        <CardDescription>Stats from all campaigns sent.</CardDescription>
      </CardHeader>
      <CardContent>{renderContent()}</CardContent>
    </Card>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\Dashboard\CrmGrowthWidget.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { getCrmSummary, getCrmContactTrends } from "@/api/dashboardService";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Legend,
} from "recharts";
import StatCard from "@/components/StatCard";
import Spinner from "@/components/Spinner";

export default function CrmGrowthWidget() {
  const [summary, setSummary] = useState(null);
  const [trends, setTrends] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchAllData = async () => {
      try {
        setLoading(true);
        // Fetch summary and trends data concurrently for better performance
        const [summaryResponse, trendsResponse] = await Promise.all([
          getCrmSummary(),
          getCrmContactTrends(),
        ]);

        setSummary(summaryResponse.data);

        // Format the date for the chart to be more readable
        const formattedTrends = trendsResponse.data.map(item => ({
          ...item,
          date: new Date(item.date).toLocaleDateString("en-US", {
            month: "short",
            day: "numeric",
          }),
        }));
        setTrends(formattedTrends);
      } catch (err) {
        setError("Failed to load CRM stats.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchAllData();
  }, []);

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex justify-center items-center h-60">
          <Spinner />
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex justify-center items-center h-60">
          <p className="text-red-500">{error}</p>
        </div>
      );
    }

    if (!summary || summary.totalContacts === 0) {
      return (
        <div className="flex justify-center items-center h-60">
          <p className="text-gray-500">
            Add your first contact to see stats here.
          </p>
        </div>
      );
    }

    return (
      <div>
        <div className="grid grid-cols-2 gap-4 mb-6">
          <StatCard title="Total Contacts" value={summary.totalContacts} />
          <StatCard
            title="New (Last 30d)"
            value={summary.newContactsLast30Days}
            valueClassName="text-green-600"
          />
        </div>
        <div style={{ width: "100%", height: 200 }}>
          <ResponsiveContainer>
            <LineChart
              data={trends}
              margin={{ top: 5, right: 20, left: -10, bottom: 5 }}
            >
              <CartesianGrid strokeDasharray="3 3" stroke="#e0e0e0" />
              <XAxis dataKey="date" tick={{ fontSize: 12 }} stroke="#666" />
              <YAxis allowDecimals={false} stroke="#666" />
              <Tooltip
                contentStyle={{
                  borderRadius: "0.5rem",
                  boxShadow:
                    "0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)",
                  border: "1px solid #e2e8f0",
                }}
              />
              <Legend />
              <Line
                type="monotone"
                dataKey="newContacts"
                name="New Contacts"
                stroke="#10b981"
                strokeWidth={2}
                dot={{ r: 3 }}
                activeDot={{ r: 5 }}
              />
            </LineChart>
          </ResponsiveContainer>
        </div>
      </div>
    );
  };

  return (
    <Card>
      <CardHeader>
        <CardTitle>Contact Growth</CardTitle>
        <CardDescription>
          Audience growth over the last 30 days.
        </CardDescription>
      </CardHeader>
      <CardContent>{renderContent()}</CardContent>
    </Card>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\Dashboard\QuickActionsWidget.jsx 
====================================================== 
 
import React from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { PlusCircle, UserPlus, MessageSquare } from "lucide-react";
import { Link } from "react-router-dom";

export default function QuickActionsWidget() {
  const actions = [
    {
      label: "New Campaign",
      icon: <PlusCircle className="h-5 w-5 mr-2" />,
      path: "/campaigns/new",
      className: "bg-blue-500 hover:bg-blue-600 text-white",
    },
    {
      label: "Add Contact",
      icon: <UserPlus className="h-5 w-5 mr-2" />,
      path: "/contacts",
      className: "bg-green-500 hover:bg-green-600 text-white",
    },
    {
      label: "Go to Inbox",
      icon: <MessageSquare className="h-5 w-5 mr-2" />,
      path: "/inbox",
      className: "bg-purple-500 hover:bg-purple-600 text-white",
    },
  ];

  return (
    <Card className="col-span-1 lg:col-span-2">
      <CardContent className="p-6">
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          {actions.map(action => (
            <Link to={action.path} key={action.label} className="no-underline">
              <Button
                size="lg"
                className={`w-full h-16 text-md font-semibold ${action.className}`}
              >
                {action.icon}
                {action.label}
              </Button>
            </Link>
          ))}
        </div>
      </CardContent>
    </Card>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\Dashboard\TopCampaignsWidget.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import { getTopCampaigns } from "@/api/dashboardService";
import Spinner from "@/components/Spinner";
import { Link } from "react-router-dom";
import { Badge } from "@/components/ui/badge"; // A standard ShadCN UI component

export default function TopCampaignsWidget() {
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchTopCampaigns = async () => {
      try {
        setLoading(true);
        // We already created this service function in a previous step
        const response = await getTopCampaigns(5); // Fetch top 5
        setCampaigns(response.data);
      } catch (err) {
        setError("Failed to load top campaigns.");
        console.error(err);
      } finally {
        setLoading(false);
      }
    };

    fetchTopCampaigns();
  }, []);

  const renderContent = () => {
    if (loading) {
      return (
        <div className="flex justify-center items-center h-48">
          <Spinner />
        </div>
      );
    }

    if (error) {
      return (
        <div className="flex justify-center items-center h-48">
          <p className="text-red-500">{error}</p>
        </div>
      );
    }

    if (campaigns.length === 0) {
      return (
        <div className="flex justify-center items-center h-48">
          <p className="text-gray-500">
            Send a few campaigns to see your top performers here.
          </p>
        </div>
      );
    }

    return (
      <ul className="space-y-3">
        {campaigns.map((campaign, index) => (
          <li key={campaign.campaignId}>
            <Link
              to={`/campaigns/${campaign.campaignId}`}
              className="block p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors"
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <span className="flex items-center justify-center w-7 h-7 mr-4 bg-gray-200 rounded-full font-bold text-gray-600 text-sm">
                    {index + 1}
                  </span>
                  <p className="font-semibold text-gray-800">
                    {campaign.campaignName}
                  </p>
                </div>
                <div className="flex items-center space-x-4">
                  <Badge variant="outline">
                    Read: {campaign.readRate.toFixed(1)}%
                  </Badge>
                  <Badge>CTR: {campaign.clickThroughRate.toFixed(1)}%</Badge>
                </div>
              </div>
            </Link>
          </li>
        ))}
      </ul>
    );
  };

  return (
    <Card className="col-span-1 lg:col-span-2">
      <CardHeader>
        <CardTitle>Top Performing Campaigns</CardTitle>
        <CardDescription>
          Ranked by Click-Through Rate (CTR) from all sent campaigns.
        </CardDescription>
      </CardHeader>
      <CardContent>{renderContent()}</CardContent>
    </Card>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\components\templates\TemplateCard.jsx 
====================================================== 
 
// src/components/templates/TemplateCard.jsx
import React from "react";
// import WhatsAppBubblePreview from "../../WhatsAppBubblePreview";
import WhatsAppBubblePreview from "../../../../components/WhatsAppBubblePreview";
export default function TemplateCard({
  t,
  onSend,
  onAssign,
  onViewRecipients,
  onOpenInspector,
  sending,
}) {
  const hasRecipients = t.recipients > 0;

  return (
    <div className="group relative flex flex-col overflow-hidden rounded-xl border border-gray-200 bg-white shadow-sm transition-shadow hover:shadow-md">
      {/* Media Slot — fixed 16:9 for uniformity */}
      <div className="relative">
        <div className="aspect-[16/9] w-full bg-gray-50 flex items-center justify-center">
          {t.kind === "image_header" && t.imageUrl ? (
            <img
              src={t.imageUrl}
              alt="Campaign"
              className="h-full w-full object-cover"
            />
          ) : (
            <div className="flex flex-col items-center text-gray-400">
              <svg
                width="40"
                height="40"
                viewBox="0 0 24 24"
                className="opacity-80"
              >
                <path
                  fill="currentColor"
                  d="M21 19V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14zm-2 0H5V5h14zM8 13l2.03 2.71L12 13l3 4H7z"
                />
              </svg>
              <span className="mt-2 text-xs text-gray-500">
                {t.kind === "text_only" ? "Text template" : "No media"}
              </span>
            </div>
          )}
        </div>

        {/* Neutral type chip */}
        <div className="absolute right-3 top-3">
          <span className="inline-flex items-center gap-1 rounded-full bg-black/50 px-2 py-0.5 text-[11px] text-white backdrop-blur-sm">
            {t.kind === "image_header" ? "Image header" : "Text only"}
          </span>
        </div>
      </div>

      {/* Body */}
      <div className="flex flex-col gap-3 p-4">
        {/* Title + recipients */}
        <div className="flex items-start justify-between gap-3">
          <h3 className="line-clamp-1 text-base font-semibold text-gray-900">
            {t.name}
          </h3>
          <span
            className={`inline-flex items-center gap-1 rounded-full px-2 py-0.5 text-[11px] font-medium ${
              hasRecipients
                ? "bg-emerald-50 text-emerald-700"
                : "bg-gray-100 text-gray-500"
            }`}
            title={`${t.recipients} recipient(s)`}
          >
            <svg width="14" height="14" viewBox="0 0 24 24">
              <path
                fill="currentColor"
                d="M12 12a5 5 0 1 0-5-5a5 5 0 0 0 5 5m7 8v-1a6 6 0 0 0-12 0v1z"
              />
            </svg>
            {t.recipients}
          </span>
        </div>

        {/* Compact preview (click → inspector) */}
        <button
          type="button"
          onClick={onOpenInspector}
          className="rounded-lg border border-gray-200 bg-gray-50 p-2 text-left transition hover:bg-gray-100"
          title="Open full preview"
        >
          <WhatsAppBubblePreview
            messageTemplate={t.body}
            multiButtons={t.buttons}
            imageUrl={t.imageUrl || undefined}
            caption={t.caption}
            campaignId={t.id}
          />
        </button>

        {/* Actions */}
        <div className="mt-1 grid grid-cols-3 gap-2">
          <button
            disabled={!hasRecipients || sending}
            onClick={onSend}
            className={`inline-flex items-center justify-center gap-2 rounded-lg px-3 py-2 text-sm font-semibold transition
              ${
                hasRecipients
                  ? "bg-emerald-600 text-white hover:bg-emerald-700"
                  : "bg-gray-200 text-gray-400 cursor-not-allowed"
              }`}
            title={hasRecipients ? "Send campaign" : "Assign recipients first"}
          >
            {sending ? "Sending…" : "Send"}
          </button>

          <button
            onClick={onAssign}
            className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
            title="Assign recipients"
          >
            Assign
          </button>

          <button
            onClick={onViewRecipients}
            className="inline-flex items-center justify-center gap-2 rounded-lg bg-gray-100 px-3 py-2 text-sm font-semibold text-gray-800 hover:bg-gray-200"
            title="View recipients"
          >
            Recipients
          </button>
        </div>
      </div>
    </div>
  );
}
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\steps\StepCampaignDetails.jsx 
====================================================== 
 
import React, { useState } from "react";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";

function StepCampaignDetails({
  templateId,
  message,
  contactIds,
  campaignName,
  scheduledAt,
  onChange,
  onBack,
  onSubmitSuccess,
}) {
  const [submitting, setSubmitting] = useState(false);

  const handleLaunch = async () => {
    if (!campaignName || !templateId || !message || contactIds.length === 0) {
      toast.warn("⚠️ All fields are required (template, contacts, name).");
      return;
    }

    const payload = {
      name: campaignName,
      messageTemplate: message,
      templateId,
      contactIds,
      scheduledAt: scheduledAt || null,
    };

    try {
      setSubmitting(true);
      await axiosClient.post("/campaign", payload); // <-- Removed unused `res`
      toast.success("🚀 Campaign launched successfully!");
      onSubmitSuccess(); // Redirect or reset parent
    } catch (err) {
      toast.error("❌ Failed to launch campaign");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="bg-white p-6 rounded shadow space-y-4">
      <h2 className="text-xl font-semibold text-purple-700">
        🚀 Step 3: Campaign Details
      </h2>

      {/* Campaign Name */}
      <label className="block text-sm font-medium text-gray-700">
        Campaign Name
      </label>
      <input
        type="text"
        value={campaignName}
        onChange={e => onChange({ campaignName: e.target.value })}
        className="border rounded px-3 py-2 w-full"
        placeholder="Diwali Promotion Blast"
      />

      {/* Schedule Date */}
      <label className="block text-sm font-medium text-gray-700">
        Schedule (Optional)
      </label>
      <input
        type="datetime-local"
        value={scheduledAt}
        onChange={e => onChange({ scheduledAt: e.target.value })}
        className="border rounded px-3 py-2 w-full"
      />
      <div className="text-xs text-gray-500">
        If not set, the campaign will be sent immediately.
      </div>

      {/* Action Buttons */}
      <div className="flex justify-between mt-4">
        <button
          onClick={onBack}
          className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
        >
          ← Back
        </button>
        <button
          disabled={submitting}
          onClick={handleLaunch}
          className={`px-4 py-2 text-sm text-white rounded ${
            submitting
              ? "bg-gray-400 cursor-not-allowed"
              : "bg-purple-600 hover:bg-purple-700"
          }`}
        >
          🚀 Launch Campaign
        </button>
      </div>
    </div>
  );
}

export default StepCampaignDetails;

// import React, { useState } from "react";
// import axiosClient from "../../../api/axiosClient";
// import { toast } from "react-toastify";

// function StepCampaignDetails({
//   templateId,
//   message,
//   contactIds,
//   campaignName,
//   scheduledAt,
//   onChange,
//   onBack,
//   onSubmitSuccess,
// }) {
//   const [submitting, setSubmitting] = useState(false);

//   const handleLaunch = async () => {
//     if (!campaignName || !templateId || !message || contactIds.length === 0) {
//       toast.warn("⚠️ All fields are required (template, contacts, name).");
//       return;
//     }

//     const payload = {
//       name: campaignName,
//       messageTemplate: message,
//       templateId,
//       contactIds,
//       scheduledAt: scheduledAt || null,
//     };

//     try {
//       setSubmitting(true);
//       const res = await axiosClient.post("/campaign", payload);
//       toast.success("🚀 Campaign launched successfully!");
//       onSubmitSuccess(); // Redirect or reset parent
//     } catch (err) {
//       toast.error("❌ Failed to launch campaign");
//     } finally {
//       setSubmitting(false);
//     }
//   };

//   return (
//     <div className="bg-white p-6 rounded shadow space-y-4">
//       <h2 className="text-xl font-semibold text-purple-700">
//         🚀 Step 3: Campaign Details
//       </h2>

//       {/* Campaign Name */}
//       <label className="block text-sm font-medium text-gray-700">
//         Campaign Name
//       </label>
//       <input
//         type="text"
//         value={campaignName}
//         onChange={e => onChange({ campaignName: e.target.value })}
//         className="border rounded px-3 py-2 w-full"
//         placeholder="Diwali Promotion Blast"
//       />

//       {/* Schedule Date */}
//       <label className="block text-sm font-medium text-gray-700">
//         Schedule (Optional)
//       </label>
//       <input
//         type="datetime-local"
//         value={scheduledAt}
//         onChange={e => onChange({ scheduledAt: e.target.value })}
//         className="border rounded px-3 py-2 w-full"
//       />
//       <div className="text-xs text-gray-500">
//         If not set, the campaign will be sent immediately.
//       </div>

//       {/* Action Buttons */}
//       <div className="flex justify-between mt-4">
//         <button
//           onClick={onBack}
//           className="px-4 py-2 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
//         >
//           ← Back
//         </button>
//         <button
//           disabled={submitting}
//           onClick={handleLaunch}
//           className={`px-4 py-2 text-sm text-white rounded ${
//             submitting
//               ? "bg-gray-400 cursor-not-allowed"
//               : "bg-purple-600 hover:bg-purple-700"
//           }`}
//         >
//           🚀 Launch Campaign
//         </button>
//       </div>
//     </div>
//   );
// }

// export default StepCampaignDetails;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\steps\StepContactSelect.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";

function StepContactSelect({ selectedContactIds = [], onChange }) {
  const [contacts, setContacts] = useState([]);
  const [loading, setLoading] = useState(true);

  // 🧠 Fetch all contacts with tags
  const fetchContacts = async () => {
    try {
      const res = await axiosClient.get("/contacts");
      setContacts(res.data || []);
    } catch (err) {
      toast.error("❌ Failed to load contacts");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchContacts();
  }, []);

  const isSelected = id => selectedContactIds.includes(id);

  const toggleContact = id => {
    if (isSelected(id)) {
      onChange(selectedContactIds.filter(cid => cid !== id));
    } else {
      onChange([...selectedContactIds, id]);
    }
  };

  const handleSelectAll = () => {
    const allIds = contacts.map(c => c.id);
    onChange(allIds);
  };

  const handleDeselectAll = () => {
    onChange([]);
  };

  return (
    <div className="bg-white p-6 rounded shadow space-y-4">
      <h2 className="text-xl font-semibold text-purple-700">
        👥 Step 2: Select Contacts
      </h2>

      {loading ? (
        <p>⏳ Loading contacts...</p>
      ) : contacts.length === 0 ? (
        <p className="text-gray-500">🚫 No contacts available.</p>
      ) : (
        <>
          <div className="flex gap-4 mb-2">
            <button
              onClick={handleSelectAll}
              className="px-3 py-1 bg-blue-100 text-blue-700 rounded text-sm"
            >
              ✅ Select All
            </button>
            <button
              onClick={handleDeselectAll}
              className="px-3 py-1 bg-gray-100 text-gray-600 rounded text-sm"
            >
              ❌ Deselect All
            </button>
            <span className="text-sm text-gray-500">
              Selected: {selectedContactIds.length}
            </span>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-2 max-h-[350px] overflow-y-auto border rounded p-2">
            {contacts.map(contact => (
              <div
                key={contact.id}
                className="p-2 rounded border hover:bg-gray-50 transition"
              >
                <label className="flex items-center gap-2 text-sm text-gray-700 cursor-pointer">
                  <input
                    type="checkbox"
                    checked={isSelected(contact.id)}
                    onChange={() => toggleContact(contact.id)}
                  />
                  {contact.name} ({contact.phoneNumber})
                </label>

                {/* 🏷️ Tag chips display */}
                {contact.tags && contact.tags.length > 0 && (
                  <div className="mt-1 flex flex-wrap gap-1 pl-6">
                    {contact.tags.map(tag => (
                      <span
                        key={tag.id}
                        className="text-xs bg-purple-100 text-purple-700 px-2 py-0.5 rounded-full"
                      >
                        {tag.name}
                      </span>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default StepContactSelect;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\steps\StepTemplateSelect.jsx 
====================================================== 
 
import React, { useEffect, useState } from "react";
import axiosClient from "../../../api/axiosClient";
import { toast } from "react-toastify";

function StepTemplateSelect({ selectedTemplateId, message, onChange }) {
  const [templates, setTemplates] = useState([]);
  const [loading, setLoading] = useState(true);

  // ✅ Fetch templates safely
  useEffect(() => {
    const fetchTemplates = async () => {
      try {
        const res = await axiosClient.get("/whatsapp/templates");

        const data = res.data;
        if (data.success && Array.isArray(data.templates)) {
          setTemplates(data.templates);
        } else {
          toast.error("⚠️ Failed to load templates (invalid format)");
          setTemplates([]);
        }
      } catch (err) {
        toast.error("❌ Error loading templates");
        setTemplates([]);
      } finally {
        setLoading(false);
      }
    };

    fetchTemplates();
  }, []);

  // ✅ Handle dropdown change
  const handleTemplateChange = e => {
    const selectedId = e.target.value;
    const selected = templates.find(t => t.name === selectedId); // Match by name
    onChange({
      templateId: selectedId,
      message: selected ? selected.body : "",
    });
  };

  return (
    <div className="bg-white p-6 rounded shadow space-y-4">
      <h2 className="text-xl font-semibold text-purple-700">
        🧾 Step 1: Choose Approved Template
      </h2>

      {/* Dropdown */}
      {loading ? (
        <p>Loading templates...</p>
      ) : (
        <select
          value={selectedTemplateId || ""}
          onChange={handleTemplateChange}
          className="border rounded px-3 py-2 w-full"
        >
          <option value="">-- Select Template --</option>
          {templates.map(t => (
            <option key={t.name} value={t.name}>
              {t.name}
            </option>
          ))}
        </select>
      )}

      {/* Message Preview / Editor */}
      <label className="block text-sm font-medium text-gray-700">
        ✍️ Message Body (Editable)
      </label>
      <textarea
        rows={5}
        value={message}
        onChange={e => onChange({ message: e.target.value })}
        className="border rounded w-full px-3 py-2"
        placeholder="Hello {name}, your status is {status}."
      />

      <div className="text-xs text-gray-500 mt-1">
        You can use placeholders like <code>{`{name}`}</code> and{" "}
        <code>{`{status}`}</code>.
      </div>
    </div>
  );
}

export default StepTemplateSelect;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\CampaignInfoTab.jsx 
====================================================== 
 
// ✅ CampaignInfoTab.jsx
import React from "react";

function CampaignInfoTab({ formData, setFormData }) {
  const handleChange = e => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  return (
    <div>
      <h3 className="text-2xl font-semibold mb-4">Campaign Info</h3>

      {/* Campaign Name */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-1">Campaign Name</label>
        <input
          type="text"
          name="name"
          value={formData.name}
          onChange={handleChange}
          className="w-full border rounded px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
          placeholder="Enter a campaign name"
        />
      </div>

      {/* Campaign Description */}
      <div className="mb-4">
        <label className="block text-sm font-medium mb-1">
          Description (optional)
        </label>
        <textarea
          name="description"
          value={formData.description}
          onChange={handleChange}
          className="w-full border rounded px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
          rows={3}
          placeholder="Add some notes about this campaign"
        />
      </div>
    </div>
  );
}

export default CampaignInfoTab;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\CTAButtonsTab.jsx 
====================================================== 
 
// ✅ CTAButtonsTab.jsx – For text templates
import React from "react";

const maxButtons = 3;

function CTAButtonsTab({ formData, setFormData }) {
  const buttons = formData.multiButtons || [];

  const handleChange = (index, field, value) => {
    const updated = [...buttons];
    updated[index] = { ...updated[index], [field]: value };
    setFormData(prev => ({ ...prev, multiButtons: updated }));
  };

  const addButton = () => {
    if (buttons.length < maxButtons) {
      setFormData(prev => ({
        ...prev,
        multiButtons: [
          ...buttons,
          { buttonText: "", buttonType: "URL", targetUrl: "" },
        ],
      }));
    }
  };

  const removeButton = index => {
    const updated = [...buttons];
    updated.splice(index, 1);
    setFormData(prev => ({ ...prev, multiButtons: updated }));
  };

  return (
    <div>
      <h3 className="text-2xl font-semibold mb-4">CTA Buttons (optional)</h3>

      {buttons.map((btn, i) => (
        <div key={i} className="mb-4 border p-4 rounded shadow-sm">
          <div className="mb-2">
            <label className="block text-sm font-medium mb-1">
              Button Text
            </label>
            <input
              type="text"
              value={btn.buttonText}
              onChange={e => handleChange(i, "buttonText", e.target.value)}
              className="w-full border rounded px-4 py-2"
              placeholder="e.g. Buy Now"
            />
          </div>

          <div className="mb-2">
            <label className="block text-sm font-medium mb-1">
              Button Type
            </label>
            <select
              value={btn.buttonType}
              onChange={e => handleChange(i, "buttonType", e.target.value)}
              className="w-full border rounded px-4 py-2"
            >
              <option value="URL">URL</option>
              <option value="PHONE">Phone</option>
              <option value="QUICK_REPLY">Quick Reply</option>
            </select>
          </div>

          {btn.buttonType !== "QUICK_REPLY" && (
            <div className="mb-2">
              <label className="block text-sm font-medium mb-1">Target</label>
              <input
                type="text"
                value={btn.targetUrl}
                onChange={e => handleChange(i, "targetUrl", e.target.value)}
                className="w-full border rounded px-4 py-2"
                placeholder={
                  btn.buttonType === "URL"
                    ? "https://example.com"
                    : "+919000000000"
                }
              />
            </div>
          )}

          <button
            onClick={() => removeButton(i)}
            className="mt-2 text-red-600 hover:underline text-sm"
          >
            Remove
          </button>
        </div>
      ))}

      {buttons.length < maxButtons && (
        <button
          onClick={addButton}
          className="px-4 py-2 bg-purple-600 text-white rounded shadow"
        >
          + Add Button
        </button>
      )}
    </div>
  );
}

export default CTAButtonsTab;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\MessageBuilderTab.jsx 
====================================================== 
 
// ✅ MessageBuilderTab.jsx — Param fields for Text Template
import React from "react";

function MessageBuilderTab({ formData, setFormData }) {
  const handleParamChange = (index, value) => {
    const updatedParams = [...(formData.templateParams || [])];
    updatedParams[index] = value;
    setFormData(prev => ({
      ...prev,
      templateParams: updatedParams,
    }));
  };

  return (
    <div>
      <h3 className="text-2xl font-semibold mb-4">Template Parameters</h3>

      {/* Only for text templates */}
      {formData.messageType === "text" && (
        <div className="space-y-3">
          {Array.from({ length: 5 }).map((_, i) => (
            <div key={i}>
              <label className="block text-sm font-medium mb-1">
                Param {`{{${i + 1}}}`}
              </label>
              <input
                type="text"
                className="w-full border rounded px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
                placeholder={`Enter value for {{${i + 1}}}`}
                value={formData.templateParams?.[i] || ""}
                onChange={e => handleParamChange(i, e.target.value)}
              />
            </div>
          ))}
        </div>
      )}

      {/* Future cases for image, doc can be handled here */}
      {formData.messageType !== "text" && (
        <p className="text-gray-500 italic">
          Builder not implemented for this message type.
        </p>
      )}
    </div>
  );
}

export default MessageBuilderTab;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\MessageTypeTab.jsx 
====================================================== 
 
import React, { useMemo } from "react";

function MessageBuilderTab({ formData, setFormData }) {
  const { messageType, messageBody = "", templateParams = [] } = formData;

  // ✅ Extract placeholders from message body like {{1}}, {{2}}, ...
  const placeholderIndexes = useMemo(() => {
    const matches = messageBody.match(/{{(\d+)}}/g);
    if (!matches) return [];
    const uniqueIndexes = [
      ...new Set(matches.map(m => Number(m.match(/\d+/)[0]))),
    ];
    return uniqueIndexes.sort((a, b) => a - b);
  }, [messageBody]);

  const handleParamChange = (index, value) => {
    const updated = [...templateParams];
    updated[index - 1] = value; // 1-based placeholders
    setFormData(prev => ({ ...prev, templateParams: updated }));
  };

  return (
    <div className="max-w-xl">
      <h3 className="text-2xl font-semibold mb-4">Fill Template Parameters</h3>

      {messageType !== "text" && (
        <div className="text-gray-500 italic">
          This section is only enabled for text templates right now.
        </div>
      )}

      {messageType === "text" && placeholderIndexes.length === 0 && (
        <div className="text-gray-500 italic">
          No parameters found in the selected template.
        </div>
      )}

      {messageType === "text" && placeholderIndexes.length > 0 && (
        <div className="space-y-4">
          {placeholderIndexes.map(paramNum => (
            <div key={paramNum}>
              <label className="block text-sm font-medium mb-1">
                Value for <span className="font-mono">{`{{${paramNum}}}`}</span>
              </label>

              <input
                type="text"
                value={templateParams[paramNum - 1] || ""}
                onChange={e => handleParamChange(paramNum, e.target.value)}
                placeholder={`Enter value for {{${paramNum}}}`}
                className="w-full border rounded px-4 py-2 shadow-sm focus:outline-none focus:ring-2 focus:ring-purple-500"
              />
            </div>
          ))}
        </div>
      )}
    </div>
  );
}

export default MessageBuilderTab;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\PreviewSendTab.jsx 
====================================================== 
 
import React, { useState } from "react";
import axiosClient from "../../../api/axiosClient"; // ✅ Adjust path if needed
import { toast } from "react-toastify";

function PreviewSendTab({ formData }) {
  const [loading, setLoading] = useState(false);

  const {
    templateId,
    templateParams = [],
    multiButtons = [],
    recipientIds = [],
  } = formData;

  // ✅ Check if form is valid
  const isValid =
    templateId &&
    templateParams.some(p => p && p.trim() !== "") &&
    recipientIds.length > 0;

  // 🔁 Sample template message for preview (can be dynamic in future)
  const sampleBody = "Hi {{1}}, your order {{2}} has been confirmed.";
  const previewBody = sampleBody.replace(/{{(\d+)}}/g, (_, i) => {
    return templateParams[i - 1] || `{{${i}}}`;
  });

  const handleSend = async () => {
    try {
      setLoading(true);
      const payload = {
        templateId,
        templateParams,
        multiButtons,
        contactIds: recipientIds,
      };

      // FIX: Remove 'res' if unused
      await axiosClient.post("/api/messageengine/send-text-template", payload);
      toast.success("✅ Campaign sent successfully!");
    } catch (err) {
      console.error(err);
      toast.error("❌ Failed to send campaign.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div>
      <h3 className="text-2xl font-semibold mb-4">Preview & Send</h3>

      <div className="bg-gray-100 border p-4 rounded shadow-md max-w-lg space-y-4">
        <div className="bg-white p-3 rounded-md shadow-sm border">
          <p className="text-sm whitespace-pre-line">{previewBody}</p>
        </div>

        {multiButtons.length > 0 && (
          <div className="flex flex-col gap-2">
            {multiButtons.map((btn, i) => (
              <button
                key={i}
                className="bg-green-500 text-white px-4 py-2 rounded text-sm text-left"
              >
                {btn.buttonText}
              </button>
            ))}
          </div>
        )}
      </div>

      {!isValid && (
        <div className="text-red-500 mt-4">
          ❌ Please select a template, fill parameters, and choose at least one
          recipient.
        </div>
      )}

      <div className="mt-6">
        <button
          disabled={!isValid || loading}
          onClick={handleSend}
          className={`px-6 py-2 rounded text-white ${
            isValid
              ? "bg-purple-600 hover:bg-purple-700"
              : "bg-gray-400 cursor-not-allowed"
          }`}
        >
          {loading ? "Sending..." : "Send Campaign"}
        </button>
      </div>
    </div>
  );
}

export default PreviewSendTab;

// import React, { useState } from "react";
// import axiosClient from "../../../api/axiosClient"; // ✅ Adjust path if needed
// import { toast } from "react-toastify";

// function PreviewSendTab({ formData }) {
//   const [loading, setLoading] = useState(false);

//   const {
//     templateId,
//     templateParams = [],
//     multiButtons = [],
//     recipientIds = [],
//   } = formData;

//   // ✅ Check if form is valid
//   const isValid =
//     templateId &&
//     templateParams.some(p => p && p.trim() !== "") &&
//     recipientIds.length > 0;

//   // 🔁 Sample template message for preview (can be dynamic in future)
//   const sampleBody = "Hi {{1}}, your order {{2}} has been confirmed.";
//   const previewBody = sampleBody.replace(/{{(\d+)}}/g, (_, i) => {
//     return templateParams[i - 1] || `{{${i}}}`;
//   });

//   const handleSend = async () => {
//     try {
//       setLoading(true);
//       const payload = {
//         templateId,
//         templateParams,
//         multiButtons,
//         contactIds: recipientIds,
//       };

//       const res = await axiosClient.post(
//         "/api/messageengine/send-text-template",
//         payload
//       );
//       toast.success("✅ Campaign sent successfully!");
//     } catch (err) {
//       console.error(err);
//       toast.error("❌ Failed to send campaign.");
//     } finally {
//       setLoading(false);
//     }
//   };

//   return (
//     <div>
//       <h3 className="text-2xl font-semibold mb-4">Preview & Send</h3>

//       <div className="bg-gray-100 border p-4 rounded shadow-md max-w-lg space-y-4">
//         <div className="bg-white p-3 rounded-md shadow-sm border">
//           <p className="text-sm whitespace-pre-line">{previewBody}</p>
//         </div>

//         {multiButtons.length > 0 && (
//           <div className="flex flex-col gap-2">
//             {multiButtons.map((btn, i) => (
//               <button
//                 key={i}
//                 className="bg-green-500 text-white px-4 py-2 rounded text-sm text-left"
//               >
//                 {btn.buttonText}
//               </button>
//             ))}
//           </div>
//         )}
//       </div>

//       {!isValid && (
//         <div className="text-red-500 mt-4">
//           ❌ Please select a template, fill parameters, and choose at least one
//           recipient.
//         </div>
//       )}

//       <div className="mt-6">
//         <button
//           disabled={!isValid || loading}
//           onClick={handleSend}
//           className={`px-6 py-2 rounded text-white ${
//             isValid
//               ? "bg-purple-600 hover:bg-purple-700"
//               : "bg-gray-400 cursor-not-allowed"
//           }`}
//         >
//           {loading ? "Sending..." : "Send Campaign"}
//         </button>
//       </div>
//     </div>
//   );
// }

// export default PreviewSendTab;
 
 
====================================================== 
FILE: D:\xbytechat\xbytechat-ui\src\pages\Campaigns\tabs\RecipientsTab.jsx 
====================================================== 
 
// 📁 src/pages/Campaigns/tabs/RecipientsTab.jsx
import React from "react";

function RecipientsTab({ formData, setFormData }) {
  return (
    <div>
      <h3 className="text-xl font-semibold mb-4">Recipients</h3>
      <p className="text-gray-600">Recipient selection feature coming soon.</p>
    </div>
  );
}

export default RecipientsTab;
 
 
