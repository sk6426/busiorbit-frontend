import { useEffect, useState } from "react";
import {
  FileDown,
  FileSpreadsheet,
  FileText,
  ArrowDownAZ,
  ArrowUpZA,
} from "lucide-react";
import * as XLSX from "xlsx";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { ToastContainer } from "react-toastify";

function MessageHistory() {
  const [logs, setLogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [sortField, setSortField] = useState(null);
  const [sortOrder, setSortOrder] = useState("asc");
  const itemsPerPage = 5;

  useEffect(() => {
    fetch("https://localhost:7113/api/messagelogs")
      .then(res => {
        if (!res.ok) throw new Error("Failed to fetch logs");
        return res.json();
      })
      .then(data => setLogs(data))
      .catch(err => setError(err.message))
      .finally(() => setLoading(false));
  }, []);

  const filteredLogs = logs.filter(log => {
    const lower = searchTerm.toLowerCase();
    return (
      log.name?.toLowerCase().includes(lower) ||
      log.phone?.toLowerCase().includes(lower) ||
      log.message?.toLowerCase().includes(lower) ||
      log.status?.toLowerCase().includes(lower)
    );
  });

  const sortedLogs = [...filteredLogs].sort((a, b) => {
    if (!sortField) return 0;
    const aVal = a[sortField]?.toString().toLowerCase() || "";
    const bVal = b[sortField]?.toString().toLowerCase() || "";
    return sortOrder === "asc"
      ? aVal.localeCompare(bVal)
      : bVal.localeCompare(aVal);
  });

  const paginatedLogs = sortedLogs.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const totalPages = Math.ceil(filteredLogs.length / itemsPerPage);

  const handleSort = field => {
    if (sortField === field) {
      setSortOrder(sortOrder === "asc" ? "desc" : "asc");
    } else {
      setSortField(field);
      setSortOrder("asc");
    }
  };

  const exportCSV = () => {
    try {
      const headers = ["Name", "Phone", "Message", "Status", "Date"];
      const rows = filteredLogs.map(log => [
        log.name,
        log.phone,
        log.message,
        log.status,
        log.createdAt,
      ]);

      const csvContent = [
        headers.join(","),
        ...rows.map(row => row.map(cell => `"${cell}"`).join(",")),
      ].join("\n");

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      link.href = URL.createObjectURL(blob);
      link.download = `xbytechat_logs_${Date.now()}.csv`;
      link.click();

      toast.success("CSV exported successfully!");
    } catch (error) {
      toast.error("Failed to export CSV.");
    }
  };

  const exportExcel = () => {
    try {
      const ws = XLSX.utils.json_to_sheet(filteredLogs);
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, "Logs");
      XLSX.writeFile(wb, `xbytechat_logs_${Date.now()}.xlsx`);

      toast.success("Excel exported successfully!");
    } catch (error) {
      toast.error("Failed to export Excel.");
    }
  };

  const exportPDF = () => {
    try {
      const doc = new jsPDF();
      doc.text("xByteChat - Message Logs", 14, 10);
      doc.setFontSize(8);
      doc.setTextColor(180);
      doc.text("Generated by xByteChat", 14, 16);

      autoTable(doc, {
        head: [["Name", "Phone", "Message", "Status", "Date"]],
        body: filteredLogs.map(log => [
          log.name,
          log.phone,
          log.message,
          log.status,
          log.createdAt,
        ]),
        startY: 20,
      });

      doc.save(`xbytechat_logs_${Date.now()}.pdf`);
      toast.success("PDF exported successfully!");
    } catch (error) {
      toast.error("Failed to export PDF.");
    }
  };

  const getSortIcon = field => {
    if (sortField !== field) return null;
    return sortOrder === "asc" ? (
      <ArrowDownAZ size={14} />
    ) : (
      <ArrowUpZA size={14} />
    );
  };

  return (
    <div className="bg-white p-6 rounded-xl shadow">
      <ToastContainer />
      <h2 className="text-xl font-bold mb-4">üìú All Message Logs</h2>

      <input
        type="text"
        placeholder="üîç Search by name, phone, message, status"
        className="mb-4 w-full px-4 py-2 border rounded-xl focus:outline-none focus:ring-2 focus:ring-purple-500"
        value={searchTerm}
        onChange={e => setSearchTerm(e.target.value)}
      />

      {loading && (
        <div className="w-full bg-gray-200 rounded-full overflow-hidden h-2 mb-4">
          <div className="bg-purple-600 h-2 animate-pulse w-full"></div>
        </div>
      )}

      {error && <p className="text-red-600">‚ùå {error}</p>}

      {!loading && !error && (
        <>
          <div className="flex gap-3 mb-4">
            <button
              onClick={exportCSV}
              className="flex items-center gap-2 bg-purple-600 text-white px-4 py-2 rounded-xl hover:bg-purple-700 text-sm"
            >
              <FileDown size={16} /> CSV
            </button>
            <button
              onClick={exportExcel}
              className="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded-xl hover:bg-green-700 text-sm"
            >
              <FileSpreadsheet size={16} /> Excel
            </button>
            <button
              onClick={exportPDF}
              className="flex items-center gap-2 bg-red-600 text-white px-4 py-2 rounded-xl hover:bg-red-700 text-sm"
            >
              <FileText size={16} /> PDF
            </button>
          </div>

          <div className="overflow-auto">
            <table className="w-full text-sm text-left">
              <thead className="bg-gray-100 text-gray-600">
                <tr>
                  <th
                    className="p-2 cursor-pointer"
                    onClick={() => handleSort("name")}
                  >
                    Name {getSortIcon("name")}
                  </th>
                  <th
                    className="p-2 cursor-pointer"
                    onClick={() => handleSort("phone")}
                  >
                    Phone {getSortIcon("phone")}
                  </th>
                  <th
                    className="p-2 cursor-pointer"
                    onClick={() => handleSort("message")}
                  >
                    Message {getSortIcon("message")}
                  </th>
                  <th
                    className="p-2 cursor-pointer"
                    onClick={() => handleSort("status")}
                  >
                    Status {getSortIcon("status")}
                  </th>
                  <th
                    className="p-2 cursor-pointer"
                    onClick={() => handleSort("createdAt")}
                  >
                    Date {getSortIcon("createdAt")}
                  </th>
                </tr>
              </thead>
              <tbody>
                {paginatedLogs.map((log, index) => (
                  <tr key={index} className="border-t">
                    <td className="p-2">{log.name}</td>
                    <td className="p-2">{log.phone}</td>
                    <td className="p-2">{log.message}</td>
                    <td
                      className={`p-2 font-semibold ${
                        log.status === "Success"
                          ? "text-green-600"
                          : "text-red-600"
                      }`}
                    >
                      {log.status}
                    </td>
                    <td className="p-2">{log.createdAt}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Pagination Controls */}
          <div className="mt-6 flex justify-center gap-2">
            {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`px-3 py-1 rounded-full text-sm border ${
                  page === currentPage
                    ? "bg-purple-600 text-white border-purple-600"
                    : "bg-white text-gray-700 hover:bg-gray-100"
                }`}
              >
                {page}
              </button>
            ))}
          </div>
        </>
      )}
    </div>
  );
}

export default MessageHistory;
